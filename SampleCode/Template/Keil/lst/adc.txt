; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\adc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\adc.crf ..\..\..\Library\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;76       */
;;;77     void ADC_Close(ADC_T *adc)
000000  2001              MOVS     r0,#1
;;;78     {
;;;79         SYS->IPRST1 |= SYS_IPRST1_ADCRST_Msk;
000002  0780              LSLS     r0,r0,#30
000004  68c2              LDR      r2,[r0,#0xc]
000006  1081              ASRS     r1,r0,#2
000008  430a              ORRS     r2,r2,r1
00000a  60c2              STR      r2,[r0,#0xc]
;;;80         SYS->IPRST1 &= ~SYS_IPRST1_ADCRST_Msk;
00000c  68c2              LDR      r2,[r0,#0xc]
00000e  438a              BICS     r2,r2,r1
000010  60c2              STR      r2,[r0,#0xc]
;;;81         return;
;;;82     }
000012  4770              BX       lr
;;;83     
                          ENDP


                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_DisableHWTrigger PROC
;;;127      */
;;;128    void ADC_DisableHWTrigger(ADC_T *adc)
000000  3080              ADDS     r0,r0,#0x80
;;;129    {
;;;130        adc->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  6801              LDR      r1,[r0,#0]
000004  22ff              MOVS     r2,#0xff
000006  32f1              ADDS     r2,r2,#0xf1
000008  4391              BICS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;131        return;
;;;132    }
00000c  4770              BX       lr
;;;133    
                          ENDP


                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=1

                  ADC_DisableInt PROC
;;;167      */
;;;168    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;169    {
;;;170        if((u32Mask) & ADC_ADF_INT)
;;;171            adc->ADCR &= ~ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;170
000008  d002              BEQ      |L3.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4393              BICS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L3.16|
;;;172        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L3.26|
;;;173            adc->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4393              BICS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L3.26|
;;;174        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L3.36|
;;;175            adc->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4391              BICS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L3.36|
;;;176    
;;;177        return;
;;;178    }
000024  4770              BX       lr
;;;179    
                          ENDP


                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_EnableHWTrigger PROC
;;;100      */
;;;101    void ADC_EnableHWTrigger(ADC_T *adc,
000000  b530              PUSH     {r4,r5,lr}
;;;102                             uint32_t u32Source,
;;;103                             uint32_t u32Param)
;;;104    {
;;;105        if(u32Source == ADC_ADCR_TRGS_STADC)
;;;106        {
;;;107            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000002  23ff              MOVS     r3,#0xff
000004  24ff              MOVS     r4,#0xff
000006  33f1              ADDS     r3,r3,#0xf1
000008  3401              ADDS     r4,#1
00000a  3080              ADDS     r0,r0,#0x80
00000c  2900              CMP      r1,#0                 ;105
00000e  d009              BEQ      |L4.36|
;;;108                        ((adc->ADCR) | (u32Source) | (u32Param) | ADC_ADCR_TRGEN_Msk);
;;;109        }
;;;110        else if(u32Source == ADC_ADCR_TRGS_TIMER)
000010  2910              CMP      r1,#0x10
000012  d00e              BEQ      |L4.50|
;;;111        {
;;;112            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
;;;113                        ((adc->ADCR) | (u32Source) | ADC_ADCR_TRGEN_Msk);
;;;114        }
;;;115        else
;;;116        {
;;;117            adc->ADCR = (adc->ADCR & ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk)) |
000014  6802              LDR      r2,[r0,#0]
000016  6805              LDR      r5,[r0,#0]
000018  4321              ORRS     r1,r1,r4
00001a  439d              BICS     r5,r5,r3
00001c  432a              ORRS     r2,r2,r5
00001e  430a              ORRS     r2,r2,r1
000020  6002              STR      r2,[r0,#0]
;;;118                        ((adc->ADCR) | (u32Source) | ADC_ADCR_TRGEN_Msk);
;;;119        }
;;;120        return;
;;;121    }
000022  bd30              POP      {r4,r5,pc}
                  |L4.36|
000024  6801              LDR      r1,[r0,#0]            ;107
000026  6805              LDR      r5,[r0,#0]            ;107
000028  439d              BICS     r5,r5,r3              ;107
00002a  4329              ORRS     r1,r1,r5              ;107
00002c  4311              ORRS     r1,r1,r2              ;107
00002e  4321              ORRS     r1,r1,r4              ;107
000030  e006              B        |L4.64|
                  |L4.50|
000032  6801              LDR      r1,[r0,#0]            ;112
000034  6802              LDR      r2,[r0,#0]            ;112
000036  439a              BICS     r2,r2,r3              ;112
000038  4311              ORRS     r1,r1,r2              ;112
00003a  22ff              MOVS     r2,#0xff              ;112
00003c  3211              ADDS     r2,r2,#0x11           ;112
00003e  4311              ORRS     r1,r1,r2              ;112
                  |L4.64|
000040  6001              STR      r1,[r0,#0]            ;107
000042  bd30              POP      {r4,r5,pc}
;;;122    
                          ENDP


                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=1

                  ADC_EnableInt PROC
;;;144      */
;;;145    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;146    {
;;;147        if((u32Mask) & ADC_ADF_INT)
;;;148            adc->ADCR |= ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  3080              ADDS     r0,r0,#0x80
000006  2b00              CMP      r3,#0                 ;147
000008  d002              BEQ      |L5.16|
00000a  6803              LDR      r3,[r0,#0]
00000c  4313              ORRS     r3,r3,r2
00000e  6003              STR      r3,[r0,#0]
                  |L5.16|
;;;149        if((u32Mask) & ADC_CMP0_INT)
000010  078b              LSLS     r3,r1,#30
000012  d502              BPL      |L5.26|
;;;150            adc->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000014  6883              LDR      r3,[r0,#8]
000016  4313              ORRS     r3,r3,r2
000018  6083              STR      r3,[r0,#8]
                  |L5.26|
;;;151        if((u32Mask) & ADC_CMP1_INT)
00001a  0749              LSLS     r1,r1,#29
00001c  d502              BPL      |L5.36|
;;;152            adc->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00001e  68c1              LDR      r1,[r0,#0xc]
000020  4311              ORRS     r1,r1,r2
000022  60c1              STR      r1,[r0,#0xc]
                  |L5.36|
;;;153    
;;;154        return;
;;;155    }
000024  4770              BX       lr
;;;156    
                          ENDP


                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;42       */
;;;43     void ADC_Open(ADC_T *adc,
000000  b5f0              PUSH     {r4-r7,lr}
;;;44                   uint32_t u32InputMode,
;;;45                   uint32_t u32OpMode,
;;;46                   uint32_t u32ChMask)
;;;47     {
;;;48         /* Do calibration for ADC to decrease the effect of electrical random noise. */
;;;49         if ((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) == 0)
000002  4604              MOV      r4,r0
000004  34ff              ADDS     r4,r4,#0xff
000006  4694              MOV      r12,r2                ;47
000008  3481              ADDS     r4,r4,#0x81
00000a  6862              LDR      r2,[r4,#4]
00000c  469e              MOV      lr,r3                 ;47
00000e  07d2              LSLS     r2,r2,#31
000010  3080              ADDS     r0,r0,#0x80
000012  2a00              CMP      r2,#0
000014  d121              BNE      |L6.90|
000016  2659              MOVS     r6,#0x59              ;47
000018  4d15              LDR      r5,|L6.112|
00001a  2716              MOVS     r7,#0x16              ;47
00001c  2288              MOVS     r2,#0x88              ;47
                  |L6.30|
00001e  602e              STR      r6,[r5,#0]            ;47
000020  602f              STR      r7,[r5,#0]            ;47
000022  602a              STR      r2,[r5,#0]            ;47
000024  682b              LDR      r3,[r5,#0]            ;47
000026  2b00              CMP      r3,#0                 ;47
000028  d0f9              BEQ      |L6.30|
;;;50         {
;;;51             /* Must reset ADC before ADC calibration */
;;;52             SYS_UnlockReg();
;;;53             adc->ADCR |= ADC_ADCR_RESET_Msk;
00002a  6802              LDR      r2,[r0,#0]
00002c  2301              MOVS     r3,#1
00002e  031b              LSLS     r3,r3,#12
000030  431a              ORRS     r2,r2,r3
000032  6002              STR      r2,[r0,#0]
                  |L6.52|
;;;54             while((adc->ADCR & ADC_ADCR_RESET_Msk) == ADC_ADCR_RESET_Msk);
000034  6802              LDR      r2,[r0,#0]
000036  04d2              LSLS     r2,r2,#19
000038  d4fc              BMI      |L6.52|
00003a  2200              MOVS     r2,#0
00003c  602a              STR      r2,[r5,#0]
;;;55             SYS_LockReg();
;;;56     
;;;57             adc->ADCALSTSR |= ADC_ADCALSTSR_CALIF_Msk;  /* Clear Calibration Finish Interrupt Flag */
00003e  6862              LDR      r2,[r4,#4]
000040  2301              MOVS     r3,#1
000042  431a              ORRS     r2,r2,r3
000044  6062              STR      r2,[r4,#4]
;;;58             adc->ADCALR |= ADC_ADCALR_CALEN_Msk;        /* Enable Calibration function */
000046  6822              LDR      r2,[r4,#0]
000048  431a              ORRS     r2,r2,r3
00004a  6022              STR      r2,[r4,#0]
;;;59             ADC_START_CONV(adc);                        /* Start to calibration */
00004c  6802              LDR      r2,[r0,#0]
00004e  02db              LSLS     r3,r3,#11
000050  431a              ORRS     r2,r2,r3
000052  6002              STR      r2,[r0,#0]
                  |L6.84|
;;;60             while((adc->ADCALSTSR & ADC_ADCALSTSR_CALIF_Msk) != ADC_ADCALSTSR_CALIF_Msk);   /* Wait calibration finish */
000054  6862              LDR      r2,[r4,#4]
000056  07d2              LSLS     r2,r2,#31
000058  d0fc              BEQ      |L6.84|
                  |L6.90|
;;;61         }
;;;62     
;;;63         adc->ADCR = (adc->ADCR & (~(ADC_ADCR_DIFFEN_Msk | ADC_ADCR_ADMD_Msk))) | \
00005a  6802              LDR      r2,[r0,#0]
00005c  4b05              LDR      r3,|L6.116|
00005e  401a              ANDS     r2,r2,r3
000060  430a              ORRS     r2,r2,r1
000062  4661              MOV      r1,r12
000064  430a              ORRS     r2,r2,r1
000066  6002              STR      r2,[r0,#0]
;;;64                     (u32InputMode) | \
;;;65                     (u32OpMode);
;;;66     
;;;67         adc->ADCHER = (adc->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32ChMask);
000068  6841              LDR      r1,[r0,#4]
00006a  4671              MOV      r1,lr
00006c  6041              STR      r1,[r0,#4]
;;;68     
;;;69         return;
;;;70     }
00006e  bdf0              POP      {r4-r7,pc}
;;;71     
                          ENDP

                  |L6.112|
                          DCD      0x40000100
                  |L6.116|
                          DCD      0xfffffbf3

                          AREA ||i.ADC_SetExtendSampleTime||, CODE, READONLY, ALIGN=1

                  ADC_SetExtendSampleTime PROC
;;;188      */
;;;189    void ADC_SetExtendSampleTime(ADC_T *adc, uint32_t u32ModuleNum, uint32_t u32ExtendSampleTime)
000000  3080              ADDS     r0,r0,#0x80
;;;190    {
;;;191        adc->ESMPCTL = (adc->ESMPCTL & ~ADC_ESMPCTL_EXTSMPT_Msk) |
000002  6a01              LDR      r1,[r0,#0x20]
000004  0a09              LSRS     r1,r1,#8
000006  0209              LSLS     r1,r1,#8
000008  4311              ORRS     r1,r1,r2
00000a  6201              STR      r1,[r0,#0x20]
;;;192                       (u32ExtendSampleTime << ADC_ESMPCTL_EXTSMPT_Pos);
;;;193    }
00000c  4770              BX       lr
;;;194    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 402
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
