; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\fmc.crf ..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;35       */
;;;36     void FMC_Close(void)
000000  4802              LDR      r0,|L1.12|
;;;37     {
;;;38         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;39     }
00000a  4770              BX       lr
;;;40     
                          ENDP

                  |L1.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase||, CODE, READONLY, ALIGN=2

                  FMC_Erase PROC
;;;49       */
;;;50     int32_t FMC_Erase(uint32_t u32PageAddr)
000000  4603              MOV      r3,r0
;;;51     {
;;;52         int32_t  ret = 0;
;;;53     
;;;54         if (u32PageAddr == FMC_SPROM_BASE)
000002  2101              MOVS     r1,#1
000004  b500              PUSH     {lr}                  ;51
000006  2000              MOVS     r0,#0                 ;52
000008  0549              LSLS     r1,r1,#21
00000a  428b              CMP      r3,r1
00000c  d103              BNE      |L2.22|
;;;55         {
;;;56             ret = FMC_Erase_SPROM();
00000e  f7fffffe          BL       FMC_Erase_SPROM
;;;57         }
;;;58     
;;;59         if (ret == 0)
000012  2800              CMP      r0,#0
000014  d111              BNE      |L2.58|
                  |L2.22|
;;;60         {
;;;61             FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000016  4909              LDR      r1,|L2.60|
000018  2222              MOVS     r2,#0x22
00001a  60ca              STR      r2,[r1,#0xc]
;;;62             FMC->ISPADDR = u32PageAddr;
00001c  604b              STR      r3,[r1,#4]
;;;63             FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00001e  2201              MOVS     r2,#1
000020  610a              STR      r2,[r1,#0x10]
                  |L2.34|
;;;64     
;;;65             while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000022  690a              LDR      r2,[r1,#0x10]
000024  07d2              LSLS     r2,r2,#31
000026  d1fc              BNE      |L2.34|
;;;66     
;;;67             if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000028  680a              LDR      r2,[r1,#0]
00002a  0652              LSLS     r2,r2,#25
00002c  d505              BPL      |L2.58|
;;;68             {
;;;69                 FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00002e  6808              LDR      r0,[r1,#0]
000030  2240              MOVS     r2,#0x40
000032  4310              ORRS     r0,r0,r2
000034  6008              STR      r0,[r1,#0]
;;;70                 ret = -1;
000036  2000              MOVS     r0,#0
000038  43c0              MVNS     r0,r0
                  |L2.58|
;;;71             }
;;;72         }
;;;73         return ret;
;;;74     }
00003a  bd00              POP      {pc}
;;;75     
                          ENDP

                  |L2.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Erase_SPROM||, CODE, READONLY, ALIGN=2

                  FMC_Erase_SPROM PROC
;;;82       */
;;;83     int32_t FMC_Erase_SPROM(void)
000000  2000              MOVS     r0,#0
;;;84     {
;;;85         int32_t  ret = 0;
;;;86     
;;;87         FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000002  490b              LDR      r1,|L3.48|
000004  2222              MOVS     r2,#0x22
000006  60ca              STR      r2,[r1,#0xc]
;;;88         FMC->ISPADDR = FMC_SPROM_BASE;
000008  2201              MOVS     r2,#1
00000a  0552              LSLS     r2,r2,#21
00000c  604a              STR      r2,[r1,#4]
;;;89         FMC->ISPDAT = 0x0055AA03UL;
00000e  4a09              LDR      r2,|L3.52|
000010  608a              STR      r2,[r1,#8]
;;;90         FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2201              MOVS     r2,#1
000014  610a              STR      r2,[r1,#0x10]
                  |L3.22|
;;;91     
;;;92         while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
000016  690a              LDR      r2,[r1,#0x10]
000018  07d2              LSLS     r2,r2,#31
00001a  d1fc              BNE      |L3.22|
;;;93     
;;;94         if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
00001c  680a              LDR      r2,[r1,#0]
00001e  0652              LSLS     r2,r2,#25
000020  d505              BPL      |L3.46|
;;;95         {
;;;96             FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
000022  6808              LDR      r0,[r1,#0]
000024  2240              MOVS     r2,#0x40
000026  4310              ORRS     r0,r0,r2
000028  6008              STR      r0,[r1,#0]
;;;97             ret = -1;
00002a  2000              MOVS     r0,#0
00002c  43c0              MVNS     r0,r0
                  |L3.46|
;;;98         }
;;;99         return ret;
;;;100    }
00002e  4770              BX       lr
;;;101    
                          ENDP

                  |L3.48|
                          DCD      0x4000c000
                  |L3.52|
                          DCD      0x0055aa03

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;107      */
;;;108    int32_t FMC_GetBootSource (void)
000000  4903              LDR      r1,|L4.16|
;;;109    {
;;;110        int32_t  ret = 0;
000002  2000              MOVS     r0,#0
;;;111    
;;;112        if (FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
000004  6809              LDR      r1,[r1,#0]
000006  0789              LSLS     r1,r1,#30
000008  d500              BPL      |L4.12|
;;;113        {
;;;114            ret = 1;
00000a  2001              MOVS     r0,#1
                  |L4.12|
;;;115        }
;;;116    
;;;117        return ret;
;;;118    }
00000c  4770              BX       lr
;;;119    
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetChkSum||, CODE, READONLY, ALIGN=2

                  FMC_GetChkSum PROC
;;;257      */
;;;258    uint32_t  FMC_GetChkSum(uint32_t u32addr, uint32_t u32count)
000000  4602              MOV      r2,r0
;;;259    {
000002  b510              PUSH     {r4,lr}
;;;260        uint32_t   ret;
;;;261    
;;;262        if ((u32addr % 512UL) || (u32count % 512UL))
000004  430a              ORRS     r2,r2,r1
000006  05d2              LSLS     r2,r2,#23
000008  d002              BEQ      |L5.16|
;;;263        {
;;;264            ret = 0xFFFFFFFF;
00000a  2000              MOVS     r0,#0
00000c  43c0              MVNS     r0,r0
;;;265        }
;;;266        else
;;;267        {
;;;268            FMC->ISPCMD  = FMC_ISPCMD_RUN_CKS;
;;;269            FMC->ISPADDR = u32addr;
;;;270            FMC->ISPDAT  = u32count;
;;;271            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;272    
;;;273            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;274    
;;;275            FMC->ISPCMD = FMC_ISPCMD_READ_CKS;
;;;276            FMC->ISPADDR    = u32addr;
;;;277            FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;278    
;;;279            while (FMC->ISPSTS & FMC_ISPSTS_ISPBUSY_Msk) { }
;;;280    
;;;281            ret = FMC->ISPDAT;
;;;282        }
;;;283    
;;;284        return ret;
;;;285    }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  4b0a              LDR      r3,|L5.60|
000012  222d              MOVS     r2,#0x2d              ;268
000014  60da              STR      r2,[r3,#0xc]          ;268
000016  6058              STR      r0,[r3,#4]            ;269
000018  6099              STR      r1,[r3,#8]            ;270
00001a  2401              MOVS     r4,#1                 ;271
00001c  611c              STR      r4,[r3,#0x10]         ;271
00001e  4907              LDR      r1,|L5.60|
000020  3140              ADDS     r1,r1,#0x40           ;273
                  |L5.34|
000022  680a              LDR      r2,[r1,#0]            ;273
000024  07d2              LSLS     r2,r2,#31             ;273
000026  d1fc              BNE      |L5.34|
000028  220d              MOVS     r2,#0xd               ;275
00002a  60da              STR      r2,[r3,#0xc]          ;275
00002c  6058              STR      r0,[r3,#4]            ;276
00002e  611c              STR      r4,[r3,#0x10]         ;277
                  |L5.48|
000030  6808              LDR      r0,[r1,#0]            ;279
000032  07c0              LSLS     r0,r0,#31             ;279
000034  d1fc              BNE      |L5.48|
000036  6898              LDR      r0,[r3,#8]            ;281
000038  bd10              POP      {r4,pc}
;;;286    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      0x4000c000

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;124      */
;;;125    void FMC_Open(void)
000000  4802              LDR      r0,|L6.12|
;;;126    {
;;;127        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2201              MOVS     r2,#1
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;128    }
00000a  4770              BX       lr
;;;129    
                          ENDP

                  |L6.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;136      */
;;;137    uint32_t FMC_Read(uint32_t u32Addr)
000000  4905              LDR      r1,|L7.24|
;;;138    {
;;;139        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;140        FMC->ISPADDR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;141        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
                  |L7.12|
;;;142        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000c  6908              LDR      r0,[r1,#0x10]
00000e  07c0              LSLS     r0,r0,#31
000010  d1fc              BNE      |L7.12|
;;;143    
;;;144        return FMC->ISPDAT;
000012  6888              LDR      r0,[r1,#8]
;;;145    }
000014  4770              BX       lr
;;;146    
                          ENDP

000016  0000              DCW      0x0000
                  |L7.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=2

                  FMC_ReadConfig PROC
;;;204      */
;;;205    int32_t FMC_ReadConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b530              PUSH     {r4,r5,lr}
;;;206    {
000002  4604              MOV      r4,r0
;;;207        int32_t   ret = 0;
;;;208    
;;;209        u32Config[0] = FMC_Read(FMC_CONFIG_BASE);
000004  2003              MOVS     r0,#3
000006  460b              MOV      r3,r1                 ;206
000008  2500              MOVS     r5,#0                 ;207
00000a  0500              LSLS     r0,r0,#20
00000c  f7fffffe          BL       FMC_Read
;;;210    
;;;211        if (u32Count > 3UL)
000010  6020              STR      r0,[r4,#0]
000012  2b03              CMP      r3,#3
000014  d901              BLS      |L8.26|
;;;212        {
;;;213            ret = -1;
000016  1e6d              SUBS     r5,r5,#1
000018  e00c              B        |L8.52|
                  |L8.26|
;;;214        }
;;;215        else
;;;216        {
;;;217            if(u32Count > 1UL)
00001a  2b01              CMP      r3,#1
00001c  d903              BLS      |L8.38|
;;;218            {
;;;219                u32Config[1] = FMC_Read(FMC_CONFIG_BASE+4UL);
00001e  4806              LDR      r0,|L8.56|
000020  f7fffffe          BL       FMC_Read
000024  6060              STR      r0,[r4,#4]
                  |L8.38|
;;;220            }
;;;221            if(u32Count > 2UL)
000026  2b02              CMP      r3,#2
000028  d904              BLS      |L8.52|
;;;222            {
;;;223                u32Config[2] = FMC_Read(FMC_CONFIG_BASE+8UL);
00002a  4803              LDR      r0,|L8.56|
00002c  1d00              ADDS     r0,r0,#4
00002e  f7fffffe          BL       FMC_Read
000032  60a0              STR      r0,[r4,#8]
                  |L8.52|
;;;224            }
;;;225        }
;;;226        return ret;
000034  4628              MOV      r0,r5
;;;227    }
000036  bd30              POP      {r4,r5,pc}
;;;228    
                          ENDP

                  |L8.56|
                          DCD      0x00300004

                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;151      */
;;;152    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L9.8|
;;;153    {
;;;154        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;155    }
000004  4770              BX       lr
;;;156    
                          ENDP

000006  0000              DCW      0x0000
                  |L9.8|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;166      */
;;;167    void FMC_SetBootSource(int32_t i32BootSrc)
000000  4904              LDR      r1,|L10.20|
;;;168    {
;;;169        if(i32BootSrc)
;;;170        {
;;;171            FMC->ISPCTL |= FMC_ISPCTL_BS_Msk; /* Boot from LDROM */
000002  2202              MOVS     r2,#2
000004  2800              CMP      r0,#0                 ;169
;;;172        }
;;;173        else
;;;174        {
;;;175            FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;/* Boot from APROM */
000006  6808              LDR      r0,[r1,#0]
000008  d001              BEQ      |L10.14|
00000a  4310              ORRS     r0,r0,r2              ;171
00000c  e000              B        |L10.16|
                  |L10.14|
00000e  4390              BICS     r0,r0,r2
                  |L10.16|
000010  6008              STR      r0,[r1,#0]            ;171
;;;176        }
;;;177    }
000012  4770              BX       lr
;;;178    
                          ENDP

                  |L10.20|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;185      */
;;;186    void FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  4a05              LDR      r2,|L11.24|
;;;187    {
;;;188        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000002  2321              MOVS     r3,#0x21
000004  60d3              STR      r3,[r2,#0xc]
;;;189        FMC->ISPADDR = u32Addr;
000006  6050              STR      r0,[r2,#4]
;;;190        FMC->ISPDAT = u32Data;
000008  6091              STR      r1,[r2,#8]
;;;191        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000a  2001              MOVS     r0,#1
00000c  6110              STR      r0,[r2,#0x10]
                  |L11.14|
;;;192        while (FMC->ISPTRG & FMC_ISPTRG_ISPGO_Msk) { }
00000e  6910              LDR      r0,[r2,#0x10]
000010  07c0              LSLS     r0,r0,#31
000012  d1fc              BNE      |L11.14|
;;;193    }
000014  4770              BX       lr
;;;194    
                          ENDP

000016  0000              DCW      0x0000
                  |L11.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=2

                  FMC_WriteConfig PROC
;;;238      */
;;;239    int32_t FMC_WriteConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b5f0              PUSH     {r4-r7,lr}
;;;240    {
;;;241        FMC_ENABLE_CFG_UPDATE();
000002  4c0b              LDR      r4,|L12.48|
000004  4605              MOV      r5,r0                 ;240
000006  6820              LDR      r0,[r4,#0]
000008  2610              MOVS     r6,#0x10
00000a  4330              ORRS     r0,r0,r6
00000c  6020              STR      r0,[r4,#0]
;;;242        FMC_Erase(FMC_CONFIG_BASE);
00000e  01a7              LSLS     r7,r4,#6
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       FMC_Erase
;;;243        FMC_Write(FMC_CONFIG_BASE, u32Config[0]);
000016  4638              MOV      r0,r7
000018  6829              LDR      r1,[r5,#0]
00001a  f7fffffe          BL       FMC_Write
;;;244        FMC_Write(FMC_CONFIG_BASE+4UL, u32Config[1]);
00001e  1d38              ADDS     r0,r7,#4
000020  6869              LDR      r1,[r5,#4]
000022  f7fffffe          BL       FMC_Write
;;;245        FMC_DISABLE_CFG_UPDATE();
000026  6820              LDR      r0,[r4,#0]
000028  43b0              BICS     r0,r0,r6
00002a  6020              STR      r0,[r4,#0]
;;;246        return 0;
00002c  2000              MOVS     r0,#0
;;;247    }
00002e  bdf0              POP      {r4-r7,pc}
;;;248    
                          ENDP

                  |L12.48|
                          DCD      0x4000c000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_fmc_c_65c03504____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REVSH|
#line 402
|__asm___5_fmc_c_65c03504____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
