; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\clk.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\clk.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\clk.crf ..\..\..\Library\StdDriver\src\clk.c]
                          THUMB

                          AREA ||i.CLK_DisableCKO||, CODE, READONLY, ALIGN=2

                  CLK_DisableCKO PROC
;;;30       */
;;;31     void CLK_DisableCKO(void)
000000  4802              LDR      r0,|L1.12|
;;;32     {
;;;33         /* Disable CKO clock source */
;;;34         CLK->APBCLK0 &= (~CLK_APBCLK0_CLKOCKEN_Msk);
000002  6881              LDR      r1,[r0,#8]
000004  2240              MOVS     r2,#0x40
000006  4391              BICS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  |L1.12|
                          DCD      0x40000200

                          AREA ||i.CLK_DisableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_DisableModuleClock PROC
;;;497      */
;;;498    void CLK_DisableModuleClock(uint32_t u32ModuleIdx)
000000  b50e              PUSH     {r1-r3,lr}
;;;499    {
;;;500        uint32_t u32ClkTbl[3] = {0x0, 0x4, 0x8};    /* AHBCLK/APBCLK offset on MODULE index, 0x0:AHBCLK, 0x1:APBCLK0, 0x2:APBCLK1 */
000002  4909              LDR      r1,|L2.40|
000004  c90e              LDM      r1,{r1-r3}
;;;501    
;;;502        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + (u32ClkTbl[MODULE_APBCLK(u32ModuleIdx)]))  &= ~(1 << MODULE_IP_EN_Pos(u32ModuleIdx));
000006  9100              STR      r1,[sp,#0]
000008  9201              STR      r2,[sp,#4]
00000a  0f81              LSRS     r1,r0,#30
00000c  008a              LSLS     r2,r1,#2
00000e  9302              STR      r3,[sp,#8]
000010  4669              MOV      r1,sp
000012  588a              LDR      r2,[r1,r2]
000014  4905              LDR      r1,|L2.44|
000016  1851              ADDS     r1,r2,r1
000018  684a              LDR      r2,[r1,#4]
00001a  06c3              LSLS     r3,r0,#27
00001c  0edb              LSRS     r3,r3,#27
00001e  2001              MOVS     r0,#1
000020  4098              LSLS     r0,r0,r3
000022  4382              BICS     r2,r2,r0
000024  604a              STR      r2,[r1,#4]
;;;503    }
000026  bd0e              POP      {r1-r3,pc}
;;;504    
                          ENDP

                  |L2.40|
                          DCD      ||.constdata||+0x2c
                  |L2.44|
                          DCD      0x40000200

                          AREA ||i.CLK_DisablePLL||, CODE, READONLY, ALIGN=2

                  CLK_DisablePLL PROC
;;;637      */
;;;638    void CLK_DisablePLL(void)
000000  b510              PUSH     {r4,lr}
;;;639    {
;;;640        /* Switch HCLK to HIRC before disable PLL if current HCLK is PLL */
;;;641        if ((CLK->CLKSEL0 & CLK_CLKSEL0_HCLKSEL_Msk) == CLK_CLKSEL0_HCLKSEL_PLL)
000002  4c0c              LDR      r4,|L3.52|
000004  6920              LDR      r0,[r4,#0x10]
000006  0740              LSLS     r0,r0,#29
000008  0f40              LSRS     r0,r0,#29
00000a  2802              CMP      r0,#2
00000c  d10a              BNE      |L3.36|
;;;642        {
;;;643            CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
00000e  6820              LDR      r0,[r4,#0]
000010  2104              MOVS     r1,#4
000012  4308              ORRS     r0,r0,r1
000014  6020              STR      r0,[r4,#0]
;;;644            CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000016  2010              MOVS     r0,#0x10
000018  f7fffffe          BL       CLK_WaitClockReady
;;;645            CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLKSEL_Msk)) | CLK_CLKSEL0_HCLKSEL_HIRC;
00001c  6920              LDR      r0,[r4,#0x10]
00001e  2107              MOVS     r1,#7
000020  4308              ORRS     r0,r0,r1
000022  6120              STR      r0,[r4,#0x10]
                  |L3.36|
;;;646        }
;;;647    
;;;648        CLK->PLLCTL |= CLK_PLLCTL_PD_Msk;
000024  4803              LDR      r0,|L3.52|
000026  3040              ADDS     r0,r0,#0x40
000028  6801              LDR      r1,[r0,#0]
00002a  1382              ASRS     r2,r0,#14
00002c  4311              ORRS     r1,r1,r2
00002e  6001              STR      r1,[r0,#0]
;;;649    }
000030  bd10              POP      {r4,pc}
;;;650    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      0x40000200

                          AREA ||i.CLK_DisableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_DisableSysTick PROC
;;;716      */
;;;717    void CLK_DisableSysTick(void)
000000  4901              LDR      r1,|L4.8|
;;;718    {
;;;719        /* Set System Tick counter disabled */
;;;720        SysTick->CTRL = 0;
000002  2000              MOVS     r0,#0
000004  6108              STR      r0,[r1,#0x10]
;;;721    }
000006  4770              BX       lr
;;;722    
                          ENDP

                  |L4.8|
                          DCD      0xe000e000

                          AREA ||i.CLK_DisableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_DisableXtalRC PROC
;;;425      */
;;;426    void CLK_DisableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L5.12|
;;;427    {
;;;428        CLK->PWRCTL &= ~u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;429    }
000008  4770              BX       lr
;;;430    
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      0x40000200

                          AREA ||i.CLK_EnableCKO||, CODE, READONLY, ALIGN=2

                  CLK_EnableCKO PROC
;;;57       */
;;;58     void CLK_EnableCKO(uint32_t u32ClkSrc, uint32_t u32ClkDiv, uint32_t u32ClkDivBy1En)
000000  0152              LSLS     r2,r2,#5
;;;59     {
;;;60         /* CKO = clock source / 2^(u32ClkDiv + 1) */
;;;61         CLK->CLKOCTL = CLK_CLKOCTL_CLKOEN_Msk | u32ClkDiv | (u32ClkDivBy1En << CLK_CLKOCTL_DIV1EN_Pos);
000002  430a              ORRS     r2,r2,r1
000004  2110              MOVS     r1,#0x10
000006  430a              ORRS     r2,r2,r1
000008  4906              LDR      r1,|L6.36|
00000a  620a              STR      r2,[r1,#0x20]
;;;62     
;;;63         /* Enable CKO clock source */
;;;64         CLK->APBCLK0 |= CLK_APBCLK0_CLKOCKEN_Msk;
00000c  4905              LDR      r1,|L6.36|
00000e  3940              SUBS     r1,r1,#0x40
000010  688a              LDR      r2,[r1,#8]
000012  2340              MOVS     r3,#0x40
000014  431a              ORRS     r2,r2,r3
000016  608a              STR      r2,[r1,#8]
;;;65     
;;;66         /* Select CKO clock source */
;;;67         CLK->CLKSEL1 = (CLK->CLKSEL1 & (~CLK_CLKSEL1_CLKOSEL_Msk)) | (u32ClkSrc);
000018  694a              LDR      r2,[r1,#0x14]
00001a  2370              MOVS     r3,#0x70
00001c  439a              BICS     r2,r2,r3
00001e  4302              ORRS     r2,r2,r0
000020  614a              STR      r2,[r1,#0x14]
;;;68     }
000022  4770              BX       lr
;;;69     
                          ENDP

                  |L6.36|
                          DCD      0x40000240

                          AREA ||i.CLK_EnableModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_EnableModuleClock PROC
;;;460      */
;;;461    void CLK_EnableModuleClock(uint32_t u32ModuleIdx)
000000  b50e              PUSH     {r1-r3,lr}
;;;462    {
;;;463        uint32_t u32ClkTbl[3] = {0x0, 0x4, 0x8};    /* AHBCLK/APBCLK offset on MODULE index, 0x0:AHBCLK, 0x1:APBCLK0, 0x2:APBCLK1 */
000002  4909              LDR      r1,|L7.40|
000004  c90e              LDM      r1,{r1-r3}
;;;464    
;;;465        *(volatile uint32_t *)((uint32_t)&CLK->AHBCLK + (u32ClkTbl[MODULE_APBCLK(u32ModuleIdx)]))  |= 1 << MODULE_IP_EN_Pos(u32ModuleIdx);
000006  9100              STR      r1,[sp,#0]
000008  9201              STR      r2,[sp,#4]
00000a  0f81              LSRS     r1,r0,#30
00000c  008a              LSLS     r2,r1,#2
00000e  9302              STR      r3,[sp,#8]
000010  4669              MOV      r1,sp
000012  588a              LDR      r2,[r1,r2]
000014  4905              LDR      r1,|L7.44|
000016  1851              ADDS     r1,r2,r1
000018  684a              LDR      r2,[r1,#4]
00001a  06c3              LSLS     r3,r0,#27
00001c  0edb              LSRS     r3,r3,#27
00001e  2001              MOVS     r0,#1
000020  4098              LSLS     r0,r0,r3
000022  4302              ORRS     r2,r2,r0
000024  604a              STR      r2,[r1,#4]
;;;466    }
000026  bd0e              POP      {r1-r3,pc}
;;;467    
                          ENDP

                  |L7.40|
                          DCD      ||.constdata||+0x20
                  |L7.44|
                          DCD      0x40000200

                          AREA ||i.CLK_EnablePLL||, CODE, READONLY, ALIGN=2

                  CLK_EnablePLL PROC
;;;514      */
;;;515    uint32_t CLK_EnablePLL(uint32_t u32PllClkSrc, uint32_t u32PllFreq)
000000  b5f0              PUSH     {r4-r7,lr}
;;;516    {
000002  b087              SUB      sp,sp,#0x1c
000004  460f              MOV      r7,r1
000006  4606              MOV      r6,r0
;;;517        uint32_t u32PllSrcClk, u32NR, u32NF, u32NO, u32CLK_SRC, u32Outdiv;
;;;518        uint32_t u32Tmp, u32Tmp2, u32Tmp3, u32Min, u32MinNF, u32MinNR;
;;;519    
;;;520        /* Disable PLL first to avoid unstable when setting PLL */
;;;521        CLK_DisablePLL();
000008  f7fffffe          BL       CLK_DisablePLL
;;;522    
;;;523        /* PLL source clock is from HXT */
;;;524        if(u32PllClkSrc == CLK_PLLCTL_PLLSRC_HXT)
;;;525        {
;;;526            /* Enable HXT clock */
;;;527            CLK->PWRCTL |= CLK_PWRCTL_HXTEN_Msk;
00000c  484b              LDR      r0,|L8.316|
;;;528    
;;;529            /* Wait for HXT clock ready */
;;;530            CLK_WaitClockReady(CLK_STATUS_HXTSTB_Msk);
;;;531    
;;;532            /* Select PLL source clock from HXT */
;;;533            u32CLK_SRC = CLK_PLLCTL_PLLSRC_HXT;
;;;534            u32PllSrcClk = __HXT;
00000e  4d4c              LDR      r5,|L8.320|
;;;535    
;;;536            /* u32NR start from 2 since NR = INDIV + 2 */
;;;537            u32NR = 2;
;;;538        }
;;;539    
;;;540        /* PLL source clock is from HIRC/4 */
;;;541        else
;;;542        {
;;;543            /* Enable HIRC clock */
;;;544            CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
000010  6801              LDR      r1,[r0,#0]
000012  2e00              CMP      r6,#0                 ;524
000014  d02e              BEQ      |L8.116|
000016  2204              MOVS     r2,#4
000018  4311              ORRS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;545    
;;;546            /* Wait for HIRC clock ready */
;;;547            CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001c  2010              MOVS     r0,#0x10
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;548    
;;;549            /* Select PLL source clock from HIRC */
;;;550            u32CLK_SRC = CLK_PLLCTL_PLLSRC_HIRC_DIV4;
000022  2001              MOVS     r0,#1
000024  04c0              LSLS     r0,r0,#19
;;;551            u32PllSrcClk = __HIRC >> 2;
000026  9002              STR      r0,[sp,#8]
000028  4846              LDR      r0,|L8.324|
00002a  9003              STR      r0,[sp,#0xc]
                  |L8.44|
;;;552    
;;;553            /* u32NR start from 2 since NR = INDIV + 2 */
;;;554            u32NR = 2;
;;;555        }
;;;556    
;;;557        /* Select "NO" according to request frequency */
;;;558        /* Constraint: PLL output frequency must <= 96MHz */
;;;559        /*             PLL output frequency must > 50.14MHz to meet all constraints */
;;;560        if((u32PllFreq <= FREQ_96MHZ) && (u32PllFreq >= FREQ_51MHZ))
00002c  4846              LDR      r0,|L8.328|
00002e  4947              LDR      r1,|L8.332|
000030  2402              MOVS     r4,#2                 ;554
000032  1838              ADDS     r0,r7,r0
000034  4288              CMP      r0,r1
000036  d852              BHI      |L8.222|
;;;561        {
;;;562            u32NO = 4;
000038  2004              MOVS     r0,#4
;;;563            u32Outdiv = 3;
00003a  9004              STR      r0,[sp,#0x10]
00003c  2003              MOVS     r0,#3
;;;564            u32PllFreq = u32PllFreq << 2;   /* u32PllFreq = (FIN * NF / NR) now */
00003e  00be              LSLS     r6,r7,#2
;;;565        }
;;;566        else
;;;567        {
;;;568            /* Wrong frequency request. Just return default setting. */
;;;569            goto lexit;
;;;570        }
;;;571    
;;;572        /* Find best solution */
;;;573        u32Min = (uint32_t) 0xFFFFFFFF; /* initial u32Min to max value of uint32_t */
000040  1f05              SUBS     r5,r0,#4
;;;574        u32MinNR = 0;
000042  9005              STR      r0,[sp,#0x14]
000044  2000              MOVS     r0,#0
;;;575        u32MinNF = 0;
000046  9000              STR      r0,[sp,#0]
000048  9001              STR      r0,[sp,#4]
                  |L8.74|
;;;576        for(; u32NR <= 33; u32NR++) /* max NR = 33 since NR = INDIV + 2 and INDIV = 0 ~ 31 */
;;;577        {
;;;578            u32Tmp = u32PllSrcClk / u32NR;
00004a  4621              MOV      r1,r4
00004c  9803              LDR      r0,[sp,#0xc]
00004e  f7fffffe          BL       __aeabi_uidivmod
;;;579            /* Constraint 2: 800KHz < (FIN / (2*NR)) < 8MHz */
;;;580            if((u32Tmp > 1600000) && (u32Tmp < 16000000))
000052  493f              LDR      r1,|L8.336|
000054  1842              ADDS     r2,r0,r1
000056  493f              LDR      r1,|L8.340|
000058  428a              CMP      r2,r1
00005a  d220              BCS      |L8.158|
;;;581            {
;;;582                for(u32NF = 2; u32NF <= 513; u32NF++) /* NF = 2~513 since NF = FBDIV + 2 and FBDIV = 0 ~ 511 */
00005c  2202              MOVS     r2,#2
                  |L8.94|
00005e  4601              MOV      r1,r0
;;;583                {
;;;584                    u32Tmp2 = u32Tmp * u32NF;
;;;585                    /* Constraint 3: 200MHz < (FIN * NF / NR) < 500MHz */
;;;586                    if((u32Tmp2 >= 200000000) && (u32Tmp2 < 500000000))
000060  4b3d              LDR      r3,|L8.344|
000062  4351              MULS     r1,r2,r1              ;584
000064  18cf              ADDS     r7,r1,r3
000066  4b3d              LDR      r3,|L8.348|
000068  429f              CMP      r7,r3
00006a  d214              BCS      |L8.150|
;;;587                    {
;;;588                        u32Tmp3 = (u32Tmp2 > u32PllFreq) ? u32Tmp2 - u32PllFreq : u32PllFreq - u32Tmp2;
00006c  42b1              CMP      r1,r6
00006e  d90b              BLS      |L8.136|
000070  1b8b              SUBS     r3,r1,r6
000072  e00a              B        |L8.138|
                  |L8.116|
000074  2201              MOVS     r2,#1                 ;527
000076  4311              ORRS     r1,r1,r2              ;527
000078  6001              STR      r1,[r0,#0]            ;527
00007a  4610              MOV      r0,r2                 ;530
00007c  f7fffffe          BL       CLK_WaitClockReady
000080  2000              MOVS     r0,#0                 ;533
000082  9503              STR      r5,[sp,#0xc]          ;537
000084  9002              STR      r0,[sp,#8]            ;537
000086  e7d1              B        |L8.44|
                  |L8.136|
000088  1a73              SUBS     r3,r6,r1
                  |L8.138|
;;;589                        if(u32Tmp3 < u32Min)
00008a  42ab              CMP      r3,r5
00008c  d203              BCS      |L8.150|
;;;590                        {
;;;591                            u32Min = u32Tmp3;
00008e  001d              MOVS     r5,r3
;;;592                            u32MinNR = u32NR;
;;;593                            u32MinNF = u32NF;
;;;594    
;;;595                            /* Break when get good results */
;;;596                            if(u32Min == 0)
000090  9400              STR      r4,[sp,#0]
000092  9201              STR      r2,[sp,#4]
000094  d003              BEQ      |L8.158|
                  |L8.150|
000096  4932              LDR      r1,|L8.352|
000098  1c52              ADDS     r2,r2,#1              ;582
00009a  428a              CMP      r2,r1                 ;582
00009c  d9df              BLS      |L8.94|
                  |L8.158|
00009e  1c64              ADDS     r4,r4,#1              ;582
0000a0  2c21              CMP      r4,#0x21              ;576
0000a2  d9d2              BLS      |L8.74|
;;;597                                break;
;;;598                        }
;;;599                    }
;;;600                }
;;;601            }
;;;602        }
;;;603    
;;;604        /* Enable and apply new PLL setting. */
;;;605        CLK->PLLCTL = u32CLK_SRC |
0000a4  9805              LDR      r0,[sp,#0x14]
0000a6  9902              LDR      r1,[sp,#8]
0000a8  0380              LSLS     r0,r0,#14
0000aa  4308              ORRS     r0,r0,r1
0000ac  9900              LDR      r1,[sp,#0]
0000ae  2201              MOVS     r2,#1
0000b0  0249              LSLS     r1,r1,#9
0000b2  0292              LSLS     r2,r2,#10
0000b4  1a89              SUBS     r1,r1,r2
0000b6  4308              ORRS     r0,r0,r1
0000b8  9901              LDR      r1,[sp,#4]
0000ba  1e89              SUBS     r1,r1,#2
0000bc  4308              ORRS     r0,r0,r1
0000be  491f              LDR      r1,|L8.316|
0000c0  3140              ADDS     r1,r1,#0x40
0000c2  6008              STR      r0,[r1,#0]
;;;606                      (u32Outdiv << CLK_PLLCTL_OUTDIV_Pos) |
;;;607                      ((u32MinNR - 2) << CLK_PLLCTL_INDIV_Pos) |
;;;608                      ((u32MinNF - 2) << CLK_PLLCTL_FBDIV_Pos);
;;;609    
;;;610        /* Wait for PLL clock stable */
;;;611        CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
0000c4  2004              MOVS     r0,#4
0000c6  f7fffffe          BL       CLK_WaitClockReady
;;;612    
;;;613        /* Return actual PLL output clock frequency */
;;;614        return (u32PllSrcClk / (u32NO * u32MinNR) * u32MinNF);
0000ca  9904              LDR      r1,[sp,#0x10]
0000cc  9800              LDR      r0,[sp,#0]
0000ce  4341              MULS     r1,r0,r1
0000d0  9803              LDR      r0,[sp,#0xc]
0000d2  f7fffffe          BL       __aeabi_uidivmod
0000d6  9901              LDR      r1,[sp,#4]
0000d8  4348              MULS     r0,r1,r0
                  |L8.218|
;;;615    
;;;616    lexit:
;;;617    
;;;618        /* Apply default PLL setting and return */
;;;619        if(u32PllClkSrc == CLK_PLLCTL_PLLSRC_HXT)
;;;620            CLK->PLLCTL = CLK_PLLCTL_96MHz_HXT;
;;;621        else
;;;622            CLK->PLLCTL = CLK_PLLCTL_96MHz_HIRC_DIV4;
;;;623    
;;;624        /* Wait for PLL clock stable */
;;;625        CLK_WaitClockReady(CLK_STATUS_PLLSTB_Msk);
;;;626    
;;;627        return CLK_GetPLLClockFreq();
;;;628    }
0000da  b007              ADD      sp,sp,#0x1c
0000dc  bdf0              POP      {r4-r7,pc}
                  |L8.222|
0000de  2e00              CMP      r6,#0                 ;619
0000e0  d015              BEQ      |L8.270|
0000e2  4920              LDR      r1,|L8.356|
                  |L8.228|
0000e4  4815              LDR      r0,|L8.316|
0000e6  3040              ADDS     r0,r0,#0x40           ;622
0000e8  6001              STR      r1,[r0,#0]            ;622
0000ea  2004              MOVS     r0,#4                 ;625
0000ec  f7fffffe          BL       CLK_WaitClockReady
0000f0  a01d              ADR      r0,|L8.360|
0000f2  6800              LDR      r0,[r0,#0]            ;625
0000f4  9000              STR      r0,[sp,#0]            ;625
0000f6  4911              LDR      r1,|L8.316|
0000f8  2000              MOVS     r0,#0                 ;625
0000fa  3140              ADDS     r1,r1,#0x40           ;625
0000fc  6809              LDR      r1,[r1,#0]            ;625
0000fe  2205              MOVS     r2,#5                 ;625
000100  0412              LSLS     r2,r2,#16             ;625
000102  4211              TST      r1,r2                 ;625
000104  d1e9              BNE      |L8.218|
000106  0308              LSLS     r0,r1,#12             ;625
000108  d503              BPL      |L8.274|
00010a  480e              LDR      r0,|L8.324|
00010c  e002              B        |L8.276|
                  |L8.270|
00010e  4917              LDR      r1,|L8.364|
000110  e7e8              B        |L8.228|
                  |L8.274|
000112  4628              MOV      r0,r5                 ;620
                  |L8.276|
000114  038a              LSLS     r2,r1,#14             ;620
000116  d4e0              BMI      |L8.218|
000118  040a              LSLS     r2,r1,#16             ;620
00011a  0f92              LSRS     r2,r2,#30             ;620
00011c  466b              MOV      r3,sp                 ;620
00011e  5c9b              LDRB     r3,[r3,r2]            ;620
000120  05ca              LSLS     r2,r1,#23             ;620
000122  0489              LSLS     r1,r1,#18             ;620
000124  0dd2              LSRS     r2,r2,#23             ;620
000126  0ec9              LSRS     r1,r1,#27             ;620
000128  1c89              ADDS     r1,r1,#2              ;620
00012a  0880              LSRS     r0,r0,#2              ;620
00012c  1c92              ADDS     r2,r2,#2              ;620
00012e  4359              MULS     r1,r3,r1              ;620
000130  4350              MULS     r0,r2,r0              ;620
000132  f7fffffe          BL       __aeabi_uidivmod
000136  0080              LSLS     r0,r0,#2              ;620
000138  e7cf              B        |L8.218|
;;;629    
                          ENDP

00013a  0000              DCW      0x0000
                  |L8.316|
                          DCD      0x40000200
                  |L8.320|
                          DCD      0x01e84800
                  |L8.324|
                          DCD      0x00b71b00
                  |L8.328|
                          DCD      0xfcf5cd40
                  |L8.332|
                          DCD      0x02aea540
                  |L8.336|
                          DCD      0xffe795ff
                  |L8.340|
                          DCD      0x00dbb9ff
                  |L8.344|
                          DCD      0xf4143e00
                  |L8.348|
                          DCD      0x11e1a300
                  |L8.352|
                          DCD      0x00000201
                  |L8.356|
                          DCD      0x0008c25e
                  |L8.360|
000168  01020204          DCB      1,2,2,4
                  |L8.364|
                          DCD      0x0000c25e

                          AREA ||i.CLK_EnableSysTick||, CODE, READONLY, ALIGN=2

                  CLK_EnableSysTick PROC
;;;689      */
;;;690    void CLK_EnableSysTick(uint32_t u32ClkSrc, uint32_t u32Count)
000000  b570              PUSH     {r4-r6,lr}
;;;691    {
;;;692        /* Set System Tick counter disabled */
;;;693        SysTick->CTRL = 0;
000002  4a0b              LDR      r2,|L9.48|
000004  2400              MOVS     r4,#0
000006  6114              STR      r4,[r2,#0x10]
;;;694    
;;;695        /* Set System Tick clock source */
;;;696        if(u32ClkSrc == CLK_CLKSEL0_STCLKSEL_HCLK)
000008  2804              CMP      r0,#4
00000a  d00c              BEQ      |L9.38|
;;;697            SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
;;;698        else
;;;699            CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLKSEL_Msk) | u32ClkSrc;
00000c  4d09              LDR      r5,|L9.52|
00000e  692b              LDR      r3,[r5,#0x10]
000010  2638              MOVS     r6,#0x38
000012  43b3              BICS     r3,r3,r6
000014  4303              ORRS     r3,r3,r0
000016  612b              STR      r3,[r5,#0x10]
                  |L9.24|
;;;700    
;;;701        /* Set System Tick reload value */
;;;702        SysTick->LOAD = u32Count;
000018  6151              STR      r1,[r2,#0x14]
;;;703    
;;;704        /* Clear System Tick current value and counter flag */
;;;705        SysTick->VAL = 0;
00001a  6194              STR      r4,[r2,#0x18]
;;;706    
;;;707        /* Set System Tick interrupt enabled and counter enabled */
;;;708        SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
00001c  6910              LDR      r0,[r2,#0x10]
00001e  2103              MOVS     r1,#3
000020  4308              ORRS     r0,r0,r1
000022  6110              STR      r0,[r2,#0x10]
;;;709    }
000024  bd70              POP      {r4-r6,pc}
                  |L9.38|
000026  6910              LDR      r0,[r2,#0x10]         ;697
000028  2304              MOVS     r3,#4                 ;697
00002a  4318              ORRS     r0,r0,r3              ;697
00002c  6110              STR      r0,[r2,#0x10]         ;697
00002e  e7f3              B        |L9.24|
;;;710    
                          ENDP

                  |L9.48|
                          DCD      0xe000e000
                  |L9.52|
                          DCD      0x40000200

                          AREA ||i.CLK_EnableXtalRC||, CODE, READONLY, ALIGN=2

                  CLK_EnableXtalRC PROC
;;;409      */
;;;410    void CLK_EnableXtalRC(uint32_t u32ClkMask)
000000  4902              LDR      r1,|L10.12|
;;;411    {
;;;412        CLK->PWRCTL |= u32ClkMask;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;413    }
000008  4770              BX       lr
;;;414    
                          ENDP

00000a  0000              DCW      0x0000
                  |L10.12|
                          DCD      0x40000200

                          AREA ||i.CLK_GetCPUFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetCPUFreq PROC
;;;178      */
;;;179    uint32_t CLK_GetCPUFreq(void)
000000  b510              PUSH     {r4,lr}
;;;180    {
;;;181        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;182        return SystemCoreClock;
000006  4801              LDR      r0,|L11.12|
000008  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;183    }
00000a  bd10              POP      {r4,pc}
;;;184    
                          ENDP

                  |L11.12|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetHXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetHXTFreq PROC
;;;120      */
;;;121    uint32_t CLK_GetHXTFreq(void)
000000  4802              LDR      r0,|L12.12|
;;;122    {
;;;123        if(CLK->PWRCTL & CLK_PWRCTL_HXTEN_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  07c0              LSLS     r0,r0,#31
000006  d000              BEQ      |L12.10|
;;;124            return __HXT;
000008  4801              LDR      r0,|L12.16|
                  |L12.10|
;;;125        else
;;;126            return 0;
;;;127    }
00000a  4770              BX       lr
;;;128    
                          ENDP

                  |L12.12|
                          DCD      0x40000200
                  |L12.16|
                          DCD      0x01e84800

                          AREA ||i.CLK_GetLXTFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetLXTFreq PROC
;;;134      */
;;;135    uint32_t CLK_GetLXTFreq(void)
000000  4804              LDR      r0,|L13.20|
;;;136    {
;;;137        if(CLK->PWRCTL & CLK_PWRCTL_LXTEN_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  0780              LSLS     r0,r0,#30
000006  d502              BPL      |L13.14|
;;;138            return __LXT;
000008  2001              MOVS     r0,#1
00000a  03c0              LSLS     r0,r0,#15
;;;139        else
;;;140            return 0;
;;;141    }
00000c  4770              BX       lr
                  |L13.14|
00000e  2000              MOVS     r0,#0                 ;140
000010  4770              BX       lr
;;;142    
                          ENDP

000012  0000              DCW      0x0000
                  |L13.20|
                          DCD      0x40000200

                          AREA ||i.CLK_GetPCLK0Freq||, CODE, READONLY, ALIGN=2

                  CLK_GetPCLK0Freq PROC
;;;148      */
;;;149    uint32_t CLK_GetPCLK0Freq(void)
000000  b510              PUSH     {r4,lr}
;;;150    {
;;;151        uint32_t PCLK0Div;
;;;152    
;;;153        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;154        PCLK0Div = (CLK->PCLKDIV & CLK_PCLKDIV_APB0DIV_Msk) >> CLK_PCLKDIV_APB0DIV_Pos;
000006  4804              LDR      r0,|L14.24|
000008  6b40              LDR      r0,[r0,#0x34]
00000a  0741              LSLS     r1,r0,#29
;;;155        return (SystemCoreClock >> PCLK0Div);
00000c  4803              LDR      r0,|L14.28|
00000e  0f49              LSRS     r1,r1,#29             ;154
000010  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000012  40c8              LSRS     r0,r0,r1
;;;156    }
000014  bd10              POP      {r4,pc}
;;;157    
                          ENDP

000016  0000              DCW      0x0000
                  |L14.24|
                          DCD      0x40000200
                  |L14.28|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  CLK_GetPCLK1Freq PROC
;;;163      */
;;;164    uint32_t CLK_GetPCLK1Freq(void)
000000  b510              PUSH     {r4,lr}
;;;165    {
;;;166        uint32_t PCLK1Div;
;;;167    
;;;168        SystemCoreClockUpdate();
000002  f7fffffe          BL       SystemCoreClockUpdate
;;;169        PCLK1Div = (CLK->PCLKDIV & CLK_PCLKDIV_APB1DIV_Msk) >> CLK_PCLKDIV_APB1DIV_Pos;
000006  4804              LDR      r0,|L15.24|
000008  6b40              LDR      r0,[r0,#0x34]
;;;170        return (SystemCoreClock >> PCLK1Div);
;;;171    }
00000a  0640              LSLS     r0,r0,#25
00000c  0f41              LSRS     r1,r0,#29
00000e  4803              LDR      r0,|L15.28|
000010  6800              LDR      r0,[r0,#0]            ;170  ; SystemCoreClock
000012  40c8              LSRS     r0,r0,r1              ;170
000014  bd10              POP      {r4,pc}
;;;172    
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      0x40000200
                  |L15.28|
                          DCD      SystemCoreClock

                          AREA ||i.CLK_Idle||, CODE, READONLY, ALIGN=2

                  CLK_Idle PROC
;;;102      */
;;;103    void CLK_Idle(void)
000000  4805              LDR      r0,|L16.24|
;;;104    {
;;;105        /* Set the processor uses sleep as its low power mode */
;;;106        SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
000002  6901              LDR      r1,[r0,#0x10]
000004  2204              MOVS     r2,#4
000006  4391              BICS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;107    
;;;108        /* Set chip in idle mode because of WFI command */
;;;109        CLK->PWRCTL &= ~CLK_PWRCTL_PDEN_Msk;
00000a  4804              LDR      r0,|L16.28|
00000c  6801              LDR      r1,[r0,#0]
00000e  2280              MOVS     r2,#0x80
000010  4391              BICS     r1,r1,r2
000012  6001              STR      r1,[r0,#0]
;;;110    
;;;111        /* Chip enter idle mode after CPU run WFI instruction */
;;;112        __WFI();
000014  bf30              WFI      
;;;113    }
000016  4770              BX       lr
;;;114    
                          ENDP

                  |L16.24|
                          DCD      0xe000ed00
                  |L16.28|
                          DCD      0x40000200

                          AREA ||i.CLK_PowerDown||, CODE, READONLY, ALIGN=2

                  CLK_PowerDown PROC
;;;77       */
;;;78     void CLK_PowerDown(void)
000000  4807              LDR      r0,|L17.32|
;;;79     {
;;;80         /* Check HIRC/MIRC auto trim function disable */
;;;81         if(SYS->HIRCTRIMCTL & SYS_HIRCTRIMCTL_FREQSEL_Msk)
000002  6b00              LDR      r0,[r0,#0x30]
000004  0780              LSLS     r0,r0,#30
000006  d10a              BNE      |L17.30|
;;;82         {
;;;83             return;
;;;84         }
;;;85     
;;;86         /* Set the processor uses deep sleep as its low power mode */
;;;87         SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
000008  4806              LDR      r0,|L17.36|
00000a  6901              LDR      r1,[r0,#0x10]
00000c  2204              MOVS     r2,#4
00000e  4311              ORRS     r1,r1,r2
000010  6101              STR      r1,[r0,#0x10]
;;;88     
;;;89         /* Set system Power-down enabled*/
;;;90         CLK->PWRCTL |= CLK_PWRCTL_PDEN_Msk;
000012  4805              LDR      r0,|L17.40|
000014  6801              LDR      r1,[r0,#0]
000016  2280              MOVS     r2,#0x80
000018  4311              ORRS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;91     
;;;92         /* Chip enter Power-down mode after CPU run WFI instruction */
;;;93         __WFI();
00001c  bf30              WFI      
                  |L17.30|
;;;94     }
00001e  4770              BX       lr
;;;95     
                          ENDP

                  |L17.32|
                          DCD      0x400000c0
                  |L17.36|
                          DCD      0xe000ed00
                  |L17.40|
                          DCD      0x40000200

                          AREA ||i.CLK_SetCoreClock||, CODE, READONLY, ALIGN=2

                  CLK_SetCoreClock PROC
;;;193      */
;;;194    uint32_t CLK_SetCoreClock(uint32_t u32Hclk)
000000  b5f8              PUSH     {r3-r7,lr}
;;;195    {
;;;196        uint32_t u32HIRCSTB;
;;;197    
;;;198        /* Read HIRC clock source stable flag */
;;;199        u32HIRCSTB = CLK->STATUS & CLK_STATUS_HIRCSTB_Msk;
000002  4f1d              LDR      r7,|L18.120|
000004  4604              MOV      r4,r0                 ;195
000006  693e              LDR      r6,[r7,#0x10]
000008  2010              MOVS     r0,#0x10
00000a  4006              ANDS     r6,r6,r0
;;;200    
;;;201        /* The range of u32Hclk is 25.5 MHz ~ 48 MHz */
;;;202        if(u32Hclk > FREQ_48MHZ)
00000c  481b              LDR      r0,|L18.124|
00000e  4284              CMP      r4,r0
000010  d802              BHI      |L18.24|
;;;203            u32Hclk = FREQ_48MHZ;
;;;204        if(u32Hclk < (FREQ_51MHZ >> 1))
000012  481b              LDR      r0,|L18.128|
000014  4284              CMP      r4,r0
000016  d200              BCS      |L18.26|
                  |L18.24|
000018  4604              MOV      r4,r0                 ;203
                  |L18.26|
;;;205            u32Hclk = (FREQ_51MHZ >> 1);
;;;206    
;;;207        /* Switch HCLK clock source to HIRC clock for safe */
;;;208        CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
00001a  4d17              LDR      r5,|L18.120|
00001c  3d40              SUBS     r5,r5,#0x40
00001e  6828              LDR      r0,[r5,#0]
000020  2104              MOVS     r1,#4
000022  4308              ORRS     r0,r0,r1
000024  6028              STR      r0,[r5,#0]
;;;209        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
000026  2010              MOVS     r0,#0x10
000028  f7fffffe          BL       CLK_WaitClockReady
;;;210        CLK->CLKSEL0 |= CLK_CLKSEL0_HCLKSEL_Msk;
00002c  6928              LDR      r0,[r5,#0x10]
00002e  2107              MOVS     r1,#7
000030  4308              ORRS     r0,r0,r1
000032  6128              STR      r0,[r5,#0x10]
;;;211        CLK->CLKDIV0 &= (~CLK_CLKDIV0_HCLKDIV_Msk);
000034  6a28              LDR      r0,[r5,#0x20]
000036  0900              LSRS     r0,r0,#4
000038  0100              LSLS     r0,r0,#4
00003a  6228              STR      r0,[r5,#0x20]
;;;212    
;;;213        /* Configure PLL setting if HXT clock is stable */
;;;214        if(CLK->STATUS & CLK_STATUS_HXTSTB_Msk)
00003c  6938              LDR      r0,[r7,#0x10]
00003e  07c0              LSLS     r0,r0,#31
000040  d005              BEQ      |L18.78|
;;;215            u32Hclk = CLK_EnablePLL(CLK_PLLCTL_PLLSRC_HXT, (u32Hclk << 1));
000042  0061              LSLS     r1,r4,#1
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       CLK_EnablePLL
00004a  4604              MOV      r4,r0
00004c  e008              B        |L18.96|
                  |L18.78|
;;;216    
;;;217        /* Configure PLL setting if HXT clock is not stable */
;;;218        else
;;;219        {
;;;220            u32Hclk = CLK_EnablePLL(CLK_PLLCTL_PLLSRC_HIRC_DIV4, (u32Hclk << 1));
00004e  2001              MOVS     r0,#1
000050  0061              LSLS     r1,r4,#1
000052  04c0              LSLS     r0,r0,#19
000054  f7fffffe          BL       CLK_EnablePLL
;;;221    
;;;222            /* Read HIRC clock source stable flag */
;;;223            u32HIRCSTB = CLK->STATUS & CLK_STATUS_HIRCSTB_Msk;
000058  693e              LDR      r6,[r7,#0x10]
00005a  4604              MOV      r4,r0                 ;220
00005c  2010              MOVS     r0,#0x10
00005e  4006              ANDS     r6,r6,r0
                  |L18.96|
;;;224        }
;;;225    
;;;226        /* Select HCLK clock source to PLL,
;;;227           Select HCLK clock source divider as 2
;;;228           and update system core clock
;;;229        */
;;;230        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_PLL, CLK_CLKDIV0_HCLK(2));
000060  2101              MOVS     r1,#1
000062  2002              MOVS     r0,#2
000064  f7fffffe          BL       CLK_SetHCLK
;;;231    
;;;232        /* Disable HIRC if HIRC is disabled before setting core clock */
;;;233        if(u32HIRCSTB == 0)
000068  2e00              CMP      r6,#0
00006a  d103              BNE      |L18.116|
;;;234            CLK->PWRCTL &= ~CLK_PWRCTL_HIRCEN_Msk;
00006c  6828              LDR      r0,[r5,#0]
00006e  2104              MOVS     r1,#4
000070  4388              BICS     r0,r0,r1
000072  6028              STR      r0,[r5,#0]
                  |L18.116|
;;;235    
;;;236        /* Return actually HCLK frequency is PLL frequency divide 2 */
;;;237        return u32Hclk >> 1;
000074  0860              LSRS     r0,r4,#1
;;;238    }
000076  bdf8              POP      {r3-r7,pc}
;;;239    
                          ENDP

                  |L18.120|
                          DCD      0x40000240
                  |L18.124|
                          DCD      0x02dc6c00
                  |L18.128|
                          DCD      0x01851960

                          AREA ||i.CLK_SetHCLK||, CODE, READONLY, ALIGN=2

                  CLK_SetHCLK PROC
;;;253      */
;;;254    void CLK_SetHCLK(uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;255    {
;;;256        uint32_t u32HIRCSTB;
;;;257    
;;;258        /* Read HIRC clock source stable flag */
;;;259        u32HIRCSTB = CLK->STATUS & CLK_STATUS_HIRCSTB_Msk;
000002  4812              LDR      r0,|L19.76|
000004  b081              SUB      sp,sp,#4              ;255
000006  6905              LDR      r5,[r0,#0x10]
000008  460f              MOV      r7,r1                 ;255
00000a  2010              MOVS     r0,#0x10
;;;260    
;;;261        /* Switch to HIRC for Safe. Avoid HCLK too high when applying new divider. */
;;;262        CLK->PWRCTL |= CLK_PWRCTL_HIRCEN_Msk;
00000c  4c0f              LDR      r4,|L19.76|
00000e  4005              ANDS     r5,r5,r0              ;259
000010  3c40              SUBS     r4,r4,#0x40
000012  6820              LDR      r0,[r4,#0]
000014  2604              MOVS     r6,#4
000016  4330              ORRS     r0,r0,r6
000018  6020              STR      r0,[r4,#0]
;;;263        CLK_WaitClockReady(CLK_STATUS_HIRCSTB_Msk);
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       CLK_WaitClockReady
;;;264        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLKSEL_Msk)) | CLK_CLKSEL0_HCLKSEL_HIRC;
000020  6920              LDR      r0,[r4,#0x10]
000022  2107              MOVS     r1,#7
000024  4308              ORRS     r0,r0,r1
000026  6120              STR      r0,[r4,#0x10]
;;;265    
;;;266        /* Apply new Divider */
;;;267        CLK->CLKDIV0 = (CLK->CLKDIV0 & (~CLK_CLKDIV0_HCLKDIV_Msk)) | u32ClkDiv;
000028  6a20              LDR      r0,[r4,#0x20]
00002a  0900              LSRS     r0,r0,#4
00002c  0100              LSLS     r0,r0,#4
00002e  4338              ORRS     r0,r0,r7
000030  6220              STR      r0,[r4,#0x20]
;;;268    
;;;269        /* Switch HCLK to new HCLK source */
;;;270        CLK->CLKSEL0 = (CLK->CLKSEL0 & (~CLK_CLKSEL0_HCLKSEL_Msk)) | u32ClkSrc;
000032  6920              LDR      r0,[r4,#0x10]
000034  4388              BICS     r0,r0,r1
000036  9901              LDR      r1,[sp,#4]
000038  4308              ORRS     r0,r0,r1
00003a  6120              STR      r0,[r4,#0x10]
;;;271    
;;;272        /* Update System Core Clock */
;;;273        SystemCoreClockUpdate();
00003c  f7fffffe          BL       SystemCoreClockUpdate
;;;274    
;;;275        /* Disable HIRC if HIRC is disabled before switching HCLK source */
;;;276        if(u32HIRCSTB == 0)
000040  2d00              CMP      r5,#0
000042  d102              BNE      |L19.74|
;;;277            CLK->PWRCTL &= ~CLK_PWRCTL_HIRCEN_Msk;
000044  6820              LDR      r0,[r4,#0]
000046  43b0              BICS     r0,r0,r6
000048  6020              STR      r0,[r4,#0]
                  |L19.74|
;;;278    }
00004a  bdfe              POP      {r1-r7,pc}
;;;279    
                          ENDP

                  |L19.76|
                          DCD      0x40000240

                          AREA ||i.CLK_SetModuleClock||, CODE, READONLY, ALIGN=2

                  CLK_SetModuleClock PROC
;;;358      */
;;;359    void CLK_SetModuleClock(uint32_t u32ModuleIdx, uint32_t u32ClkSrc, uint32_t u32ClkDiv)
000000  b5f0              PUSH     {r4-r7,lr}
;;;360    {
;;;361        uint32_t u32sel = 0, u32div = 0;
;;;362        uint32_t u32SelTbl[4] = {0x0, 0x4, 0x8, 0xC};   /* CLKSEL offset on MODULE index, 0x0:CLKSEL0, 0x1:CLKSEL1, 0x2:CLKSEL2, 0x3:CLKSEL3 */
000002  4b19              LDR      r3,|L20.104|
000004  b088              SUB      sp,sp,#0x20           ;360
000006  cbf0              LDM      r3!,{r4-r7}
000008  9400              STR      r4,[sp,#0]
00000a  ac01              ADD      r4,sp,#4
00000c  c4e0              STM      r4!,{r5-r7}
00000e  cb78              LDM      r3,{r3-r6}
000010  af04              ADD      r7,sp,#0x10
000012  c778              STM      r7!,{r3-r6}
;;;363        uint32_t u32DivTbl[4] = {0x0, 0x0, 0x0, 0x10};  /* CLKDIV offset on MODULE index, 0x0:CLKDIV0, 0x1:CLKDIV1, 0x2:CLKDIV3, 0x3:CLKDIV4 */
;;;364    
;;;365        if(MODULE_CLKDIV_Msk(u32ModuleIdx) != MODULE_NoMsk)
000014  0a84              LSRS     r4,r0,#10
000016  0623              LSLS     r3,r4,#24
000018  0e1b              LSRS     r3,r3,#24
00001a  d00e              BEQ      |L20.58|
;;;366        {
;;;367            /* Get clock divider control register address */
;;;368            u32div = (uint32_t)&CLK->CLKDIV0 + (u32DivTbl[MODULE_CLKDIV(u32ModuleIdx)]);
00001c  0303              LSLS     r3,r0,#12
00001e  0f9b              LSRS     r3,r3,#30
000020  009b              LSLS     r3,r3,#2
000022  ad04              ADD      r5,sp,#0x10
000024  58eb              LDR      r3,[r5,r3]
000026  4d11              LDR      r5,|L20.108|
000028  195b              ADDS     r3,r3,r5
;;;369            /* Apply new divider */
;;;370            M32(u32div) = (M32(u32div) & (~(MODULE_CLKDIV_Msk(u32ModuleIdx) << MODULE_CLKDIV_Pos(u32ModuleIdx)))) | u32ClkDiv;
00002a  b2e5              UXTB     r5,r4
00002c  0584              LSLS     r4,r0,#22
00002e  0ee4              LSRS     r4,r4,#27
000030  40a5              LSLS     r5,r5,r4
000032  681c              LDR      r4,[r3,#0]
000034  43ac              BICS     r4,r4,r5
000036  4314              ORRS     r4,r4,r2
000038  601c              STR      r4,[r3,#0]
                  |L20.58|
;;;371        }
;;;372    
;;;373        if(MODULE_CLKSEL_Msk(u32ModuleIdx) != MODULE_NoMsk)
00003a  0e42              LSRS     r2,r0,#25
00003c  0752              LSLS     r2,r2,#29
00003e  d010              BEQ      |L20.98|
;;;374        {
;;;375            /* Get clock select control register address */
;;;376            u32sel = (uint32_t)&CLK->CLKSEL0 + (u32SelTbl[MODULE_CLKSEL(u32ModuleIdx)]);
000040  0082              LSLS     r2,r0,#2
000042  0f92              LSRS     r2,r2,#30
000044  0092              LSLS     r2,r2,#2
000046  466b              MOV      r3,sp
000048  589a              LDR      r2,[r3,r2]
00004a  4b08              LDR      r3,|L20.108|
00004c  3b10              SUBS     r3,r3,#0x10
00004e  18d2              ADDS     r2,r2,r3
;;;377            /* Set new clock selection setting */
;;;378            M32(u32sel) = (M32(u32sel) & (~(MODULE_CLKSEL_Msk(u32ModuleIdx) << MODULE_CLKSEL_Pos(u32ModuleIdx)))) | u32ClkSrc;
000050  0103              LSLS     r3,r0,#4
000052  0f5b              LSRS     r3,r3,#29
000054  01c0              LSLS     r0,r0,#7
000056  0ec0              LSRS     r0,r0,#27
000058  4083              LSLS     r3,r3,r0
00005a  6810              LDR      r0,[r2,#0]
00005c  4398              BICS     r0,r0,r3
00005e  4308              ORRS     r0,r0,r1
000060  6010              STR      r0,[r2,#0]
                  |L20.98|
;;;379        }
;;;380    }
000062  b008              ADD      sp,sp,#0x20
000064  bdf0              POP      {r4-r7,pc}
;;;381    
                          ENDP

000066  0000              DCW      0x0000
                  |L20.104|
                          DCD      ||.constdata||
                  |L20.108|
                          DCD      0x40000220

                          AREA ||i.CLK_SetSysTickClockSrc||, CODE, READONLY, ALIGN=2

                  CLK_SetSysTickClockSrc PROC
;;;393      */
;;;394    void CLK_SetSysTickClockSrc(uint32_t u32ClkSrc)
000000  4a03              LDR      r2,|L21.16|
;;;395    {
;;;396        CLK->CLKSEL0 = (CLK->CLKSEL0 & ~CLK_CLKSEL0_STCLKSEL_Msk) | u32ClkSrc;
000002  6911              LDR      r1,[r2,#0x10]
000004  2338              MOVS     r3,#0x38
000006  4399              BICS     r1,r1,r3
000008  4301              ORRS     r1,r1,r0
00000a  6111              STR      r1,[r2,#0x10]
;;;397    }
00000c  4770              BX       lr
;;;398    
                          ENDP

00000e  0000              DCW      0x0000
                  |L21.16|
                          DCD      0x40000200

                          AREA ||i.CLK_WaitClockReady||, CODE, READONLY, ALIGN=2

                  CLK_WaitClockReady PROC
;;;662      */
;;;663    uint32_t CLK_WaitClockReady(uint32_t u32ClkMask)
000000  b510              PUSH     {r4,lr}
;;;664    {
000002  4604              MOV      r4,r0
;;;665        int32_t i32TimeOutCnt = 2160000;
000004  4907              LDR      r1,|L22.36|
;;;666    
;;;667        while((CLK->STATUS & u32ClkMask) != u32ClkMask)
000006  4b08              LDR      r3,|L22.40|
000008  e005              B        |L22.22|
                  |L22.10|
;;;668        {
;;;669            if(i32TimeOutCnt-- <= 0)
00000a  460a              MOV      r2,r1
00000c  1e49              SUBS     r1,r1,#1
00000e  2a00              CMP      r2,#0
000010  dc01              BGT      |L22.22|
;;;670                return 0;
000012  2000              MOVS     r0,#0
;;;671        }
;;;672    
;;;673        return 1;
;;;674    }
000014  bd10              POP      {r4,pc}
                  |L22.22|
000016  691a              LDR      r2,[r3,#0x10]         ;667
000018  4620              MOV      r0,r4                 ;667
00001a  4390              BICS     r0,r0,r2              ;667
00001c  d1f5              BNE      |L22.10|
00001e  2001              MOVS     r0,#1                 ;673
000020  bd10              POP      {r4,pc}
;;;675    
                          ENDP

000022  0000              DCW      0x0000
                  |L22.36|
                          DCD      0x0020f580
                  |L22.40|
                          DCD      0x40000240

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x0000000c
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000010
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000008
                          DCD      0x00000000
                          DCD      0x00000004
                          DCD      0x00000008

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\clk.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_clk_c_9b5832dc____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_clk_c_9b5832dc____REVSH|
#line 402
|__asm___5_clk_c_9b5832dc____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
