; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usci_i2c.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usci_i2c.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\usci_i2c.crf ..\..\..\Library\StdDriver\src\usci_i2c.c]
                          THUMB

                          AREA ||i.UI2C_ClearIntFlag||, CODE, READONLY, ALIGN=1

                  UI2C_ClearIntFlag PROC
;;;405     */
;;;406    void UI2C_ClearIntFlag(UI2C_T *ui2c , uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;407    {
000002  d001              BEQ      |L1.8|
;;;408        /* Clear Time-out Interrupt Flag */
;;;409        if (u32Mask & UI2C_TO_INT_MASK)
;;;410        {
;;;411            ui2c->PROTSTS = UI2C_PROTSTS_TOIF_Msk;
000004  2220              MOVS     r2,#0x20
000006  6642              STR      r2,[r0,#0x64]
                  |L1.8|
;;;412        }
;;;413    
;;;414        /* Clear Start Condition Received Interrupt Flag */
;;;415        if (u32Mask & UI2C_STAR_INT_MASK)
000008  078a              LSLS     r2,r1,#30
00000a  d502              BPL      |L1.18|
;;;416        {
;;;417            ui2c->PROTSTS = UI2C_PROTSTS_STARIF_Msk;
00000c  22ff              MOVS     r2,#0xff
00000e  3201              ADDS     r2,#1
000010  6642              STR      r2,[r0,#0x64]
                  |L1.18|
;;;418        }
;;;419    
;;;420        /* Clear Stop Condition Received Interrupt Flag */
;;;421        if (u32Mask & UI2C_STOR_INT_MASK)
000012  074a              LSLS     r2,r1,#29
000014  d502              BPL      |L1.28|
;;;422        {
;;;423            ui2c->PROTSTS = UI2C_PROTSTS_STORIF_Msk;
000016  2201              MOVS     r2,#1
000018  0252              LSLS     r2,r2,#9
00001a  6642              STR      r2,[r0,#0x64]
                  |L1.28|
;;;424        }
;;;425    
;;;426        /* Clear Non-Acknowledge Interrupt Flag */
;;;427        if (u32Mask & UI2C_NACK_INT_MASK)
00001c  070a              LSLS     r2,r1,#28
00001e  d502              BPL      |L1.38|
;;;428        {
;;;429            ui2c->PROTSTS = UI2C_PROTSTS_NACKIF_Msk;
000020  2201              MOVS     r2,#1
000022  0292              LSLS     r2,r2,#10
000024  6642              STR      r2,[r0,#0x64]
                  |L1.38|
;;;430        }
;;;431    
;;;432        /* Clear Arbitration Lost Interrupt Flag */
;;;433        if (u32Mask & UI2C_ARBLO_INT_MASK)
000026  06ca              LSLS     r2,r1,#27
000028  d502              BPL      |L1.48|
;;;434        {
;;;435            ui2c->PROTSTS = UI2C_PROTSTS_ARBLOIF_Msk;
00002a  2201              MOVS     r2,#1
00002c  02d2              LSLS     r2,r2,#11
00002e  6642              STR      r2,[r0,#0x64]
                  |L1.48|
;;;436        }
;;;437    
;;;438        /* Clear Error Interrupt Flag */
;;;439        if (u32Mask & UI2C_ERR_INT_MASK)
000030  068a              LSLS     r2,r1,#26
000032  d502              BPL      |L1.58|
;;;440        {
;;;441            ui2c->PROTSTS = UI2C_PROTSTS_ERRIF_Msk;
000034  2201              MOVS     r2,#1
000036  0312              LSLS     r2,r2,#12
000038  6642              STR      r2,[r0,#0x64]
                  |L1.58|
;;;442        }
;;;443    
;;;444        /* Clear Acknowledge Interrupt Flag */
;;;445        if (u32Mask & UI2C_ACK_INT_MASK)
00003a  0649              LSLS     r1,r1,#25
00003c  d502              BPL      |L1.68|
;;;446        {
;;;447            ui2c->PROTSTS = UI2C_PROTSTS_ACKIF_Msk;
00003e  2101              MOVS     r1,#1
000040  0349              LSLS     r1,r1,#13
000042  6641              STR      r1,[r0,#0x64]
                  |L1.68|
;;;448        }
;;;449    }
000044  4770              BX       lr
;;;450    
                          ENDP


                          AREA ||i.UI2C_ClearTimeoutFlag||, CODE, READONLY, ALIGN=1

                  UI2C_ClearTimeoutFlag PROC
;;;85      */
;;;86     void UI2C_ClearTimeoutFlag(UI2C_T *ui2c)
000000  2120              MOVS     r1,#0x20
;;;87     {
;;;88         ui2c->PROTSTS = UI2C_PROTSTS_TOIF_Msk;
000002  6641              STR      r1,[r0,#0x64]
;;;89     }
000004  4770              BX       lr
;;;90     
                          ENDP


                          AREA ||i.UI2C_Close||, CODE, READONLY, ALIGN=1

                  UI2C_Close PROC
;;;70      */
;;;71     void UI2C_Close(UI2C_T *ui2c)
000000  6801              LDR      r1,[r0,#0]
;;;72     {
;;;73         /* Disable USCI_I2C function */
;;;74         ui2c->CTL &= ~UI2C_CTL_FUNMODE_Msk;
000002  08c9              LSRS     r1,r1,#3
000004  00c9              LSLS     r1,r1,#3
000006  6001              STR      r1,[r0,#0]
;;;75     }
000008  4770              BX       lr
;;;76     
                          ENDP


                          AREA ||i.UI2C_DisableInt||, CODE, READONLY, ALIGN=1

                  UI2C_DisableInt PROC
;;;150     */
;;;151    void UI2C_DisableInt(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;152    {
000002  d003              BEQ      |L4.12|
;;;153        /* Disable time-out interrupt flag */
;;;154        if ((u32Mask & UI2C_TO_INT_MASK) == UI2C_TO_INT_MASK)
;;;155        {
;;;156            ui2c->PROTIEN &= ~UI2C_PROTIEN_TOIEN_Msk;
000004  6e02              LDR      r2,[r0,#0x60]
000006  0852              LSRS     r2,r2,#1
000008  0052              LSLS     r2,r2,#1
00000a  6602              STR      r2,[r0,#0x60]
                  |L4.12|
;;;157        }
;;;158    
;;;159        /* Disable start condition received interrupt flag */
;;;160        if ((u32Mask & UI2C_STAR_INT_MASK) == UI2C_STAR_INT_MASK)
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L4.24|
;;;161        {
;;;162            ui2c->PROTIEN &= ~UI2C_PROTIEN_STARIEN_Msk;
000010  6e02              LDR      r2,[r0,#0x60]
000012  2302              MOVS     r3,#2
000014  439a              BICS     r2,r2,r3
000016  6602              STR      r2,[r0,#0x60]
                  |L4.24|
;;;163        }
;;;164    
;;;165        /* Disable stop condition received interrupt flag */
;;;166        if ((u32Mask & UI2C_STOR_INT_MASK) == UI2C_STOR_INT_MASK)
000018  074a              LSLS     r2,r1,#29
00001a  d503              BPL      |L4.36|
;;;167        {
;;;168            ui2c->PROTIEN &= ~UI2C_PROTIEN_STORIEN_Msk;
00001c  6e02              LDR      r2,[r0,#0x60]
00001e  2304              MOVS     r3,#4
000020  439a              BICS     r2,r2,r3
000022  6602              STR      r2,[r0,#0x60]
                  |L4.36|
;;;169        }
;;;170    
;;;171        /* Disable non-acknowledge interrupt flag */
;;;172        if ((u32Mask & UI2C_NACK_INT_MASK) == UI2C_NACK_INT_MASK)
000024  070a              LSLS     r2,r1,#28
000026  d503              BPL      |L4.48|
;;;173        {
;;;174            ui2c->PROTIEN &= ~UI2C_PROTIEN_NACKIEN_Msk;
000028  6e02              LDR      r2,[r0,#0x60]
00002a  2308              MOVS     r3,#8
00002c  439a              BICS     r2,r2,r3
00002e  6602              STR      r2,[r0,#0x60]
                  |L4.48|
;;;175        }
;;;176    
;;;177        /* Disable arbitration lost interrupt flag */
;;;178        if ((u32Mask & UI2C_ARBLO_INT_MASK) == UI2C_ARBLO_INT_MASK)
000030  06ca              LSLS     r2,r1,#27
000032  d503              BPL      |L4.60|
;;;179        {
;;;180            ui2c->PROTIEN &= ~UI2C_PROTIEN_ARBLOIEN_Msk;
000034  6e02              LDR      r2,[r0,#0x60]
000036  2310              MOVS     r3,#0x10
000038  439a              BICS     r2,r2,r3
00003a  6602              STR      r2,[r0,#0x60]
                  |L4.60|
;;;181        }
;;;182    
;;;183        /* Disable error interrupt flag */
;;;184        if ((u32Mask & UI2C_ERR_INT_MASK) == UI2C_ERR_INT_MASK)
00003c  068a              LSLS     r2,r1,#26
00003e  d503              BPL      |L4.72|
;;;185        {
;;;186            ui2c->PROTIEN &= ~UI2C_PROTIEN_ERRIEN_Msk;
000040  6e02              LDR      r2,[r0,#0x60]
000042  2320              MOVS     r3,#0x20
000044  439a              BICS     r2,r2,r3
000046  6602              STR      r2,[r0,#0x60]
                  |L4.72|
;;;187        }
;;;188    
;;;189        /* Disable acknowledge interrupt flag */
;;;190        if ((u32Mask & UI2C_ACK_INT_MASK) == UI2C_ACK_INT_MASK)
000048  0649              LSLS     r1,r1,#25
00004a  d503              BPL      |L4.84|
;;;191        {
;;;192            ui2c->PROTIEN &= ~UI2C_PROTIEN_ACKIEN_Msk;
00004c  6e01              LDR      r1,[r0,#0x60]
00004e  2240              MOVS     r2,#0x40
000050  4391              BICS     r1,r1,r2
000052  6601              STR      r1,[r0,#0x60]
                  |L4.84|
;;;193        }
;;;194    }
000054  4770              BX       lr
;;;195    
                          ENDP


                          AREA ||i.UI2C_DisableTimeout||, CODE, READONLY, ALIGN=2

                  UI2C_DisableTimeout PROC
;;;556     */
;;;557    void UI2C_DisableTimeout(UI2C_T *ui2c)
000000  6dc1              LDR      r1,[r0,#0x5c]
;;;558    {
;;;559        ui2c->PROTCTL &= ~UI2C_PROTCTL_TOCNT_Msk;
000002  4a04              LDR      r2,|L5.20|
000004  4011              ANDS     r1,r1,r2
000006  65c1              STR      r1,[r0,#0x5c]
;;;560        ui2c->BRGEN &= ~UI2C_BRGEN_TMCNTEN_Msk;
000008  6881              LDR      r1,[r0,#8]
00000a  2210              MOVS     r2,#0x10
00000c  4391              BICS     r1,r1,r2
00000e  6081              STR      r1,[r0,#8]
;;;561    }
000010  4770              BX       lr
;;;562    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_DisableWakeup||, CODE, READONLY, ALIGN=1

                  UI2C_DisableWakeup PROC
;;;588     */
;;;589    void UI2C_DisableWakeup(UI2C_T *ui2c)
000000  6d41              LDR      r1,[r0,#0x54]
;;;590    {
;;;591        ui2c->WKCTL &= ~UI2C_WKCTL_WKEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6541              STR      r1,[r0,#0x54]
;;;592    }
000008  4770              BX       lr
;;;593    
                          ENDP


                          AREA ||i.UI2C_EnableInt||, CODE, READONLY, ALIGN=1

                  UI2C_EnableInt PROC
;;;212     */
;;;213    void UI2C_EnableInt(UI2C_T *ui2c, uint32_t u32Mask)
000000  07ca              LSLS     r2,r1,#31
;;;214    {
000002  d003              BEQ      |L7.12|
;;;215        /* Enable time-out interrupt flag */
;;;216        if ((u32Mask & UI2C_TO_INT_MASK) == UI2C_TO_INT_MASK)
;;;217        {
;;;218            ui2c->PROTIEN |= UI2C_PROTIEN_TOIEN_Msk;
000004  6e02              LDR      r2,[r0,#0x60]
000006  2301              MOVS     r3,#1
000008  431a              ORRS     r2,r2,r3
00000a  6602              STR      r2,[r0,#0x60]
                  |L7.12|
;;;219        }
;;;220    
;;;221        /* Enable start condition received interrupt flag */
;;;222        if ((u32Mask & UI2C_STAR_INT_MASK) == UI2C_STAR_INT_MASK)
00000c  078a              LSLS     r2,r1,#30
00000e  d503              BPL      |L7.24|
;;;223        {
;;;224            ui2c->PROTIEN |= UI2C_PROTIEN_STARIEN_Msk;
000010  6e02              LDR      r2,[r0,#0x60]
000012  2302              MOVS     r3,#2
000014  431a              ORRS     r2,r2,r3
000016  6602              STR      r2,[r0,#0x60]
                  |L7.24|
;;;225        }
;;;226    
;;;227        /* Enable stop condition received interrupt flag */
;;;228        if ((u32Mask & UI2C_STOR_INT_MASK) == UI2C_STOR_INT_MASK)
000018  074a              LSLS     r2,r1,#29
00001a  d503              BPL      |L7.36|
;;;229        {
;;;230            ui2c->PROTIEN |= UI2C_PROTIEN_STORIEN_Msk;
00001c  6e02              LDR      r2,[r0,#0x60]
00001e  2304              MOVS     r3,#4
000020  431a              ORRS     r2,r2,r3
000022  6602              STR      r2,[r0,#0x60]
                  |L7.36|
;;;231        }
;;;232    
;;;233        /* Enable non-acknowledge interrupt flag */
;;;234        if ((u32Mask & UI2C_NACK_INT_MASK) == UI2C_NACK_INT_MASK)
000024  070a              LSLS     r2,r1,#28
000026  d503              BPL      |L7.48|
;;;235        {
;;;236            ui2c->PROTIEN |= UI2C_PROTIEN_NACKIEN_Msk;
000028  6e02              LDR      r2,[r0,#0x60]
00002a  2308              MOVS     r3,#8
00002c  431a              ORRS     r2,r2,r3
00002e  6602              STR      r2,[r0,#0x60]
                  |L7.48|
;;;237        }
;;;238    
;;;239        /* Enable arbitration lost interrupt flag */
;;;240        if ((u32Mask & UI2C_ARBLO_INT_MASK) == UI2C_ARBLO_INT_MASK)
000030  06ca              LSLS     r2,r1,#27
000032  d503              BPL      |L7.60|
;;;241        {
;;;242            ui2c->PROTIEN |= UI2C_PROTIEN_ARBLOIEN_Msk;
000034  6e02              LDR      r2,[r0,#0x60]
000036  2310              MOVS     r3,#0x10
000038  431a              ORRS     r2,r2,r3
00003a  6602              STR      r2,[r0,#0x60]
                  |L7.60|
;;;243        }
;;;244    
;;;245        /* Enable error interrupt flag */
;;;246        if ((u32Mask & UI2C_ERR_INT_MASK) == UI2C_ERR_INT_MASK)
00003c  068a              LSLS     r2,r1,#26
00003e  d503              BPL      |L7.72|
;;;247        {
;;;248            ui2c->PROTIEN |= UI2C_PROTIEN_ERRIEN_Msk;
000040  6e02              LDR      r2,[r0,#0x60]
000042  2320              MOVS     r3,#0x20
000044  431a              ORRS     r2,r2,r3
000046  6602              STR      r2,[r0,#0x60]
                  |L7.72|
;;;249        }
;;;250    
;;;251        /* Enable acknowledge interrupt flag */
;;;252        if ((u32Mask & UI2C_ACK_INT_MASK) == UI2C_ACK_INT_MASK)
000048  0649              LSLS     r1,r1,#25
00004a  d503              BPL      |L7.84|
;;;253        {
;;;254            ui2c->PROTIEN |= UI2C_PROTIEN_ACKIEN_Msk;
00004c  6e01              LDR      r1,[r0,#0x60]
00004e  2240              MOVS     r2,#0x40
000050  4311              ORRS     r1,r1,r2
000052  6601              STR      r1,[r0,#0x60]
                  |L7.84|
;;;255        }
;;;256    }
000054  4770              BX       lr
;;;257    
                          ENDP


                          AREA ||i.UI2C_EnableTimeout||, CODE, READONLY, ALIGN=2

                  UI2C_EnableTimeout PROC
;;;541     */
;;;542    void UI2C_EnableTimeout(UI2C_T *ui2c, uint32_t u32TimeoutCnt)
000000  6dc2              LDR      r2,[r0,#0x5c]
;;;543    {
;;;544        ui2c->PROTCTL = (ui2c->PROTCTL & ~UI2C_PROTCTL_TOCNT_Msk) | (u32TimeoutCnt << UI2C_PROTCTL_TOCNT_Pos);
000002  4b06              LDR      r3,|L8.28|
000004  0409              LSLS     r1,r1,#16
000006  401a              ANDS     r2,r2,r3
000008  430a              ORRS     r2,r2,r1
00000a  65c2              STR      r2,[r0,#0x5c]
;;;545        ui2c->BRGEN = (ui2c->BRGEN & ~UI2C_BRGEN_TMCNTSRC_Msk) | UI2C_BRGEN_TMCNTEN_Msk;
00000c  6881              LDR      r1,[r0,#8]
00000e  2220              MOVS     r2,#0x20
000010  4391              BICS     r1,r1,r2
000012  2210              MOVS     r2,#0x10
000014  4311              ORRS     r1,r1,r2
000016  6081              STR      r1,[r0,#8]
;;;546    }
000018  4770              BX       lr
;;;547    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_EnableWakeup||, CODE, READONLY, ALIGN=1

                  UI2C_EnableWakeup PROC
;;;574     */
;;;575    void UI2C_EnableWakeup(UI2C_T *ui2c, uint8_t u8WakeupMode)
000000  6d42              LDR      r2,[r0,#0x54]
;;;576    {
;;;577        ui2c->WKCTL = (ui2c->WKCTL & ~UI2C_WKCTL_WKADDREN_Msk) | (u8WakeupMode | UI2C_WKCTL_WKEN_Msk);
000002  2302              MOVS     r3,#2
000004  439a              BICS     r2,r2,r3
000006  430a              ORRS     r2,r2,r1
000008  2101              MOVS     r1,#1
00000a  430a              ORRS     r2,r2,r1
00000c  6542              STR      r2,[r0,#0x54]
;;;578    }
00000e  4770              BX       lr
;;;579    
                          ENDP


                          AREA ||i.UI2C_GetBusClockFreq||, CODE, READONLY, ALIGN=1

                  UI2C_GetBusClockFreq PROC
;;;266     */
;;;267    uint32_t UI2C_GetBusClockFreq(UI2C_T *ui2c)
000000  b510              PUSH     {r4,lr}
;;;268    {
000002  4604              MOV      r4,r0
;;;269        uint32_t u32Divider;
;;;270        uint32_t u32Pclk;
;;;271    
;;;272        u32Pclk = CLK_GetPCLK0Freq();
000004  f7fffffe          BL       CLK_GetPCLK0Freq
;;;273    
;;;274        u32Divider = (ui2c->BRGEN & UI2C_BRGEN_CLKDIV_Msk) >> UI2C_BRGEN_CLKDIV_Pos;
000008  68a1              LDR      r1,[r4,#8]
;;;275    
;;;276        return (u32Pclk / ((u32Divider + 1U) << 1U));
;;;277    }
00000a  0189              LSLS     r1,r1,#6
00000c  0d89              LSRS     r1,r1,#22
00000e  0049              LSLS     r1,r1,#1              ;276
000010  1c89              ADDS     r1,r1,#2              ;276
000012  f7fffffe          BL       __aeabi_uidivmod
000016  bd10              POP      {r4,pc}
;;;278    
                          ENDP


                          AREA ||i.UI2C_GetData||, CODE, READONLY, ALIGN=1

                  UI2C_GetData PROC
;;;459     */
;;;460    uint32_t UI2C_GetData(UI2C_T *ui2c)
000000  6b40              LDR      r0,[r0,#0x34]
;;;461    {
;;;462        return (ui2c->RXDAT);
;;;463    }
000002  4770              BX       lr
;;;464    
                          ENDP


                          AREA ||i.UI2C_GetIntFlag||, CODE, READONLY, ALIGN=1

                  UI2C_GetIntFlag PROC
;;;323     */
;;;324    uint32_t UI2C_GetIntFlag(UI2C_T *ui2c, uint32_t u32Mask)
000000  b530              PUSH     {r4,r5,lr}
;;;325    {
000002  4602              MOV      r2,r0
;;;326        uint32_t u32IntFlag = 0U;
;;;327        uint32_t u32TmpValue;
;;;328    
;;;329        u32TmpValue = ui2c->PROTSTS & UI2C_PROTSTS_TOIF_Msk;
000004  6e53              LDR      r3,[r2,#0x64]
000006  2000              MOVS     r0,#0                 ;326
000008  2420              MOVS     r4,#0x20
00000a  4023              ANDS     r3,r3,r4
;;;330    
;;;331        /* Check Time-out Interrupt Flag */
;;;332        if ((u32Mask & UI2C_TO_INT_MASK) && (u32TmpValue))
00000c  07cd              LSLS     r5,r1,#31
00000e  d002              BEQ      |L12.22|
000010  2b00              CMP      r3,#0
000012  d000              BEQ      |L12.22|
;;;333        {
;;;334            u32IntFlag |= UI2C_TO_INT_MASK;
000014  2001              MOVS     r0,#1
                  |L12.22|
;;;335        }
;;;336    
;;;337        u32TmpValue = ui2c->PROTSTS & UI2C_PROTSTS_STARIF_Msk;
000016  6e53              LDR      r3,[r2,#0x64]
000018  25ff              MOVS     r5,#0xff
00001a  3501              ADDS     r5,#1
00001c  402b              ANDS     r3,r3,r5
;;;338    
;;;339        /* Check Start Condition Received Interrupt Flag */
;;;340        if ((u32Mask & UI2C_STAR_INT_MASK) && (u32TmpValue))
00001e  078d              LSLS     r5,r1,#30
000020  d503              BPL      |L12.42|
000022  2b00              CMP      r3,#0
000024  d001              BEQ      |L12.42|
;;;341        {
;;;342            u32IntFlag |= UI2C_STAR_INT_MASK;
000026  2302              MOVS     r3,#2
000028  4318              ORRS     r0,r0,r3
                  |L12.42|
;;;343        }
;;;344    
;;;345        u32TmpValue = ui2c->PROTSTS & UI2C_PROTSTS_STORIF_Msk;
00002a  6e53              LDR      r3,[r2,#0x64]
00002c  2501              MOVS     r5,#1
00002e  026d              LSLS     r5,r5,#9
000030  402b              ANDS     r3,r3,r5
;;;346    
;;;347        /* Check Stop Condition Received Interrupt Flag */
;;;348        if ((u32Mask & UI2C_STOR_INT_MASK) && (u32TmpValue))
000032  074d              LSLS     r5,r1,#29
000034  d503              BPL      |L12.62|
000036  2b00              CMP      r3,#0
000038  d001              BEQ      |L12.62|
;;;349        {
;;;350            u32IntFlag |= UI2C_STOR_INT_MASK;
00003a  2304              MOVS     r3,#4
00003c  4318              ORRS     r0,r0,r3
                  |L12.62|
;;;351        }
;;;352    
;;;353        u32TmpValue = ui2c->PROTSTS & UI2C_PROTSTS_NACKIF_Msk;
00003e  6e53              LDR      r3,[r2,#0x64]
000040  2501              MOVS     r5,#1
000042  02ad              LSLS     r5,r5,#10
000044  402b              ANDS     r3,r3,r5
;;;354    
;;;355        /* Check Non-Acknowledge Interrupt Flag */
;;;356        if ((u32Mask & UI2C_NACK_INT_MASK) && (u32TmpValue))
000046  070d              LSLS     r5,r1,#28
000048  d503              BPL      |L12.82|
00004a  2b00              CMP      r3,#0
00004c  d001              BEQ      |L12.82|
;;;357        {
;;;358            u32IntFlag |= UI2C_NACK_INT_MASK;
00004e  2308              MOVS     r3,#8
000050  4318              ORRS     r0,r0,r3
                  |L12.82|
;;;359        }
;;;360    
;;;361        u32TmpValue = ui2c->PROTSTS & UI2C_PROTSTS_ARBLOIF_Msk;
000052  6e53              LDR      r3,[r2,#0x64]
000054  2501              MOVS     r5,#1
000056  02ed              LSLS     r5,r5,#11
000058  402b              ANDS     r3,r3,r5
;;;362    
;;;363        /* Check Arbitration Lost Interrupt Flag */
;;;364        if ((u32Mask & UI2C_ARBLO_INT_MASK) && (u32TmpValue))
00005a  06cd              LSLS     r5,r1,#27
00005c  d503              BPL      |L12.102|
00005e  2b00              CMP      r3,#0
000060  d001              BEQ      |L12.102|
;;;365        {
;;;366            u32IntFlag |= UI2C_ARBLO_INT_MASK;
000062  2310              MOVS     r3,#0x10
000064  4318              ORRS     r0,r0,r3
                  |L12.102|
;;;367        }
;;;368    
;;;369        u32TmpValue = ui2c->PROTSTS & UI2C_PROTSTS_ERRIF_Msk;
000066  6e53              LDR      r3,[r2,#0x64]
000068  2501              MOVS     r5,#1
00006a  032d              LSLS     r5,r5,#12
00006c  402b              ANDS     r3,r3,r5
;;;370    
;;;371        /* Check Error Interrupt Flag */
;;;372        if ((u32Mask & UI2C_ERR_INT_MASK) && (u32TmpValue))
00006e  068d              LSLS     r5,r1,#26
000070  d502              BPL      |L12.120|
000072  2b00              CMP      r3,#0
000074  d000              BEQ      |L12.120|
;;;373        {
;;;374            u32IntFlag |= UI2C_ERR_INT_MASK;
000076  4320              ORRS     r0,r0,r4
                  |L12.120|
;;;375        }
;;;376    
;;;377        u32TmpValue = ui2c->PROTSTS & UI2C_PROTSTS_ACKIF_Msk;
000078  6e52              LDR      r2,[r2,#0x64]
00007a  2301              MOVS     r3,#1
00007c  035b              LSLS     r3,r3,#13
00007e  401a              ANDS     r2,r2,r3
;;;378    
;;;379        /* Check Acknowledge Interrupt Flag */
;;;380        if ((u32Mask & UI2C_ACK_INT_MASK) && (u32TmpValue))
000080  0649              LSLS     r1,r1,#25
000082  d503              BPL      |L12.140|
000084  2a00              CMP      r2,#0
000086  d001              BEQ      |L12.140|
;;;381        {
;;;382            u32IntFlag |= UI2C_ACK_INT_MASK;
000088  2140              MOVS     r1,#0x40
00008a  4308              ORRS     r0,r0,r1
                  |L12.140|
;;;383        }
;;;384    
;;;385        return u32IntFlag;
;;;386    }
00008c  bd30              POP      {r4,r5,pc}
;;;387    
                          ENDP


                          AREA ||i.UI2C_Open||, CODE, READONLY, ALIGN=2

                  UI2C_Open PROC
;;;32      */
;;;33     uint32_t UI2C_Open(UI2C_T *ui2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;34     {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;35         uint32_t u32ClkDiv;
;;;36         uint32_t u32Pclk;
;;;37     
;;;38         u32Pclk = CLK_GetPCLK0Freq();
000006  f7fffffe          BL       CLK_GetPCLK0Freq
00000a  4605              MOV      r5,r0
;;;39     
;;;40         u32ClkDiv = (uint32_t)((((((u32Pclk / 2U) * 10U) / (u32BusClock)) + 5U) / 10U) - 1U); /* Compute proper divider for USCI_I2C clock */
00000c  0840              LSRS     r0,r0,#1
00000e  210a              MOVS     r1,#0xa
000010  4348              MULS     r0,r1,r0
000012  4631              MOV      r1,r6
000014  f7fffffe          BL       __aeabi_uidivmod
000018  210a              MOVS     r1,#0xa
00001a  1d40              ADDS     r0,r0,#5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;41     
;;;42         /* Enable USCI_I2C protocol */
;;;43         ui2c->CTL &= ~UI2C_CTL_FUNMODE_Msk;
000020  6821              LDR      r1,[r4,#0]
000022  08c9              LSRS     r1,r1,#3
000024  00c9              LSLS     r1,r1,#3
000026  6021              STR      r1,[r4,#0]
;;;44         ui2c->CTL = 4U << UI2C_CTL_FUNMODE_Pos;
000028  2104              MOVS     r1,#4
00002a  6021              STR      r1,[r4,#0]
;;;45     
;;;46         /* Data format configuration */
;;;47         /* 8 bit data length */
;;;48         ui2c->LINECTL &= ~UI2C_LINECTL_DWIDTH_Msk;
00002c  6ae1              LDR      r1,[r4,#0x2c]
00002e  220f              MOVS     r2,#0xf
000030  0212              LSLS     r2,r2,#8
000032  4391              BICS     r1,r1,r2
000034  62e1              STR      r1,[r4,#0x2c]
;;;49         ui2c->LINECTL |= 8U << UI2C_LINECTL_DWIDTH_Pos;
000036  6ae1              LDR      r1,[r4,#0x2c]
000038  2201              MOVS     r2,#1
00003a  02d2              LSLS     r2,r2,#11
00003c  4311              ORRS     r1,r1,r2
00003e  62e1              STR      r1,[r4,#0x2c]
;;;50     
;;;51         /* MSB data format */
;;;52         ui2c->LINECTL &= ~UI2C_LINECTL_LSB_Msk;
000040  6ae1              LDR      r1,[r4,#0x2c]
000042  0849              LSRS     r1,r1,#1
000044  0049              LSLS     r1,r1,#1
000046  62e1              STR      r1,[r4,#0x2c]
;;;53     
;;;54         /* Set USCI_I2C bus clock */
;;;55         ui2c->BRGEN &= ~UI2C_BRGEN_CLKDIV_Msk;
000048  68a1              LDR      r1,[r4,#8]
00004a  4a09              LDR      r2,|L13.112|
00004c  4011              ANDS     r1,r1,r2
00004e  60a1              STR      r1,[r4,#8]
;;;56         ui2c->BRGEN |= (u32ClkDiv << UI2C_BRGEN_CLKDIV_Pos);
000050  68a1              LDR      r1,[r4,#8]
000052  1e40              SUBS     r0,r0,#1
000054  0402              LSLS     r2,r0,#16
000056  4311              ORRS     r1,r1,r2
000058  60a1              STR      r1,[r4,#8]
;;;57         ui2c->PROTCTL |=  UI2C_PROTCTL_PROTEN_Msk;
00005a  6de1              LDR      r1,[r4,#0x5c]
00005c  2201              MOVS     r2,#1
00005e  07d2              LSLS     r2,r2,#31
000060  4311              ORRS     r1,r1,r2
000062  65e1              STR      r1,[r4,#0x5c]
;;;58     
;;;59         return (u32Pclk / ((u32ClkDiv + 1U) << 1U));
000064  0041              LSLS     r1,r0,#1
000066  4628              MOV      r0,r5
000068  1c89              ADDS     r1,r1,#2
00006a  f7fffffe          BL       __aeabi_uidivmod
;;;60     }
00006e  bd70              POP      {r4-r6,pc}
;;;61     
                          ENDP

                  |L13.112|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_ReadByte||, CODE, READONLY, ALIGN=1

                  UI2C_ReadByte PROC
;;;1079     */
;;;1080   uint8_t UI2C_ReadByte(UI2C_T *ui2c, uint8_t u8SlaveAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1081   {
;;;1082       uint8_t u8Xfering = 1U, u8Err = 0U, rdata = 0U, u8Ctrl = 0U;
000002  2400              MOVS     r4,#0
000004  2601              MOVS     r6,#1
;;;1083       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1084   
;;;1085       UI2C_START(ui2c);                                                       /* Send START */
000006  6dc7              LDR      r7,[r0,#0x5c]
000008  468c              MOV      r12,r1                ;1081
00000a  4625              MOV      r5,r4                 ;1082
00000c  4622              MOV      r2,r4                 ;1082
00000e  2312              MOVS     r3,#0x12              ;1083
000010  2120              MOVS     r1,#0x20
000012  438f              BICS     r7,r7,r1
000014  2108              MOVS     r1,#8
000016  430f              ORRS     r7,r7,r1
000018  65c7              STR      r7,[r0,#0x5c]
                  |L14.26|
;;;1086   
;;;1087       while (u8Xfering)
;;;1088       {
;;;1089           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
00001a  6e41              LDR      r1,[r0,#0x64]
00001c  0489              LSLS     r1,r1,#18
00001e  0e89              LSRS     r1,r1,#26
000020  d0fb              BEQ      |L14.26|
;;;1090   
;;;1091           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
000022  6e47              LDR      r7,[r0,#0x64]
000024  213f              MOVS     r1,#0x3f
000026  0209              LSLS     r1,r1,#8
000028  400f              ANDS     r7,r7,r1
00002a  3fff              SUBS     r7,r7,#0xff
00002c  1e7f              SUBS     r7,r7,#1
00002e  d01d              BEQ      |L14.108|
000030  3fff              SUBS     r7,r7,#0xff
000032  1e7f              SUBS     r7,r7,#1
000034  d02f              BEQ      |L14.150|
000036  3fff              SUBS     r7,r7,#0xff
000038  3fff              SUBS     r7,r7,#0xff
00003a  1ebf              SUBS     r7,r7,#2
00003c  d020              BEQ      |L14.128|
00003e  2107              MOVS     r1,#7
000040  0289              LSLS     r1,r1,#10
000042  428f              CMP      r7,r1
000044  d104              BNE      |L14.80|
;;;1092           {
;;;1093           case UI2C_PROTSTS_STARIF_Msk:
;;;1094               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1095               UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x01U);             /* Write SLA+R to Register UI2C_TXDAT */
;;;1096               eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1097               u8Ctrl = UI2C_CTL_PTRG;
;;;1098               break;
;;;1099   
;;;1100           case UI2C_PROTSTS_ACKIF_Msk:
;;;1101               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000046  2101              MOVS     r1,#1
000048  0349              LSLS     r1,r1,#13
00004a  6641              STR      r1,[r0,#0x64]
;;;1102               eEvent = MASTER_READ_DATA;
00004c  2310              MOVS     r3,#0x10
;;;1103               break;
00004e  e001              B        |L14.84|
                  |L14.80|
;;;1104   
;;;1105           case UI2C_PROTSTS_NACKIF_Msk:
;;;1106               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
;;;1107   
;;;1108               if (eEvent == MASTER_SEND_H_RD_ADDRESS)
;;;1109               {
;;;1110                   u8Err = 1U;
;;;1111               }
;;;1112               else
;;;1113               {
;;;1114                   rdata = (unsigned char) UI2C_GET_DATA(ui2c);            /* Receive Data */
;;;1115               }
;;;1116   
;;;1117               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;1118   
;;;1119               break;
;;;1120   
;;;1121           case UI2C_PROTSTS_STORIF_Msk:
;;;1122               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
;;;1123               u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;1124               u8Xfering = 0U;
;;;1125               break;
;;;1126   
;;;1127           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1128           default:                                                        /* Unknow status */
;;;1129               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000050  2224              MOVS     r2,#0x24
;;;1130               u8Err = 1U;
000052  2401              MOVS     r4,#1
                  |L14.84|
;;;1131               break;
;;;1132           }
;;;1133   
;;;1134           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000054  6dc7              LDR      r7,[r0,#0x5c]
000056  212e              MOVS     r1,#0x2e
000058  438f              BICS     r7,r7,r1
00005a  4317              ORRS     r7,r7,r2
00005c  65c7              STR      r7,[r0,#0x5c]
00005e  2e00              CMP      r6,#0                 ;1087
000060  d1db              BNE      |L14.26|
;;;1135       }
;;;1136   
;;;1137       if (u8Err)
000062  2c00              CMP      r4,#0
000064  d000              BEQ      |L14.104|
;;;1138           rdata = 0U;
000066  2500              MOVS     r5,#0
                  |L14.104|
;;;1139   
;;;1140       return rdata;                                                           /* Return read data */
000068  4628              MOV      r0,r5
;;;1141   }
00006a  bdf0              POP      {r4-r7,pc}
                  |L14.108|
00006c  21ff              MOVS     r1,#0xff              ;1094
00006e  3101              ADDS     r1,#1                 ;1094
000070  6641              STR      r1,[r0,#0x64]         ;1094
000072  4661              MOV      r1,r12                ;1095
000074  0049              LSLS     r1,r1,#1              ;1095
000076  1c49              ADDS     r1,r1,#1              ;1095
000078  6301              STR      r1,[r0,#0x30]         ;1095
00007a  230c              MOVS     r3,#0xc               ;1096
00007c  2220              MOVS     r2,#0x20              ;1097
00007e  e7e9              B        |L14.84|
                  |L14.128|
000080  2101              MOVS     r1,#1                 ;1106
000082  0289              LSLS     r1,r1,#10             ;1106
000084  6641              STR      r1,[r0,#0x64]         ;1106
000086  2b0c              CMP      r3,#0xc               ;1108
000088  d003              BEQ      |L14.146|
00008a  6b41              LDR      r1,[r0,#0x34]         ;1114
00008c  b2cd              UXTB     r5,r1                 ;1114
                  |L14.142|
00008e  2224              MOVS     r2,#0x24              ;1117
000090  e7e0              B        |L14.84|
                  |L14.146|
000092  2401              MOVS     r4,#1                 ;1110
000094  e7fb              B        |L14.142|
                  |L14.150|
000096  2101              MOVS     r1,#1                 ;1122
000098  0249              LSLS     r1,r1,#9              ;1122
00009a  6641              STR      r1,[r0,#0x64]         ;1122
00009c  2220              MOVS     r2,#0x20              ;1123
00009e  2600              MOVS     r6,#0                 ;1124
0000a0  e7d8              B        |L14.84|
;;;1142   
                          ENDP


                          AREA ||i.UI2C_ReadByteOneReg||, CODE, READONLY, ALIGN=1

                  UI2C_ReadByteOneReg PROC
;;;1240     */
;;;1241   uint8_t UI2C_ReadByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1242   {
000002  4696              MOV      lr,r2
;;;1243       uint8_t u8Xfering = 1U, u8Err = 0U, rdata = 0U, u8Ctrl = 0U;
000004  2201              MOVS     r2,#1
000006  4694              MOV      r12,r2
000008  2400              MOVS     r4,#0
;;;1244       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1245   
;;;1246       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc2              LDR      r2,[r0,#0x5c]
00000c  4625              MOV      r5,r4                 ;1243
00000e  2312              MOVS     r3,#0x12              ;1244
000010  2620              MOVS     r6,#0x20
000012  43b2              BICS     r2,r2,r6
000014  2608              MOVS     r6,#8
000016  4332              ORRS     r2,r2,r6
000018  65c2              STR      r2,[r0,#0x5c]
;;;1247   
;;;1248       while (u8Xfering)
;;;1249       {
;;;1250           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
;;;1251   
;;;1252           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
;;;1253           {
;;;1254           case UI2C_PROTSTS_STARIF_Msk:
;;;1255               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1256   
;;;1257               if (eEvent == MASTER_SEND_START)
;;;1258               {
;;;1259                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);         /* Write SLA+W to Register UI2C_TXDAT */
00001a  004e              LSLS     r6,r1,#1
                  |L15.28|
00001c  6e41              LDR      r1,[r0,#0x64]         ;1250
00001e  0489              LSLS     r1,r1,#18             ;1250
000020  0e89              LSRS     r1,r1,#26             ;1250
000022  d0fb              BEQ      |L15.28|
000024  6e41              LDR      r1,[r0,#0x64]         ;1252
000026  273f              MOVS     r7,#0x3f              ;1252
000028  023f              LSLS     r7,r7,#8              ;1252
00002a  4039              ANDS     r1,r1,r7              ;1252
00002c  39ff              SUBS     r1,r1,#0xff           ;1252
00002e  1e49              SUBS     r1,r1,#1              ;1252
000030  d023              BEQ      |L15.122|
000032  39ff              SUBS     r1,r1,#0xff           ;1252
000034  1e49              SUBS     r1,r1,#1              ;1252
000036  d043              BEQ      |L15.192|
000038  39ff              SUBS     r1,r1,#0xff           ;1252
00003a  39ff              SUBS     r1,r1,#0xff           ;1252
00003c  1e89              SUBS     r1,r1,#2              ;1252
00003e  d034              BEQ      |L15.170|
000040  2707              MOVS     r7,#7                 ;1252
000042  02bf              LSLS     r7,r7,#10             ;1252
000044  42b9              CMP      r1,r7                 ;1252
000046  d109              BNE      |L15.92|
;;;1260                   eEvent = MASTER_SEND_ADDRESS;
;;;1261               }
;;;1262               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1263               {
;;;1264                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x01U);        /* Write SLA+R to Register TXDAT */
;;;1265                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1266               }
;;;1267   
;;;1268               u8Ctrl = UI2C_CTL_PTRG;
;;;1269               break;
;;;1270   
;;;1271           case UI2C_PROTSTS_ACKIF_Msk:
;;;1272               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000048  2101              MOVS     r1,#1
00004a  0349              LSLS     r1,r1,#13
00004c  6641              STR      r1,[r0,#0x64]
;;;1273   
;;;1274               if (eEvent == MASTER_SEND_ADDRESS)
00004e  2b0a              CMP      r3,#0xa
000050  d023              BEQ      |L15.154|
;;;1275               {
;;;1276                   UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address of register */
;;;1277                   u8Ctrl = UI2C_CTL_PTRG;
;;;1278                   eEvent = MASTER_SEND_DATA;
;;;1279               }
;;;1280               else if (eEvent == MASTER_SEND_DATA)
000052  2b0e              CMP      r3,#0xe
000054  d026              BEQ      |L15.164|
;;;1281               {
;;;1282                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1283                   eEvent = MASTER_SEND_REPEAT_START;
;;;1284               }
;;;1285               else
;;;1286               {
;;;1287                   /* SLA+R ACK */
;;;1288                   u8Ctrl = UI2C_CTL_PTRG;
000056  2120              MOVS     r1,#0x20
;;;1289                   eEvent = MASTER_READ_DATA;
000058  2310              MOVS     r3,#0x10
00005a  e001              B        |L15.96|
                  |L15.92|
;;;1290               }
;;;1291   
;;;1292               break;
;;;1293   
;;;1294           case UI2C_PROTSTS_NACKIF_Msk:
;;;1295               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
;;;1296   
;;;1297               if (eEvent == MASTER_READ_DATA)
;;;1298               {
;;;1299                   rdata = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
;;;1300               }
;;;1301               else
;;;1302               {
;;;1303                   u8Err = 1U;
;;;1304               }
;;;1305   
;;;1306               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;1307   
;;;1308               break;
;;;1309   
;;;1310           case UI2C_PROTSTS_STORIF_Msk:
;;;1311               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
;;;1312               u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;1313               u8Xfering = 0U;
;;;1314               break;
;;;1315   
;;;1316           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1317           default:                                                        /* Unknow status */
;;;1318               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
00005c  2124              MOVS     r1,#0x24
;;;1319               u8Err = 1U;
00005e  2401              MOVS     r4,#1
                  |L15.96|
;;;1320               break;
;;;1321           }
;;;1322   
;;;1323           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000060  6dc7              LDR      r7,[r0,#0x5c]
000062  222e              MOVS     r2,#0x2e
000064  4397              BICS     r7,r7,r2
000066  430f              ORRS     r7,r7,r1
000068  65c7              STR      r7,[r0,#0x5c]
00006a  4661              MOV      r1,r12                ;1248
00006c  2900              CMP      r1,#0                 ;1248
00006e  d1d5              BNE      |L15.28|
;;;1324       }
;;;1325   
;;;1326       if (u8Err)
000070  2c00              CMP      r4,#0
000072  d000              BEQ      |L15.118|
;;;1327           rdata = 0U;                                                 /* If occurs error, return 0 */
000074  2500              MOVS     r5,#0
                  |L15.118|
;;;1328   
;;;1329       return rdata;                                                  /* Return read data */
000076  4628              MOV      r0,r5
;;;1330   }
000078  bdf0              POP      {r4-r7,pc}
                  |L15.122|
00007a  21ff              MOVS     r1,#0xff              ;1255
00007c  3101              ADDS     r1,#1                 ;1255
00007e  6641              STR      r1,[r0,#0x64]         ;1255
000080  2b12              CMP      r3,#0x12              ;1257
000082  d002              BEQ      |L15.138|
000084  2b0f              CMP      r3,#0xf               ;1262
000086  d003              BEQ      |L15.144|
000088  e005              B        |L15.150|
                  |L15.138|
00008a  6306              STR      r6,[r0,#0x30]         ;1259
00008c  230a              MOVS     r3,#0xa               ;1260
00008e  e002              B        |L15.150|
                  |L15.144|
000090  1c71              ADDS     r1,r6,#1              ;1264
000092  6301              STR      r1,[r0,#0x30]         ;1264
000094  230c              MOVS     r3,#0xc               ;1265
                  |L15.150|
000096  2120              MOVS     r1,#0x20              ;1268
000098  e7e2              B        |L15.96|
                  |L15.154|
00009a  4671              MOV      r1,lr                 ;1276
00009c  6301              STR      r1,[r0,#0x30]         ;1276
00009e  2120              MOVS     r1,#0x20              ;1277
0000a0  230e              MOVS     r3,#0xe               ;1278
0000a2  e7dd              B        |L15.96|
                  |L15.164|
0000a4  2128              MOVS     r1,#0x28              ;1282
0000a6  230f              MOVS     r3,#0xf               ;1283
0000a8  e7da              B        |L15.96|
                  |L15.170|
0000aa  2101              MOVS     r1,#1                 ;1295
0000ac  0289              LSLS     r1,r1,#10             ;1295
0000ae  6641              STR      r1,[r0,#0x64]         ;1295
0000b0  2b10              CMP      r3,#0x10              ;1297
0000b2  d002              BEQ      |L15.186|
0000b4  2401              MOVS     r4,#1                 ;1303
                  |L15.182|
0000b6  2124              MOVS     r1,#0x24              ;1306
0000b8  e7d2              B        |L15.96|
                  |L15.186|
0000ba  6b41              LDR      r1,[r0,#0x34]         ;1299
0000bc  b2cd              UXTB     r5,r1                 ;1299
0000be  e7fa              B        |L15.182|
                  |L15.192|
0000c0  2101              MOVS     r1,#1                 ;1311
0000c2  0249              LSLS     r1,r1,#9              ;1311
0000c4  6641              STR      r1,[r0,#0x64]         ;1311
0000c6  2120              MOVS     r1,#0x20              ;1312
0000c8  2200              MOVS     r2,#0                 ;1313
0000ca  4694              MOV      r12,r2                ;1313
0000cc  e7c8              B        |L15.96|
;;;1331   
                          ENDP


                          AREA ||i.UI2C_ReadByteTwoRegs||, CODE, READONLY, ALIGN=1

                  UI2C_ReadByteTwoRegs PROC
;;;1450     */
;;;1451   uint8_t UI2C_ReadByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;1452   {
;;;1453       uint8_t u8Xfering = 1U, u8Err = 0U, rdata = 0U, u8Addr = 1U, u8Ctrl = 0U;
000002  2201              MOVS     r2,#1
000004  2400              MOVS     r4,#0
000006  4696              MOV      lr,r2
000008  4694              MOV      r12,r2
;;;1454       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1455   
;;;1456       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc6              LDR      r6,[r0,#0x5c]
00000c  4625              MOV      r5,r4                 ;1453
00000e  4623              MOV      r3,r4                 ;1453
000010  2212              MOVS     r2,#0x12              ;1454
000012  2720              MOVS     r7,#0x20
000014  43be              BICS     r6,r6,r7
000016  2708              MOVS     r7,#8
000018  433e              ORRS     r6,r6,r7
00001a  65c6              STR      r6,[r0,#0x5c]
;;;1457   
;;;1458       while (u8Xfering)
;;;1459       {
;;;1460           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
;;;1461   
;;;1462           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
;;;1463           {
;;;1464           case UI2C_PROTSTS_STARIF_Msk:
;;;1465               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1466   
;;;1467               if (eEvent == MASTER_SEND_START)
;;;1468               {
;;;1469                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);        /* Write SLA+W to Register UI2C_TXDAT */
00001c  004e              LSLS     r6,r1,#1
                  |L16.30|
00001e  6e41              LDR      r1,[r0,#0x64]         ;1460
000020  0489              LSLS     r1,r1,#18             ;1460
000022  0e89              LSRS     r1,r1,#26             ;1460
000024  d0fb              BEQ      |L16.30|
000026  6e41              LDR      r1,[r0,#0x64]         ;1462
000028  273f              MOVS     r7,#0x3f              ;1462
00002a  023f              LSLS     r7,r7,#8              ;1462
00002c  4039              ANDS     r1,r1,r7              ;1462
00002e  39ff              SUBS     r1,r1,#0xff           ;1462
000030  1e49              SUBS     r1,r1,#1              ;1462
000032  d023              BEQ      |L16.124|
000034  39ff              SUBS     r1,r1,#0xff           ;1462
000036  1e49              SUBS     r1,r1,#1              ;1462
000038  d04b              BEQ      |L16.210|
00003a  39ff              SUBS     r1,r1,#0xff           ;1462
00003c  39ff              SUBS     r1,r1,#0xff           ;1462
00003e  1e89              SUBS     r1,r1,#2              ;1462
000040  d03c              BEQ      |L16.188|
000042  2707              MOVS     r7,#7                 ;1462
000044  02bf              LSLS     r7,r7,#10             ;1462
000046  42b9              CMP      r1,r7                 ;1462
000048  d109              BNE      |L16.94|
;;;1470                   eEvent = MASTER_SEND_ADDRESS;
;;;1471               }
;;;1472               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1473               {
;;;1474                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x01U);        /* Write SLA+R to Register TXDAT */
;;;1475                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1476               }
;;;1477   
;;;1478               u8Ctrl = UI2C_CTL_PTRG;
;;;1479               break;
;;;1480   
;;;1481           case UI2C_PROTSTS_ACKIF_Msk:
;;;1482               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
00004a  2101              MOVS     r1,#1
00004c  0349              LSLS     r1,r1,#13
00004e  6641              STR      r1,[r0,#0x64]
;;;1483   
;;;1484               if (eEvent == MASTER_SEND_ADDRESS)
000050  2a0a              CMP      r2,#0xa
000052  d023              BEQ      |L16.156|
;;;1485               {
;;;1486                   UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF00U) >> 8U);  /* Write Hi byte address of register */
;;;1487                   eEvent = MASTER_SEND_DATA;
;;;1488               }
;;;1489               else if (eEvent == MASTER_SEND_DATA)
000054  2a0e              CMP      r2,#0xe
000056  d025              BEQ      |L16.164|
;;;1490               {
;;;1491                   if (u8Addr)
;;;1492                   {
;;;1493                       UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFFU));       /* Write Lo byte address of register */
;;;1494                       u8Addr = 0;
;;;1495                   }
;;;1496                   else
;;;1497                   {
;;;1498                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1499                       eEvent = MASTER_SEND_REPEAT_START;
;;;1500                   }
;;;1501               }
;;;1502               else
;;;1503               {
;;;1504                   /* SLA+R ACK */
;;;1505                   u8Ctrl = UI2C_CTL_PTRG;
000058  2320              MOVS     r3,#0x20
;;;1506                   eEvent = MASTER_READ_DATA;
00005a  2210              MOVS     r2,#0x10
00005c  e001              B        |L16.98|
                  |L16.94|
;;;1507               }
;;;1508   
;;;1509               break;
;;;1510   
;;;1511           case UI2C_PROTSTS_NACKIF_Msk:
;;;1512               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
;;;1513   
;;;1514               if (eEvent == MASTER_READ_DATA)
;;;1515               {
;;;1516                   rdata = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
;;;1517               }
;;;1518               else
;;;1519               {
;;;1520                   u8Err = 1U;
;;;1521               }
;;;1522   
;;;1523               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;1524   
;;;1525               break;
;;;1526   
;;;1527           case UI2C_PROTSTS_STORIF_Msk:
;;;1528               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
;;;1529               u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;1530               u8Xfering = 0U;
;;;1531               break;
;;;1532   
;;;1533           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1534           default:                                                        /* Unknow status */
;;;1535               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
00005e  2324              MOVS     r3,#0x24
;;;1536               u8Err = 1U;
000060  2401              MOVS     r4,#1
                  |L16.98|
;;;1537               break;
;;;1538           }
;;;1539   
;;;1540           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000062  6dc1              LDR      r1,[r0,#0x5c]
000064  272e              MOVS     r7,#0x2e
000066  43b9              BICS     r1,r1,r7
000068  4319              ORRS     r1,r1,r3
00006a  65c1              STR      r1,[r0,#0x5c]
00006c  4671              MOV      r1,lr                 ;1458
00006e  2900              CMP      r1,#0                 ;1458
000070  d1d5              BNE      |L16.30|
;;;1541       }
;;;1542   
;;;1543       if (u8Err)
000072  2c00              CMP      r4,#0
000074  d000              BEQ      |L16.120|
;;;1544           rdata = 0U;                                                 /* If occurs error, return 0 */
000076  2500              MOVS     r5,#0
                  |L16.120|
;;;1545   
;;;1546       return rdata;                                                  /* Return read data */
000078  4628              MOV      r0,r5
;;;1547   }
00007a  bdfe              POP      {r1-r7,pc}
                  |L16.124|
00007c  21ff              MOVS     r1,#0xff              ;1465
00007e  3101              ADDS     r1,#1                 ;1465
000080  6641              STR      r1,[r0,#0x64]         ;1465
000082  2a12              CMP      r2,#0x12              ;1467
000084  d002              BEQ      |L16.140|
000086  2a0f              CMP      r2,#0xf               ;1472
000088  d003              BEQ      |L16.146|
00008a  e005              B        |L16.152|
                  |L16.140|
00008c  6306              STR      r6,[r0,#0x30]         ;1469
00008e  220a              MOVS     r2,#0xa               ;1470
000090  e002              B        |L16.152|
                  |L16.146|
000092  1c71              ADDS     r1,r6,#1              ;1474
000094  6301              STR      r1,[r0,#0x30]         ;1474
000096  220c              MOVS     r2,#0xc               ;1475
                  |L16.152|
000098  2320              MOVS     r3,#0x20              ;1478
00009a  e7e2              B        |L16.98|
                  |L16.156|
00009c  2100              MOVS     r1,#0                 ;1486
00009e  6301              STR      r1,[r0,#0x30]         ;1486
0000a0  220e              MOVS     r2,#0xe               ;1487
0000a2  e7de              B        |L16.98|
                  |L16.164|
0000a4  4661              MOV      r1,r12                ;1491
0000a6  2900              CMP      r1,#0                 ;1491
0000a8  d005              BEQ      |L16.182|
0000aa  9902              LDR      r1,[sp,#8]            ;1493
0000ac  b2c9              UXTB     r1,r1                 ;1493
0000ae  6301              STR      r1,[r0,#0x30]         ;1493
0000b0  2100              MOVS     r1,#0                 ;1494
0000b2  468c              MOV      r12,r1                ;1494
0000b4  e7d5              B        |L16.98|
                  |L16.182|
0000b6  2328              MOVS     r3,#0x28              ;1498
0000b8  220f              MOVS     r2,#0xf               ;1499
0000ba  e7d2              B        |L16.98|
                  |L16.188|
0000bc  2101              MOVS     r1,#1                 ;1512
0000be  0289              LSLS     r1,r1,#10             ;1512
0000c0  6641              STR      r1,[r0,#0x64]         ;1512
0000c2  2a10              CMP      r2,#0x10              ;1514
0000c4  d002              BEQ      |L16.204|
0000c6  2401              MOVS     r4,#1                 ;1520
                  |L16.200|
0000c8  2324              MOVS     r3,#0x24              ;1523
0000ca  e7ca              B        |L16.98|
                  |L16.204|
0000cc  6b41              LDR      r1,[r0,#0x34]         ;1516
0000ce  b2cd              UXTB     r5,r1                 ;1516
0000d0  e7fa              B        |L16.200|
                  |L16.210|
0000d2  2101              MOVS     r1,#1                 ;1528
0000d4  0249              LSLS     r1,r1,#9              ;1528
0000d6  6641              STR      r1,[r0,#0x64]         ;1528
0000d8  2320              MOVS     r3,#0x20              ;1529
0000da  2100              MOVS     r1,#0                 ;1530
0000dc  468e              MOV      lr,r1                 ;1530
0000de  e7c0              B        |L16.98|
;;;1548   
                          ENDP


                          AREA ||i.UI2C_ReadMultiBytes||, CODE, READONLY, ALIGN=1

                  UI2C_ReadMultiBytes PROC
;;;1157     */
;;;1158   uint32_t UI2C_ReadMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t *rdata, uint32_t u32rLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1159   {
000002  468c              MOV      r12,r1
;;;1160       uint8_t u8Xfering = 1U, u8Ctrl = 0U;
000004  2701              MOVS     r7,#1
;;;1161       uint32_t u32rxLen = 0U;
000006  2400              MOVS     r4,#0
;;;1162       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1163   
;;;1164       UI2C_START(ui2c);                                                       /* Send START */
000008  6dc1              LDR      r1,[r0,#0x5c]
00000a  469e              MOV      lr,r3                 ;1159
00000c  2612              MOVS     r6,#0x12              ;1162
00000e  2520              MOVS     r5,#0x20
000010  43a9              BICS     r1,r1,r5
000012  2508              MOVS     r5,#8
000014  4329              ORRS     r1,r1,r5
000016  65c1              STR      r1,[r0,#0x5c]
                  |L17.24|
;;;1165   
;;;1166       while (u8Xfering)
;;;1167       {
;;;1168           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
000018  6e41              LDR      r1,[r0,#0x64]
00001a  0489              LSLS     r1,r1,#18
00001c  0e89              LSRS     r1,r1,#26
00001e  d0fb              BEQ      |L17.24|
;;;1169   
;;;1170           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
000020  6e41              LDR      r1,[r0,#0x64]
000022  253f              MOVS     r5,#0x3f
000024  022d              LSLS     r5,r5,#8
000026  4029              ANDS     r1,r1,r5
000028  39ff              SUBS     r1,r1,#0xff
00002a  1e49              SUBS     r1,r1,#1
00002c  d018              BEQ      |L17.96|
00002e  39ff              SUBS     r1,r1,#0xff
000030  1e49              SUBS     r1,r1,#1
000032  d02c              BEQ      |L17.142|
000034  39ff              SUBS     r1,r1,#0xff
000036  39ff              SUBS     r1,r1,#0xff
000038  1e89              SUBS     r1,r1,#2
00003a  d01e              BEQ      |L17.122|
00003c  2507              MOVS     r5,#7
00003e  02ad              LSLS     r5,r5,#10
000040  42a9              CMP      r1,r5
000042  d122              BNE      |L17.138|
;;;1171           {
;;;1172           case UI2C_PROTSTS_STARIF_Msk:
;;;1173               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1174               UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x01U);             /* Write SLA+R to Register UI2C_TXDAT */
;;;1175               eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1176               u8Ctrl = UI2C_CTL_PTRG;
;;;1177               break;
;;;1178   
;;;1179           case UI2C_PROTSTS_ACKIF_Msk:
;;;1180               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000044  2101              MOVS     r1,#1
000046  0349              LSLS     r1,r1,#13
000048  6641              STR      r1,[r0,#0x64]
;;;1181   
;;;1182               if (eEvent == MASTER_SEND_H_RD_ADDRESS)
00004a  2e0c              CMP      r6,#0xc
00004c  d012              BEQ      |L17.116|
;;;1183               {
;;;1184                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1185                   eEvent = MASTER_READ_DATA;
;;;1186               }
;;;1187               else
;;;1188               {
;;;1189                   rdata[u32rxLen++] = (unsigned char) UI2C_GET_DATA(ui2c);    /* Receive Data */
00004e  6b41              LDR      r1,[r0,#0x34]
000050  5511              STRB     r1,[r2,r4]
;;;1190   
;;;1191                   if (u32rxLen < (u32rLen - 1U))
000052  4671              MOV      r1,lr
000054  1e49              SUBS     r1,r1,#1
000056  1c64              ADDS     r4,r4,#1
000058  428c              CMP      r4,r1
00005a  d209              BCS      |L17.112|
;;;1192                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
00005c  2522              MOVS     r5,#0x22
00005e  e01b              B        |L17.152|
                  |L17.96|
000060  21ff              MOVS     r1,#0xff              ;1173
000062  3101              ADDS     r1,#1                 ;1173
000064  6641              STR      r1,[r0,#0x64]         ;1173
000066  4661              MOV      r1,r12                ;1174
000068  0049              LSLS     r1,r1,#1              ;1174
00006a  1c49              ADDS     r1,r1,#1              ;1174
00006c  6301              STR      r1,[r0,#0x30]         ;1174
00006e  260c              MOVS     r6,#0xc               ;1175
                  |L17.112|
;;;1193                   else
;;;1194                       u8Ctrl = UI2C_CTL_PTRG;
000070  2520              MOVS     r5,#0x20
000072  e011              B        |L17.152|
                  |L17.116|
000074  2522              MOVS     r5,#0x22              ;1184
000076  2610              MOVS     r6,#0x10              ;1185
000078  e00e              B        |L17.152|
                  |L17.122|
;;;1195               }
;;;1196   
;;;1197               break;
;;;1198   
;;;1199           case UI2C_PROTSTS_NACKIF_Msk:
;;;1200               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00007a  2101              MOVS     r1,#1
00007c  0289              LSLS     r1,r1,#10
00007e  6641              STR      r1,[r0,#0x64]
;;;1201   
;;;1202               if (eEvent == MASTER_READ_DATA)
000080  2e10              CMP      r6,#0x10
000082  d102              BNE      |L17.138|
;;;1203                   rdata[u32rxLen++] = (unsigned char) UI2C_GET_DATA(ui2c);    /* Receive Data */
000084  6b41              LDR      r1,[r0,#0x34]
000086  5511              STRB     r1,[r2,r4]
000088  1c64              ADDS     r4,r4,#1
                  |L17.138|
;;;1204   
;;;1205               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
00008a  2524              MOVS     r5,#0x24
;;;1206   
;;;1207               break;
00008c  e004              B        |L17.152|
                  |L17.142|
;;;1208   
;;;1209           case UI2C_PROTSTS_STORIF_Msk:
;;;1210               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
00008e  2101              MOVS     r1,#1
000090  0249              LSLS     r1,r1,#9
000092  6641              STR      r1,[r0,#0x64]
;;;1211               u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
000094  2520              MOVS     r5,#0x20
;;;1212               u8Xfering = 0U;
000096  2700              MOVS     r7,#0
                  |L17.152|
;;;1213               break;
;;;1214   
;;;1215           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1216           default:                                                        /* Unknow status */
;;;1217               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1218               break;
;;;1219           }
;;;1220   
;;;1221           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000098  6dc1              LDR      r1,[r0,#0x5c]
00009a  232e              MOVS     r3,#0x2e
00009c  4399              BICS     r1,r1,r3
00009e  4329              ORRS     r1,r1,r5
0000a0  65c1              STR      r1,[r0,#0x5c]
0000a2  2f00              CMP      r7,#0                 ;1166
0000a4  d1b8              BNE      |L17.24|
;;;1222       }
;;;1223   
;;;1224       return u32rxLen;                                                        /* Return bytes length that have been received */
0000a6  4620              MOV      r0,r4
;;;1225   }
0000a8  bdf0              POP      {r4-r7,pc}
;;;1226   
                          ENDP


                          AREA ||i.UI2C_ReadMultiBytesOneReg||, CODE, READONLY, ALIGN=1

                  UI2C_ReadMultiBytesOneReg PROC
;;;1346     */
;;;1347   uint32_t UI2C_ReadMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, uint8_t *rdata, uint32_t u32rLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1348   {
000002  4696              MOV      lr,r2
;;;1349       uint8_t u8Xfering = 1U, u8Ctrl = 0U;
000004  2601              MOVS     r6,#1
;;;1350       uint32_t u32rxLen = 0U;
000006  2500              MOVS     r5,#0
;;;1351       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1352   
;;;1353       UI2C_START(ui2c);                                                       /* Send START */
000008  6dc2              LDR      r2,[r0,#0x5c]
00000a  469c              MOV      r12,r3                ;1348
00000c  2412              MOVS     r4,#0x12              ;1351
00000e  2320              MOVS     r3,#0x20
000010  439a              BICS     r2,r2,r3
000012  2308              MOVS     r3,#8
000014  431a              ORRS     r2,r2,r3
000016  65c2              STR      r2,[r0,#0x5c]
;;;1354   
;;;1355       while (u8Xfering)
;;;1356       {
;;;1357           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
;;;1358   
;;;1359           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
;;;1360           {
;;;1361           case UI2C_PROTSTS_STARIF_Msk:
;;;1362               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1363   
;;;1364               if (eEvent == MASTER_SEND_START)
;;;1365               {
;;;1366                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);         /* Write SLA+W to Register UI2C_TXDAT */
000018  004f              LSLS     r7,r1,#1
                  |L18.26|
00001a  6e41              LDR      r1,[r0,#0x64]         ;1357
00001c  0489              LSLS     r1,r1,#18             ;1357
00001e  0e89              LSRS     r1,r1,#26             ;1357
000020  d0fb              BEQ      |L18.26|
000022  6e41              LDR      r1,[r0,#0x64]         ;1359
000024  233f              MOVS     r3,#0x3f              ;1359
000026  021b              LSLS     r3,r3,#8              ;1359
000028  4019              ANDS     r1,r1,r3              ;1359
00002a  39ff              SUBS     r1,r1,#0xff           ;1359
00002c  1e49              SUBS     r1,r1,#1              ;1359
00002e  d01d              BEQ      |L18.108|
000030  39ff              SUBS     r1,r1,#0xff           ;1359
000032  1e49              SUBS     r1,r1,#1              ;1359
000034  d040              BEQ      |L18.184|
000036  39ff              SUBS     r1,r1,#0xff           ;1359
000038  39ff              SUBS     r1,r1,#0xff           ;1359
00003a  1e89              SUBS     r1,r1,#2              ;1359
00003c  d031              BEQ      |L18.162|
00003e  2307              MOVS     r3,#7                 ;1359
000040  029b              LSLS     r3,r3,#10             ;1359
000042  4299              CMP      r1,r3                 ;1359
000044  d136              BNE      |L18.180|
;;;1367                   eEvent = MASTER_SEND_ADDRESS;
;;;1368               }
;;;1369               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1370               {
;;;1371                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x01U);        /* Write SLA+R to Register TXDAT */
;;;1372                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1373               }
;;;1374   
;;;1375               u8Ctrl = UI2C_CTL_PTRG;
;;;1376               break;
;;;1377   
;;;1378           case UI2C_PROTSTS_ACKIF_Msk:
;;;1379               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000046  2101              MOVS     r1,#1
000048  0349              LSLS     r1,r1,#13
00004a  6641              STR      r1,[r0,#0x64]
;;;1380   
;;;1381               if (eEvent == MASTER_SEND_ADDRESS)
00004c  2c0a              CMP      r4,#0xa
00004e  d01d              BEQ      |L18.140|
;;;1382               {
;;;1383                   UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address of register */
;;;1384                   u8Ctrl = UI2C_CTL_PTRG;
;;;1385                   eEvent = MASTER_SEND_DATA;
;;;1386               }
;;;1387               else if (eEvent == MASTER_SEND_DATA)
000050  2c0e              CMP      r4,#0xe
000052  d020              BEQ      |L18.150|
;;;1388               {
;;;1389                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1390                   eEvent = MASTER_SEND_REPEAT_START;
;;;1391               }
;;;1392               else if (eEvent == MASTER_SEND_H_RD_ADDRESS)
000054  2c0c              CMP      r4,#0xc
000056  d021              BEQ      |L18.156|
;;;1393               {
;;;1394                   /* SLA+R ACK */
;;;1395                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1396                   eEvent = MASTER_READ_DATA;
;;;1397               }
;;;1398               else
;;;1399               {
;;;1400                   rdata[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
000058  6b41              LDR      r1,[r0,#0x34]
00005a  4663              MOV      r3,r12
00005c  5559              STRB     r1,[r3,r5]
;;;1401   
;;;1402                   if (u32rxLen < u32rLen - 1U)
00005e  9905              LDR      r1,[sp,#0x14]
000060  1c6d              ADDS     r5,r5,#1
000062  1e49              SUBS     r1,r1,#1
000064  428d              CMP      r5,r1
000066  d20f              BCS      |L18.136|
;;;1403                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
000068  2122              MOVS     r1,#0x22
00006a  e02a              B        |L18.194|
                  |L18.108|
00006c  21ff              MOVS     r1,#0xff              ;1362
00006e  3101              ADDS     r1,#1                 ;1362
000070  6641              STR      r1,[r0,#0x64]         ;1362
000072  2c12              CMP      r4,#0x12              ;1364
000074  d002              BEQ      |L18.124|
000076  2c0f              CMP      r4,#0xf               ;1369
000078  d003              BEQ      |L18.130|
00007a  e005              B        |L18.136|
                  |L18.124|
00007c  6307              STR      r7,[r0,#0x30]         ;1366
00007e  240a              MOVS     r4,#0xa               ;1367
000080  e002              B        |L18.136|
                  |L18.130|
000082  1c79              ADDS     r1,r7,#1              ;1371
000084  6301              STR      r1,[r0,#0x30]         ;1371
000086  240c              MOVS     r4,#0xc               ;1372
                  |L18.136|
;;;1404                   else
;;;1405                       u8Ctrl = UI2C_CTL_PTRG;
000088  2120              MOVS     r1,#0x20
00008a  e01a              B        |L18.194|
                  |L18.140|
00008c  4671              MOV      r1,lr                 ;1383
00008e  6301              STR      r1,[r0,#0x30]         ;1383
000090  2120              MOVS     r1,#0x20              ;1384
000092  240e              MOVS     r4,#0xe               ;1385
000094  e015              B        |L18.194|
                  |L18.150|
000096  2128              MOVS     r1,#0x28              ;1389
000098  240f              MOVS     r4,#0xf               ;1390
00009a  e012              B        |L18.194|
                  |L18.156|
00009c  2122              MOVS     r1,#0x22              ;1395
00009e  2410              MOVS     r4,#0x10              ;1396
0000a0  e00f              B        |L18.194|
                  |L18.162|
;;;1406               }
;;;1407   
;;;1408               break;
;;;1409   
;;;1410           case UI2C_PROTSTS_NACKIF_Msk:
;;;1411               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000a2  2101              MOVS     r1,#1
0000a4  0289              LSLS     r1,r1,#10
0000a6  6641              STR      r1,[r0,#0x64]
;;;1412   
;;;1413               if (eEvent == MASTER_READ_DATA)
0000a8  2c10              CMP      r4,#0x10
0000aa  d103              BNE      |L18.180|
;;;1414                   rdata[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
0000ac  6b41              LDR      r1,[r0,#0x34]
0000ae  4663              MOV      r3,r12
0000b0  5559              STRB     r1,[r3,r5]
0000b2  1c6d              ADDS     r5,r5,#1
                  |L18.180|
;;;1415   
;;;1416               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
0000b4  2124              MOVS     r1,#0x24
;;;1417   
;;;1418               break;
0000b6  e004              B        |L18.194|
                  |L18.184|
;;;1419   
;;;1420           case UI2C_PROTSTS_STORIF_Msk:
;;;1421               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
0000b8  2101              MOVS     r1,#1
0000ba  0249              LSLS     r1,r1,#9
0000bc  6641              STR      r1,[r0,#0x64]
;;;1422               u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
0000be  2120              MOVS     r1,#0x20
;;;1423               u8Xfering = 0U;
0000c0  2600              MOVS     r6,#0
                  |L18.194|
;;;1424               break;
;;;1425   
;;;1426           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1427           default:                                                        /* Unknow status */
;;;1428               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1429               break;
;;;1430           }
;;;1431   
;;;1432           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000c2  6dc2              LDR      r2,[r0,#0x5c]
0000c4  232e              MOVS     r3,#0x2e
0000c6  439a              BICS     r2,r2,r3
0000c8  430a              ORRS     r2,r2,r1
0000ca  65c2              STR      r2,[r0,#0x5c]
0000cc  2e00              CMP      r6,#0                 ;1355
0000ce  d1a4              BNE      |L18.26|
;;;1433       }
;;;1434   
;;;1435       return u32rxLen;                                               /* Return bytes length that have been received */
0000d0  4628              MOV      r0,r5
;;;1436   }
0000d2  bdf0              POP      {r4-r7,pc}
;;;1437   
                          ENDP


                          AREA ||i.UI2C_ReadMultiBytesTwoRegs||, CODE, READONLY, ALIGN=1

                  UI2C_ReadMultiBytesTwoRegs PROC
;;;1563     */
;;;1564   uint32_t UI2C_ReadMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, uint8_t *rdata, uint32_t u32rLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;1565   {
000002  469e              MOV      lr,r3
000004  460b              MOV      r3,r1
;;;1566       uint8_t u8Xfering = 1U, u8Addr = 1U, u8Ctrl = 0U;
000006  2101              MOVS     r1,#1
000008  2400              MOVS     r4,#0
;;;1567       uint32_t u32rxLen = 0U;
;;;1568       enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1569   
;;;1570       UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  468c              MOV      r12,r1                ;1566
00000e  460e              MOV      r6,r1                 ;1566
000010  4625              MOV      r5,r4                 ;1567
000012  2212              MOVS     r2,#0x12              ;1568
000014  2120              MOVS     r1,#0x20
000016  438f              BICS     r7,r7,r1
000018  2108              MOVS     r1,#8
00001a  430f              ORRS     r7,r7,r1
00001c  65c7              STR      r7,[r0,#0x5c]
;;;1571   
;;;1572       while (u8Xfering)
;;;1573       {
;;;1574           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
;;;1575   
;;;1576           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
;;;1577           {
;;;1578           case UI2C_PROTSTS_STARIF_Msk:
;;;1579               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;1580   
;;;1581               if (eEvent == MASTER_SEND_START)
;;;1582               {
;;;1583                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);         /* Write SLA+W to Register UI2C_TXDAT */
00001e  0059              LSLS     r1,r3,#1
                  |L19.32|
000020  6e47              LDR      r7,[r0,#0x64]         ;1574
000022  04bf              LSLS     r7,r7,#18             ;1574
000024  0ebf              LSRS     r7,r7,#26             ;1574
000026  d0fb              BEQ      |L19.32|
000028  6e47              LDR      r7,[r0,#0x64]         ;1576
00002a  233f              MOVS     r3,#0x3f              ;1576
00002c  021b              LSLS     r3,r3,#8              ;1576
00002e  401f              ANDS     r7,r7,r3              ;1576
000030  3fff              SUBS     r7,r7,#0xff           ;1576
000032  1e7f              SUBS     r7,r7,#1              ;1576
000034  d01d              BEQ      |L19.114|
000036  3fff              SUBS     r7,r7,#0xff           ;1576
000038  1e7f              SUBS     r7,r7,#1              ;1576
00003a  d046              BEQ      |L19.202|
00003c  3fff              SUBS     r7,r7,#0xff           ;1576
00003e  3fff              SUBS     r7,r7,#0xff           ;1576
000040  1ebf              SUBS     r7,r7,#2              ;1576
000042  d037              BEQ      |L19.180|
000044  2307              MOVS     r3,#7                 ;1576
000046  029b              LSLS     r3,r3,#10             ;1576
000048  429f              CMP      r7,r3                 ;1576
00004a  d13c              BNE      |L19.198|
;;;1584                   eEvent = MASTER_SEND_ADDRESS;
;;;1585               }
;;;1586               else if (eEvent == MASTER_SEND_REPEAT_START)
;;;1587               {
;;;1588                   UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x01U);        /* Write SLA+R to Register TXDAT */
;;;1589                   eEvent = MASTER_SEND_H_RD_ADDRESS;
;;;1590               }
;;;1591   
;;;1592               u8Ctrl = UI2C_CTL_PTRG;
;;;1593               break;
;;;1594   
;;;1595           case UI2C_PROTSTS_ACKIF_Msk:
;;;1596               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
00004c  2701              MOVS     r7,#1
00004e  037f              LSLS     r7,r7,#13
000050  6647              STR      r7,[r0,#0x64]
;;;1597   
;;;1598               if (eEvent == MASTER_SEND_ADDRESS)
000052  2a0a              CMP      r2,#0xa
000054  d01d              BEQ      |L19.146|
;;;1599               {
;;;1600                   UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF00U) >> 8U);  /* Write Hi byte address of register */
;;;1601                   eEvent = MASTER_SEND_DATA;
;;;1602               }
;;;1603               else if (eEvent == MASTER_SEND_DATA)
000056  2a0e              CMP      r2,#0xe
000058  d01f              BEQ      |L19.154|
;;;1604               {
;;;1605                   if (u8Addr)
;;;1606                   {
;;;1607                       UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFFU));       /* Write Lo byte address of register */
;;;1608                       u8Addr = 0;
;;;1609                   }
;;;1610                   else
;;;1611                   {
;;;1612                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STA);                /* Send repeat START signal */
;;;1613                       eEvent = MASTER_SEND_REPEAT_START;
;;;1614                   }
;;;1615               }
;;;1616               else if (eEvent == MASTER_SEND_H_RD_ADDRESS)
00005a  2a0c              CMP      r2,#0xc
00005c  d027              BEQ      |L19.174|
;;;1617               {
;;;1618                   u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
;;;1619                   eEvent = MASTER_READ_DATA;
;;;1620               }
;;;1621               else
;;;1622               {
;;;1623                   rdata[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);      /* Receive Data */
00005e  6b44              LDR      r4,[r0,#0x34]
000060  4673              MOV      r3,lr
000062  555c              STRB     r4,[r3,r5]
;;;1624   
;;;1625                   if (u32rxLen < u32rLen - 1U)
000064  9c09              LDR      r4,[sp,#0x24]
000066  1c6d              ADDS     r5,r5,#1
000068  1e64              SUBS     r4,r4,#1
00006a  42a5              CMP      r5,r4
00006c  d20f              BCS      |L19.142|
;;;1626                       u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_AA);
00006e  2422              MOVS     r4,#0x22
000070  e031              B        |L19.214|
                  |L19.114|
000072  23ff              MOVS     r3,#0xff              ;1579
000074  3301              ADDS     r3,#1                 ;1579
000076  6643              STR      r3,[r0,#0x64]         ;1579
000078  2a12              CMP      r2,#0x12              ;1581
00007a  d002              BEQ      |L19.130|
00007c  2a0f              CMP      r2,#0xf               ;1586
00007e  d003              BEQ      |L19.136|
000080  e005              B        |L19.142|
                  |L19.130|
000082  6301              STR      r1,[r0,#0x30]         ;1583
000084  220a              MOVS     r2,#0xa               ;1584
000086  e002              B        |L19.142|
                  |L19.136|
000088  1c4a              ADDS     r2,r1,#1              ;1588
00008a  6302              STR      r2,[r0,#0x30]         ;1588
00008c  220c              MOVS     r2,#0xc               ;1589
                  |L19.142|
;;;1627                   else
;;;1628                       u8Ctrl = UI2C_CTL_PTRG;
00008e  2420              MOVS     r4,#0x20
000090  e021              B        |L19.214|
                  |L19.146|
000092  2200              MOVS     r2,#0                 ;1600
000094  6302              STR      r2,[r0,#0x30]         ;1600
000096  220e              MOVS     r2,#0xe               ;1601
000098  e01d              B        |L19.214|
                  |L19.154|
00009a  2e00              CMP      r6,#0                 ;1605
00009c  d004              BEQ      |L19.168|
00009e  9b02              LDR      r3,[sp,#8]            ;1607
0000a0  b2db              UXTB     r3,r3                 ;1607
0000a2  6303              STR      r3,[r0,#0x30]         ;1607
0000a4  2600              MOVS     r6,#0                 ;1608
0000a6  e016              B        |L19.214|
                  |L19.168|
0000a8  2428              MOVS     r4,#0x28              ;1612
0000aa  220f              MOVS     r2,#0xf               ;1613
0000ac  e013              B        |L19.214|
                  |L19.174|
0000ae  2422              MOVS     r4,#0x22              ;1618
0000b0  2210              MOVS     r2,#0x10              ;1619
0000b2  e010              B        |L19.214|
                  |L19.180|
;;;1629               }
;;;1630   
;;;1631               break;
;;;1632   
;;;1633           case UI2C_PROTSTS_NACKIF_Msk:
;;;1634               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
0000b4  2301              MOVS     r3,#1
0000b6  029b              LSLS     r3,r3,#10
0000b8  6643              STR      r3,[r0,#0x64]
;;;1635   
;;;1636               if (eEvent == MASTER_READ_DATA)
0000ba  2a10              CMP      r2,#0x10
0000bc  d103              BNE      |L19.198|
;;;1637                   rdata[u32rxLen++] = (uint8_t) UI2C_GET_DATA(ui2c);                  /* Receive Data */
0000be  6b44              LDR      r4,[r0,#0x34]
0000c0  4673              MOV      r3,lr
0000c2  555c              STRB     r4,[r3,r5]
0000c4  1c6d              ADDS     r5,r5,#1
                  |L19.198|
;;;1638   
;;;1639               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
0000c6  2424              MOVS     r4,#0x24
;;;1640   
;;;1641               break;
0000c8  e005              B        |L19.214|
                  |L19.202|
;;;1642   
;;;1643           case UI2C_PROTSTS_STORIF_Msk:
;;;1644               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
0000ca  2301              MOVS     r3,#1
0000cc  025b              LSLS     r3,r3,#9
0000ce  6643              STR      r3,[r0,#0x64]
;;;1645               u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
0000d0  2420              MOVS     r4,#0x20
;;;1646               u8Xfering = 0U;
0000d2  2300              MOVS     r3,#0
0000d4  469c              MOV      r12,r3
                  |L19.214|
;;;1647               break;
;;;1648   
;;;1649           case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;1650           default:                                                        /* Unknow status */
;;;1651               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;1652               break;
;;;1653           }
;;;1654   
;;;1655           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
0000d6  6dc7              LDR      r7,[r0,#0x5c]
0000d8  232e              MOVS     r3,#0x2e
0000da  439f              BICS     r7,r7,r3
0000dc  4327              ORRS     r7,r7,r4
0000de  65c7              STR      r7,[r0,#0x5c]
0000e0  4663              MOV      r3,r12                ;1572
0000e2  2b00              CMP      r3,#0                 ;1572
0000e4  d19c              BNE      |L19.32|
;;;1656       }
;;;1657   
;;;1658       return u32rxLen;                                                        /* Return bytes length that have been received */
0000e6  4628              MOV      r0,r5
;;;1659   }
0000e8  b004              ADD      sp,sp,#0x10
0000ea  bdf0              POP      {r4-r7,pc}
;;;1660   
                          ENDP


                          AREA ||i.UI2C_SetBusClockFreq||, CODE, READONLY, ALIGN=2

                  UI2C_SetBusClockFreq PROC
;;;288     */
;;;289    uint32_t UI2C_SetBusClockFreq(UI2C_T *ui2c, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;290    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;291        uint32_t u32ClkDiv;
;;;292        uint32_t u32Pclk;
;;;293    
;;;294        u32Pclk = CLK_GetPCLK0Freq();
000006  f7fffffe          BL       CLK_GetPCLK0Freq
00000a  4605              MOV      r5,r0
;;;295    
;;;296        u32ClkDiv = (uint32_t)((((((u32Pclk / 2U) * 10U) / (u32BusClock)) + 5U) / 10U) - 1U); /* Compute proper divider for USCI_I2C clock */
00000c  0840              LSRS     r0,r0,#1
00000e  210a              MOVS     r1,#0xa
000010  4348              MULS     r0,r1,r0
000012  4631              MOV      r1,r6
000014  f7fffffe          BL       __aeabi_uidivmod
000018  210a              MOVS     r1,#0xa
00001a  1d40              ADDS     r0,r0,#5
00001c  f7fffffe          BL       __aeabi_uidivmod
;;;297    
;;;298        /* Set USCI_I2C bus clock */
;;;299        ui2c->BRGEN &= ~UI2C_BRGEN_CLKDIV_Msk;
000020  68a1              LDR      r1,[r4,#8]
000022  4a07              LDR      r2,|L20.64|
000024  4011              ANDS     r1,r1,r2
000026  60a1              STR      r1,[r4,#8]
;;;300        ui2c->BRGEN |= (u32ClkDiv << UI2C_BRGEN_CLKDIV_Pos);
000028  68a1              LDR      r1,[r4,#8]
00002a  1e40              SUBS     r0,r0,#1
00002c  0402              LSLS     r2,r0,#16
00002e  4311              ORRS     r1,r1,r2
000030  60a1              STR      r1,[r4,#8]
;;;301    
;;;302        return (u32Pclk / ((u32ClkDiv + 1U) << 1U));
000032  0041              LSLS     r1,r0,#1
000034  4628              MOV      r0,r5
000036  1c89              ADDS     r1,r1,#2
000038  f7fffffe          BL       __aeabi_uidivmod
;;;303    }
00003c  bd70              POP      {r4-r6,pc}
;;;304    
                          ENDP

00003e  0000              DCW      0x0000
                  |L20.64|
                          DCD      0xfc00ffff

                          AREA ||i.UI2C_SetData||, CODE, READONLY, ALIGN=1

                  UI2C_SetData PROC
;;;474     */
;;;475    void UI2C_SetData(UI2C_T *ui2c, uint8_t u8Data)
000000  6301              STR      r1,[r0,#0x30]
;;;476    {
;;;477        ui2c->TXDAT = u8Data;
;;;478    }
000002  4770              BX       lr
;;;479    
                          ENDP


                          AREA ||i.UI2C_SetSlaveAddr||, CODE, READONLY, ALIGN=1

                  UI2C_SetSlaveAddr PROC
;;;493     */
;;;494    void UI2C_SetSlaveAddr(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddr, uint8_t u8GCMode)
000000  2900              CMP      r1,#0
;;;495    {
000002  d001              BEQ      |L22.8|
;;;496        if (u8SlaveNo)
;;;497        {
;;;498            ui2c->DEVADDR1  = u16SlaveAddr;
000004  6482              STR      r2,[r0,#0x48]
000006  e000              B        |L22.10|
                  |L22.8|
;;;499        }
;;;500        else
;;;501        {
;;;502            ui2c->DEVADDR0  = u16SlaveAddr;
000008  6442              STR      r2,[r0,#0x44]
                  |L22.10|
;;;503        }
;;;504    
;;;505        ui2c->PROTCTL  = (ui2c->PROTCTL & ~UI2C_PROTCTL_GCFUNC_Msk) | u8GCMode;
00000a  6dc1              LDR      r1,[r0,#0x5c]
00000c  0849              LSRS     r1,r1,#1
00000e  0049              LSLS     r1,r1,#1
000010  4319              ORRS     r1,r1,r3
000012  65c1              STR      r1,[r0,#0x5c]
;;;506    }
000014  4770              BX       lr
;;;507    
                          ENDP


                          AREA ||i.UI2C_SetSlaveAddrMask||, CODE, READONLY, ALIGN=1

                  UI2C_SetSlaveAddrMask PROC
;;;519     */
;;;520    void UI2C_SetSlaveAddrMask(UI2C_T *ui2c, uint8_t u8SlaveNo, uint16_t u16SlaveAddrMask)
000000  2900              CMP      r1,#0
;;;521    {
000002  d001              BEQ      |L23.8|
;;;522        if (u8SlaveNo)
;;;523        {
;;;524            ui2c->ADDRMSK1  = u16SlaveAddrMask;
000004  6502              STR      r2,[r0,#0x50]
;;;525        }
;;;526        else
;;;527        {
;;;528            ui2c->ADDRMSK0  = u16SlaveAddrMask;
;;;529        }
;;;530    }
000006  4770              BX       lr
                  |L23.8|
000008  64c2              STR      r2,[r0,#0x4c]         ;528
00000a  4770              BX       lr
;;;531    
                          ENDP


                          AREA ||i.UI2C_Trigger||, CODE, READONLY, ALIGN=1

                  UI2C_Trigger PROC
;;;103     */
;;;104    void UI2C_Trigger(UI2C_T *ui2c, uint8_t u8Start, uint8_t u8Stop, uint8_t u8Ptrg, uint8_t u8Ack)
000000  b5f0              PUSH     {r4-r7,lr}
;;;105    {
;;;106        uint32_t u32Reg = 0U;
;;;107        uint32_t u32Val = ui2c->PROTCTL & ~(UI2C_PROTCTL_STA_Msk | UI2C_PROTCTL_STO_Msk | UI2C_PROTCTL_AA_Msk);
000002  9e05              LDR      r6,[sp,#0x14]
000004  6dc5              LDR      r5,[r0,#0x5c]
000006  2400              MOVS     r4,#0                 ;106
000008  270e              MOVS     r7,#0xe
00000a  43bd              BICS     r5,r5,r7
;;;108    
;;;109        if (u8Start)
00000c  2900              CMP      r1,#0
00000e  d000              BEQ      |L24.18|
;;;110        {
;;;111            u32Reg |= UI2C_PROTCTL_STA_Msk;
000010  2408              MOVS     r4,#8
                  |L24.18|
;;;112        }
;;;113    
;;;114        if (u8Stop)
000012  2a00              CMP      r2,#0
000014  d001              BEQ      |L24.26|
;;;115        {
;;;116            u32Reg |= UI2C_PROTCTL_STO_Msk;
000016  2104              MOVS     r1,#4
000018  430c              ORRS     r4,r4,r1
                  |L24.26|
;;;117        }
;;;118    
;;;119        if (u8Ptrg)
00001a  2b00              CMP      r3,#0
00001c  d001              BEQ      |L24.34|
;;;120        {
;;;121            u32Reg |= UI2C_PROTCTL_PTRG_Msk;
00001e  2120              MOVS     r1,#0x20
000020  430c              ORRS     r4,r4,r1
                  |L24.34|
;;;122        }
;;;123    
;;;124        if (u8Ack)
000022  2e00              CMP      r6,#0
000024  d001              BEQ      |L24.42|
;;;125        {
;;;126            u32Reg |= UI2C_PROTCTL_AA_Msk;
000026  2102              MOVS     r1,#2
000028  430c              ORRS     r4,r4,r1
                  |L24.42|
;;;127        }
;;;128    
;;;129        ui2c->PROTCTL = u32Val | u32Reg;
00002a  4325              ORRS     r5,r5,r4
00002c  65c5              STR      r5,[r0,#0x5c]
;;;130    }
00002e  bdf0              POP      {r4-r7,pc}
;;;131    
                          ENDP


                          AREA ||i.UI2C_WriteByte||, CODE, READONLY, ALIGN=1

                  UI2C_WriteByte PROC
;;;607    
;;;608    uint8_t UI2C_WriteByte(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;609    {
;;;610        uint8_t u8Xfering = 1U, u8Err = 0U, u8Ctrl = 0U;
000002  2500              MOVS     r5,#0
000004  2601              MOVS     r6,#1
;;;611        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;612    
;;;613        UI2C_START(ui2c);                                                       /* Send START */
000006  6dc7              LDR      r7,[r0,#0x5c]
000008  4694              MOV      r12,r2                ;609
00000a  462b              MOV      r3,r5                 ;610
00000c  2412              MOVS     r4,#0x12              ;611
00000e  2220              MOVS     r2,#0x20
000010  4397              BICS     r7,r7,r2
000012  2208              MOVS     r2,#8
000014  4317              ORRS     r7,r7,r2
000016  65c7              STR      r7,[r0,#0x5c]
                  |L25.24|
;;;614    
;;;615        while (u8Xfering)
;;;616        {
;;;617            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
000018  6e42              LDR      r2,[r0,#0x64]
00001a  0492              LSLS     r2,r2,#18
00001c  0e92              LSRS     r2,r2,#26
00001e  d0fb              BEQ      |L25.24|
;;;618    
;;;619            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
000020  6e47              LDR      r7,[r0,#0x64]
000022  223f              MOVS     r2,#0x3f
000024  0212              LSLS     r2,r2,#8
000026  4017              ANDS     r7,r7,r2
000028  3fff              SUBS     r7,r7,#0xff
00002a  1e7f              SUBS     r7,r7,#1
00002c  d011              BEQ      |L25.82|
00002e  3fff              SUBS     r7,r7,#0xff
000030  1e7f              SUBS     r7,r7,#1
000032  d028              BEQ      |L25.134|
000034  3fff              SUBS     r7,r7,#0xff
000036  3fff              SUBS     r7,r7,#0xff
000038  1ebf              SUBS     r7,r7,#2
00003a  d016              BEQ      |L25.106|
00003c  2207              MOVS     r2,#7
00003e  0292              LSLS     r2,r2,#10
000040  4297              CMP      r7,r2
000042  d115              BNE      |L25.112|
;;;620            {
;;;621            case UI2C_PROTSTS_STARIF_Msk:
;;;622                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;623                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);             /* Write SLA+W to Register UI2C_TXDAT */
;;;624                eEvent = MASTER_SEND_ADDRESS;
;;;625                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;626                break;
;;;627    
;;;628            case UI2C_PROTSTS_ACKIF_Msk:
;;;629                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000044  2201              MOVS     r2,#1
000046  0352              LSLS     r2,r2,#13
000048  6642              STR      r2,[r0,#0x64]
;;;630    
;;;631                if (eEvent == MASTER_SEND_ADDRESS)
00004a  2c0a              CMP      r4,#0xa
00004c  d009              BEQ      |L25.98|
;;;632                {
;;;633                    UI2C_SET_DATA(ui2c, data);                              /* Write data to UI2C_TXDAT */
;;;634                    eEvent = MASTER_SEND_DATA;
;;;635                }
;;;636                else
;;;637                {
;;;638                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
00004e  2324              MOVS     r3,#0x24
000050  e010              B        |L25.116|
                  |L25.82|
000052  22ff              MOVS     r2,#0xff              ;622
000054  3201              ADDS     r2,#1                 ;622
000056  6642              STR      r2,[r0,#0x64]         ;622
000058  004a              LSLS     r2,r1,#1              ;623
00005a  6302              STR      r2,[r0,#0x30]         ;623
00005c  240a              MOVS     r4,#0xa               ;624
00005e  2320              MOVS     r3,#0x20              ;625
000060  e008              B        |L25.116|
                  |L25.98|
000062  4662              MOV      r2,r12                ;633
000064  6302              STR      r2,[r0,#0x30]         ;633
000066  240e              MOVS     r4,#0xe               ;634
000068  e004              B        |L25.116|
                  |L25.106|
;;;639                }
;;;640    
;;;641                break;
;;;642    
;;;643            case UI2C_PROTSTS_NACKIF_Msk:
;;;644                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00006a  2201              MOVS     r2,#1
00006c  0292              LSLS     r2,r2,#10
00006e  6642              STR      r2,[r0,#0x64]
                  |L25.112|
;;;645                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;646                u8Err = 1U;
;;;647                break;
;;;648    
;;;649            case UI2C_PROTSTS_STORIF_Msk:
;;;650                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
;;;651                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;652                u8Xfering = 0U;
;;;653                break;
;;;654    
;;;655            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;656            default:                                                        /* Unknow status */
;;;657                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
000070  2324              MOVS     r3,#0x24
;;;658                u8Err = 1U;
000072  2501              MOVS     r5,#1
                  |L25.116|
;;;659                break;
;;;660            }
;;;661    
;;;662            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_PROTCTL register */
000074  6dc7              LDR      r7,[r0,#0x5c]
000076  222e              MOVS     r2,#0x2e
000078  4397              BICS     r7,r7,r2
00007a  431f              ORRS     r7,r7,r3
00007c  65c7              STR      r7,[r0,#0x5c]
00007e  2e00              CMP      r6,#0                 ;615
000080  d1ca              BNE      |L25.24|
;;;663        }
;;;664    
;;;665        return (u8Err | u8Xfering);                                             /* return (Success)/(Fail) status */
000082  4628              MOV      r0,r5
;;;666    }
000084  bdf0              POP      {r4-r7,pc}
                  |L25.134|
000086  2201              MOVS     r2,#1                 ;650
000088  0252              LSLS     r2,r2,#9              ;650
00008a  6642              STR      r2,[r0,#0x64]         ;650
00008c  2320              MOVS     r3,#0x20              ;651
00008e  2600              MOVS     r6,#0                 ;652
000090  e7f0              B        |L25.116|
;;;667    
                          ENDP


                          AREA ||i.UI2C_WriteByteOneReg||, CODE, READONLY, ALIGN=1

                  UI2C_WriteByteOneReg PROC
;;;750    
;;;751    uint8_t UI2C_WriteByteOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;752    {
000002  4694              MOV      r12,r2
000004  460a              MOV      r2,r1
;;;753        uint8_t u8Xfering = 1U, u8Err = 0U, u8Ctrl = 0U;
000006  2101              MOVS     r1,#1
000008  2600              MOVS     r6,#0
;;;754        uint32_t u32txLen = 0U;
;;;755    
;;;756        UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  469e              MOV      lr,r3                 ;752
00000e  4634              MOV      r4,r6                 ;753
000010  4635              MOV      r5,r6                 ;754
000012  2320              MOVS     r3,#0x20
000014  439f              BICS     r7,r7,r3
000016  2308              MOVS     r3,#8
000018  431f              ORRS     r7,r7,r3
00001a  65c7              STR      r7,[r0,#0x5c]
                  |L26.28|
;;;757    
;;;758        while (u8Xfering)
;;;759        {
;;;760            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
00001c  6e47              LDR      r7,[r0,#0x64]
00001e  04bf              LSLS     r7,r7,#18
000020  0ebf              LSRS     r7,r7,#26
000022  d0fb              BEQ      |L26.28|
;;;761    
;;;762            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
000024  6e47              LDR      r7,[r0,#0x64]
000026  233f              MOVS     r3,#0x3f
000028  021b              LSLS     r3,r3,#8
00002a  401f              ANDS     r7,r7,r3
00002c  3fff              SUBS     r7,r7,#0xff
00002e  1e7f              SUBS     r7,r7,#1
000030  d013              BEQ      |L26.90|
000032  3fff              SUBS     r7,r7,#0xff
000034  1e7f              SUBS     r7,r7,#1
000036  d02d              BEQ      |L26.148|
000038  3fff              SUBS     r7,r7,#0xff
00003a  3fff              SUBS     r7,r7,#0xff
00003c  1ebf              SUBS     r7,r7,#2
00003e  d01b              BEQ      |L26.120|
000040  2307              MOVS     r3,#7
000042  029b              LSLS     r3,r3,#10
000044  429f              CMP      r7,r3
000046  d11a              BNE      |L26.126|
;;;763            {
;;;764            case UI2C_PROTSTS_STARIF_Msk:
;;;765                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;766                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);             /* Write SLA+W to Register UI2C_TXDAT */
;;;767                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;768                break;
;;;769    
;;;770            case UI2C_PROTSTS_ACKIF_Msk:
;;;771                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000048  2701              MOVS     r7,#1
00004a  037f              LSLS     r7,r7,#13
00004c  6647              STR      r7,[r0,#0x64]
;;;772    
;;;773                if (u32txLen == 0U)
00004e  2d00              CMP      r5,#0
000050  d00a              BEQ      |L26.104|
;;;774                {
;;;775                    UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address to UI2C_TXDAT */
;;;776                    u32txLen++;
;;;777                }
;;;778                else if (u32txLen == 1U)
000052  2d01              CMP      r5,#1
000054  d00c              BEQ      |L26.112|
;;;779                {
;;;780                    UI2C_SET_DATA(ui2c, data);                              /* Write data to UI2C_TXDAT */
;;;781                    u32txLen++;
;;;782                }
;;;783                else
;;;784                {
;;;785                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000056  2424              MOVS     r4,#0x24
000058  e013              B        |L26.130|
                  |L26.90|
00005a  23ff              MOVS     r3,#0xff              ;765
00005c  3301              ADDS     r3,#1                 ;765
00005e  6643              STR      r3,[r0,#0x64]         ;765
000060  0053              LSLS     r3,r2,#1              ;766
000062  6303              STR      r3,[r0,#0x30]         ;766
000064  2420              MOVS     r4,#0x20              ;767
000066  e00c              B        |L26.130|
                  |L26.104|
000068  4663              MOV      r3,r12                ;775
00006a  6303              STR      r3,[r0,#0x30]         ;775
00006c  2501              MOVS     r5,#1                 ;776
00006e  e008              B        |L26.130|
                  |L26.112|
000070  4673              MOV      r3,lr                 ;780
000072  6303              STR      r3,[r0,#0x30]         ;780
000074  2502              MOVS     r5,#2                 ;781
000076  e004              B        |L26.130|
                  |L26.120|
;;;786                }
;;;787    
;;;788                break;
;;;789    
;;;790            case UI2C_PROTSTS_NACKIF_Msk:
;;;791                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
000078  2301              MOVS     r3,#1
00007a  029b              LSLS     r3,r3,#10
00007c  6643              STR      r3,[r0,#0x64]
                  |L26.126|
;;;792                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;793                u8Err = 1U;
;;;794                break;
;;;795    
;;;796            case UI2C_PROTSTS_STORIF_Msk:
;;;797                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
;;;798                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;799                u8Xfering = 0U;
;;;800                break;
;;;801    
;;;802            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;803            default:                                                        /* Unknow status */
;;;804                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
00007e  2424              MOVS     r4,#0x24
;;;805                u8Err = 1U;
000080  2601              MOVS     r6,#1
                  |L26.130|
;;;806                break;
;;;807            }
;;;808    
;;;809            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000082  6dc7              LDR      r7,[r0,#0x5c]
000084  232e              MOVS     r3,#0x2e
000086  439f              BICS     r7,r7,r3
000088  4327              ORRS     r7,r7,r4
00008a  65c7              STR      r7,[r0,#0x5c]
00008c  2900              CMP      r1,#0                 ;758
00008e  d1c5              BNE      |L26.28|
;;;810        }
;;;811    
;;;812        return (u8Err | u8Xfering);                                             /* return (Success)/(Fail) status */
000090  4630              MOV      r0,r6
;;;813    }
000092  bdf0              POP      {r4-r7,pc}
                  |L26.148|
000094  2101              MOVS     r1,#1                 ;797
000096  0249              LSLS     r1,r1,#9              ;797
000098  6641              STR      r1,[r0,#0x64]         ;797
00009a  2420              MOVS     r4,#0x20              ;798
00009c  2100              MOVS     r1,#0                 ;799
00009e  e7f0              B        |L26.130|
;;;814    
                          ENDP


                          AREA ||i.UI2C_WriteByteTwoRegs||, CODE, READONLY, ALIGN=1

                  UI2C_WriteByteTwoRegs PROC
;;;909    
;;;910    uint8_t UI2C_WriteByteTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t data)
000000  b5f0              PUSH     {r4-r7,lr}
;;;911    {
000002  4694              MOV      r12,r2
000004  460a              MOV      r2,r1
;;;912        uint8_t u8Xfering = 1U, u8Err = 0U, u8Ctrl = 0U;
000006  2101              MOVS     r1,#1
000008  2600              MOVS     r6,#0
;;;913        uint32_t u32txLen = 0U;
;;;914    
;;;915        UI2C_START(ui2c);                                                           /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  469e              MOV      lr,r3                 ;911
00000e  4635              MOV      r5,r6                 ;912
000010  4634              MOV      r4,r6                 ;913
000012  2320              MOVS     r3,#0x20
000014  439f              BICS     r7,r7,r3
000016  2308              MOVS     r3,#8
000018  431f              ORRS     r7,r7,r3
00001a  65c7              STR      r7,[r0,#0x5c]
                  |L27.28|
;;;916    
;;;917        while (u8Xfering)
;;;918        {
;;;919            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
00001c  6e47              LDR      r7,[r0,#0x64]
00001e  04bf              LSLS     r7,r7,#18
000020  0ebf              LSRS     r7,r7,#26
000022  d0fb              BEQ      |L27.28|
;;;920    
;;;921            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
000024  6e47              LDR      r7,[r0,#0x64]
000026  233f              MOVS     r3,#0x3f
000028  021b              LSLS     r3,r3,#8
00002a  401f              ANDS     r7,r7,r3
00002c  3fff              SUBS     r7,r7,#0xff
00002e  1e7f              SUBS     r7,r7,#1
000030  d015              BEQ      |L27.94|
000032  3fff              SUBS     r7,r7,#0xff
000034  1e7f              SUBS     r7,r7,#1
000036  d034              BEQ      |L27.162|
000038  3fff              SUBS     r7,r7,#0xff
00003a  3fff              SUBS     r7,r7,#0xff
00003c  1ebf              SUBS     r7,r7,#2
00003e  d022              BEQ      |L27.134|
000040  2307              MOVS     r3,#7
000042  029b              LSLS     r3,r3,#10
000044  429f              CMP      r7,r3
000046  d121              BNE      |L27.140|
;;;922            {
;;;923            case UI2C_PROTSTS_STARIF_Msk:
;;;924                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);         /* Clear START INT Flag */
;;;925                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);                 /* Write SLA+W to Register UI2C_TXDAT */
;;;926                u8Ctrl = UI2C_CTL_PTRG;                                         /* Clear SI */
;;;927                break;
;;;928    
;;;929            case UI2C_PROTSTS_ACKIF_Msk:
;;;930                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);          /* Clear ACK INT Flag */
000048  2701              MOVS     r7,#1
00004a  037f              LSLS     r7,r7,#13
00004c  6647              STR      r7,[r0,#0x64]
;;;931    
;;;932                if (u32txLen == 0U)
00004e  2c00              CMP      r4,#0
000050  d00c              BEQ      |L27.108|
;;;933                {
;;;934                    UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF00U) >> 8U);  /* Write Hi byte data address to UI2C_TXDAT */
;;;935                    u32txLen++;
;;;936                }
;;;937                else if (u32txLen == 1U)
000052  2c01              CMP      r4,#1
000054  d00e              BEQ      |L27.116|
;;;938                {
;;;939                    UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFFU));         /* Write Lo byte data address to UI2C_TXDAT */
;;;940                    u32txLen++;
;;;941                }
;;;942                else if (u32txLen == 2U)
000056  2c02              CMP      r4,#2
000058  d011              BEQ      |L27.126|
;;;943                {
;;;944                    UI2C_SET_DATA(ui2c, data);                                  /* Write data to UI2C_TXDAT */
;;;945                    u32txLen++;
;;;946                }
;;;947                else
;;;948                {
;;;949                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
00005a  2524              MOVS     r5,#0x24
00005c  e018              B        |L27.144|
                  |L27.94|
00005e  23ff              MOVS     r3,#0xff              ;924
000060  3301              ADDS     r3,#1                 ;924
000062  6643              STR      r3,[r0,#0x64]         ;924
000064  0053              LSLS     r3,r2,#1              ;925
000066  6303              STR      r3,[r0,#0x30]         ;925
000068  2520              MOVS     r5,#0x20              ;926
00006a  e011              B        |L27.144|
                  |L27.108|
00006c  2300              MOVS     r3,#0                 ;934
00006e  6303              STR      r3,[r0,#0x30]         ;934
000070  2401              MOVS     r4,#1                 ;935
000072  e00d              B        |L27.144|
                  |L27.116|
000074  4663              MOV      r3,r12                ;939
000076  b2db              UXTB     r3,r3                 ;939
000078  6303              STR      r3,[r0,#0x30]         ;939
00007a  2402              MOVS     r4,#2                 ;940
00007c  e008              B        |L27.144|
                  |L27.126|
00007e  4673              MOV      r3,lr                 ;944
000080  6303              STR      r3,[r0,#0x30]         ;944
000082  2403              MOVS     r4,#3                 ;945
000084  e004              B        |L27.144|
                  |L27.134|
;;;950                }
;;;951    
;;;952                break;
;;;953    
;;;954            case UI2C_PROTSTS_NACKIF_Msk:
;;;955                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);         /* Clear NACK INT Flag */
000086  2301              MOVS     r3,#1
000088  029b              LSLS     r3,r3,#10
00008a  6643              STR      r3,[r0,#0x64]
                  |L27.140|
;;;956                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;957                u8Err = 1U;
;;;958                break;
;;;959    
;;;960            case UI2C_PROTSTS_STORIF_Msk:
;;;961                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
;;;962                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;963                u8Xfering = 0U;
;;;964                break;
;;;965    
;;;966            case UI2C_PROTSTS_ARBLOIF_Msk:                                      /* Arbitration Lost */
;;;967            default:                                                            /* Unknow status */
;;;968                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
00008c  2524              MOVS     r5,#0x24
;;;969                u8Err = 1U;
00008e  2601              MOVS     r6,#1
                  |L27.144|
;;;970                break;
;;;971            }
;;;972    
;;;973            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                     /* Write controlbit to UI2C_CTL register */
000090  6dc7              LDR      r7,[r0,#0x5c]
000092  232e              MOVS     r3,#0x2e
000094  439f              BICS     r7,r7,r3
000096  432f              ORRS     r7,r7,r5
000098  65c7              STR      r7,[r0,#0x5c]
00009a  2900              CMP      r1,#0                 ;917
00009c  d1be              BNE      |L27.28|
;;;974        }
;;;975    
;;;976        return (u8Err | u8Xfering);
00009e  4630              MOV      r0,r6
;;;977    }
0000a0  bdf0              POP      {r4-r7,pc}
                  |L27.162|
0000a2  2101              MOVS     r1,#1                 ;961
0000a4  0249              LSLS     r1,r1,#9              ;961
0000a6  6641              STR      r1,[r0,#0x64]         ;961
0000a8  2520              MOVS     r5,#0x20              ;962
0000aa  2100              MOVS     r1,#0                 ;963
0000ac  e7f0              B        |L27.144|
;;;978    
                          ENDP


                          AREA ||i.UI2C_WriteMultiBytes||, CODE, READONLY, ALIGN=1

                  UI2C_WriteMultiBytes PROC
;;;681    
;;;682    uint32_t UI2C_WriteMultiBytes(UI2C_T *ui2c, uint8_t u8SlaveAddr, const uint8_t *data, uint32_t u32wLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;683    {
;;;684        uint8_t u8Xfering = 1U, u8Ctrl = 0U;
000002  2601              MOVS     r6,#1
000004  2400              MOVS     r4,#0
;;;685        uint32_t u32txLen = 0U;
;;;686    
;;;687        UI2C_START(ui2c);                                                       /* Send START */
000006  6dc7              LDR      r7,[r0,#0x5c]
000008  469c              MOV      r12,r3                ;683
00000a  4625              MOV      r5,r4                 ;685
00000c  2320              MOVS     r3,#0x20
00000e  439f              BICS     r7,r7,r3
000010  2308              MOVS     r3,#8
000012  431f              ORRS     r7,r7,r3
000014  65c7              STR      r7,[r0,#0x5c]
                  |L28.22|
;;;688    
;;;689        while (u8Xfering)
;;;690        {
;;;691            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
000016  6e43              LDR      r3,[r0,#0x64]
000018  049b              LSLS     r3,r3,#18
00001a  0e9b              LSRS     r3,r3,#26
00001c  d0fb              BEQ      |L28.22|
;;;692    
;;;693            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
00001e  6e47              LDR      r7,[r0,#0x64]
000020  233f              MOVS     r3,#0x3f
000022  021b              LSLS     r3,r3,#8
000024  401f              ANDS     r7,r7,r3
000026  3fff              SUBS     r7,r7,#0xff
000028  1e7f              SUBS     r7,r7,#1
00002a  d013              BEQ      |L28.84|
00002c  3fff              SUBS     r7,r7,#0xff
00002e  1e7f              SUBS     r7,r7,#1
000030  d01d              BEQ      |L28.110|
000032  3fff              SUBS     r7,r7,#0xff
000034  3fff              SUBS     r7,r7,#0xff
000036  1ebf              SUBS     r7,r7,#2
000038  d015              BEQ      |L28.102|
00003a  2307              MOVS     r3,#7
00003c  029b              LSLS     r3,r3,#10
00003e  429f              CMP      r7,r3
000040  d10f              BNE      |L28.98|
;;;694            {
;;;695            case UI2C_PROTSTS_STARIF_Msk:
;;;696                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;697                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);             /* Write SLA+W to Register UI2C_TXDAT */
;;;698                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;699                break;
;;;700    
;;;701            case UI2C_PROTSTS_ACKIF_Msk:
;;;702                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000042  2301              MOVS     r3,#1
000044  035b              LSLS     r3,r3,#13
000046  6643              STR      r3,[r0,#0x64]
;;;703    
;;;704                if (u32txLen < u32wLen)
000048  4565              CMP      r5,r12
00004a  d20a              BCS      |L28.98|
;;;705                    UI2C_SET_DATA(ui2c, data[u32txLen++]);                  /* Write data to UI2C_TXDAT */
00004c  5d53              LDRB     r3,[r2,r5]
00004e  6303              STR      r3,[r0,#0x30]
000050  1c6d              ADDS     r5,r5,#1
000052  e011              B        |L28.120|
                  |L28.84|
000054  23ff              MOVS     r3,#0xff              ;696
000056  3301              ADDS     r3,#1                 ;696
000058  6643              STR      r3,[r0,#0x64]         ;696
00005a  004b              LSLS     r3,r1,#1              ;697
00005c  6303              STR      r3,[r0,#0x30]         ;697
00005e  2420              MOVS     r4,#0x20              ;698
000060  e00a              B        |L28.120|
                  |L28.98|
;;;706                else
;;;707                {
;;;708                    u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000062  2424              MOVS     r4,#0x24
000064  e008              B        |L28.120|
                  |L28.102|
;;;709                }
;;;710    
;;;711                break;
;;;712    
;;;713            case UI2C_PROTSTS_NACKIF_Msk:
;;;714                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
000066  2301              MOVS     r3,#1
000068  029b              LSLS     r3,r3,#10
00006a  6643              STR      r3,[r0,#0x64]
;;;715                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;716                break;
00006c  e7f9              B        |L28.98|
                  |L28.110|
;;;717    
;;;718            case UI2C_PROTSTS_STORIF_Msk:
;;;719                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
00006e  2301              MOVS     r3,#1
000070  025b              LSLS     r3,r3,#9
000072  6643              STR      r3,[r0,#0x64]
;;;720                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
000074  2420              MOVS     r4,#0x20
;;;721                u8Xfering = 0U;
000076  2600              MOVS     r6,#0
                  |L28.120|
;;;722                break;
;;;723    
;;;724            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;725            default:                                                        /* Unknow status */
;;;726                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;727                break;
;;;728            }
;;;729    
;;;730            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000078  6dc7              LDR      r7,[r0,#0x5c]
00007a  232e              MOVS     r3,#0x2e
00007c  439f              BICS     r7,r7,r3
00007e  4327              ORRS     r7,r7,r4
000080  65c7              STR      r7,[r0,#0x5c]
000082  2e00              CMP      r6,#0                 ;689
000084  d1c7              BNE      |L28.22|
;;;731        }
;;;732    
;;;733        return u32txLen;                                                        /* Return bytes length that have been transmitted */
000086  4628              MOV      r0,r5
;;;734    }
000088  bdf0              POP      {r4-r7,pc}
;;;735    
                          ENDP


                          AREA ||i.UI2C_WriteMultiBytesOneReg||, CODE, READONLY, ALIGN=1

                  UI2C_WriteMultiBytesOneReg PROC
;;;830    
;;;831    uint32_t UI2C_WriteMultiBytesOneReg(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint8_t u8DataAddr, const uint8_t *data, uint32_t u32wLen)
000000  b5f0              PUSH     {r4-r7,lr}
;;;832    {
000002  4694              MOV      r12,r2
000004  460a              MOV      r2,r1
;;;833        uint8_t u8Xfering = 1U, u8Ctrl = 0U;
000006  2400              MOVS     r4,#0
000008  2101              MOVS     r1,#1
;;;834        uint32_t u32txLen = 0U;
;;;835        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;836    
;;;837        UI2C_START(ui2c);                                                       /* Send START */
00000a  6dc7              LDR      r7,[r0,#0x5c]
00000c  469e              MOV      lr,r3                 ;832
00000e  4625              MOV      r5,r4                 ;834
000010  2612              MOVS     r6,#0x12              ;835
000012  2320              MOVS     r3,#0x20
000014  439f              BICS     r7,r7,r3
000016  2308              MOVS     r3,#8
000018  431f              ORRS     r7,r7,r3
00001a  65c7              STR      r7,[r0,#0x5c]
                  |L29.28|
;;;838    
;;;839        while (u8Xfering)
;;;840        {
;;;841            while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
00001c  6e47              LDR      r7,[r0,#0x64]
00001e  04bf              LSLS     r7,r7,#18
000020  0ebf              LSRS     r7,r7,#26
000022  d0fb              BEQ      |L29.28|
;;;842    
;;;843            switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
000024  6e47              LDR      r7,[r0,#0x64]
000026  233f              MOVS     r3,#0x3f
000028  021b              LSLS     r3,r3,#8
00002a  401f              ANDS     r7,r7,r3
00002c  3fff              SUBS     r7,r7,#0xff
00002e  1e7f              SUBS     r7,r7,#1
000030  d017              BEQ      |L29.98|
000032  3fff              SUBS     r7,r7,#0xff
000034  1e7f              SUBS     r7,r7,#1
000036  d026              BEQ      |L29.134|
000038  3fff              SUBS     r7,r7,#0xff
00003a  3fff              SUBS     r7,r7,#0xff
00003c  1ebf              SUBS     r7,r7,#2
00003e  d01e              BEQ      |L29.126|
000040  2307              MOVS     r3,#7
000042  029b              LSLS     r3,r3,#10
000044  429f              CMP      r7,r3
000046  d118              BNE      |L29.122|
;;;844            {
;;;845            case UI2C_PROTSTS_STARIF_Msk:
;;;846                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);     /* Clear START INT Flag */
;;;847                UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);             /* Write SLA+W to Register UI2C_TXDAT */
;;;848                eEvent = MASTER_SEND_ADDRESS;
;;;849                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
;;;850                break;
;;;851    
;;;852            case UI2C_PROTSTS_ACKIF_Msk:
;;;853                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);      /* Clear ACK INT Flag */
000048  2701              MOVS     r7,#1
00004a  037f              LSLS     r7,r7,#13
00004c  6647              STR      r7,[r0,#0x64]
;;;854    
;;;855                if (eEvent == MASTER_SEND_ADDRESS)
00004e  2e0a              CMP      r6,#0xa
000050  d00f              BEQ      |L29.114|
;;;856                {
;;;857                    UI2C_SET_DATA(ui2c, u8DataAddr);                        /* Write data address to UI2C_TXDAT */
;;;858                    eEvent = MASTER_SEND_DATA;
;;;859                }
;;;860                else
;;;861                {
;;;862                    if (u32txLen < u32wLen)
000052  9f05              LDR      r7,[sp,#0x14]
000054  42bd              CMP      r5,r7
000056  d210              BCS      |L29.122|
;;;863                        UI2C_SET_DATA(ui2c, data[u32txLen++]);              /* Write data to UI2C_TXDAT */
000058  4673              MOV      r3,lr
00005a  5d5f              LDRB     r7,[r3,r5]
00005c  6307              STR      r7,[r0,#0x30]
00005e  1c6d              ADDS     r5,r5,#1
000060  e016              B        |L29.144|
                  |L29.98|
000062  23ff              MOVS     r3,#0xff              ;846
000064  3301              ADDS     r3,#1                 ;846
000066  6643              STR      r3,[r0,#0x64]         ;846
000068  0053              LSLS     r3,r2,#1              ;847
00006a  6303              STR      r3,[r0,#0x30]         ;847
00006c  260a              MOVS     r6,#0xa               ;848
00006e  2420              MOVS     r4,#0x20              ;849
000070  e00e              B        |L29.144|
                  |L29.114|
000072  4663              MOV      r3,r12                ;857
000074  6303              STR      r3,[r0,#0x30]         ;857
000076  260e              MOVS     r6,#0xe               ;858
000078  e00a              B        |L29.144|
                  |L29.122|
;;;864                    else
;;;865                    {
;;;866                        u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);            /* Clear SI and send STOP */
00007a  2424              MOVS     r4,#0x24
00007c  e008              B        |L29.144|
                  |L29.126|
;;;867                    }
;;;868                }
;;;869    
;;;870                break;
;;;871    
;;;872            case UI2C_PROTSTS_NACKIF_Msk:
;;;873                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);     /* Clear NACK INT Flag */
00007e  2301              MOVS     r3,#1
000080  029b              LSLS     r3,r3,#10
000082  6643              STR      r3,[r0,#0x64]
;;;874                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;875                break;
000084  e7f9              B        |L29.122|
                  |L29.134|
;;;876    
;;;877            case UI2C_PROTSTS_STORIF_Msk:
;;;878                UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
000086  2101              MOVS     r1,#1
000088  0249              LSLS     r1,r1,#9
00008a  6641              STR      r1,[r0,#0x64]
;;;879                u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
00008c  2420              MOVS     r4,#0x20
;;;880                u8Xfering = 0U;
00008e  2100              MOVS     r1,#0
                  |L29.144|
;;;881                break;
;;;882    
;;;883            case UI2C_PROTSTS_ARBLOIF_Msk:                                  /* Arbitration Lost */
;;;884            default:                                                        /* Unknow status */
;;;885                u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                    /* Clear SI and send STOP */
;;;886                break;
;;;887            }
;;;888    
;;;889            UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                 /* Write controlbit to UI2C_CTL register */
000090  6dc7              LDR      r7,[r0,#0x5c]
000092  232e              MOVS     r3,#0x2e
000094  439f              BICS     r7,r7,r3
000096  4327              ORRS     r7,r7,r4
000098  65c7              STR      r7,[r0,#0x5c]
00009a  2900              CMP      r1,#0                 ;839
00009c  d1be              BNE      |L29.28|
;;;890        }
;;;891    
;;;892        return u32txLen;                                                        /* Return bytes length that have been transmitted */
00009e  4628              MOV      r0,r5
;;;893    }
0000a0  bdf0              POP      {r4-r7,pc}
;;;894    
                          ENDP


                          AREA ||i.UI2C_WriteMultiBytesTwoRegs||, CODE, READONLY, ALIGN=1

                  UI2C_WriteMultiBytesTwoRegs PROC
;;;994    
;;;995    uint32_t UI2C_WriteMultiBytesTwoRegs(UI2C_T *ui2c, uint8_t u8SlaveAddr, uint16_t u16DataAddr, const uint8_t *data, uint32_t u32wLen)
000000  b5ff              PUSH     {r0-r7,lr}
;;;996    {
000002  468c              MOV      r12,r1
;;;997        uint8_t u8Xfering = 1U, u8Addr = 1U, u8Ctrl = 0U;
000004  2101              MOVS     r1,#1
000006  2300              MOVS     r3,#0
;;;998        uint32_t u32txLen = 0U;
;;;999        enum UI2C_MASTER_EVENT eEvent = MASTER_SEND_START;
;;;1000   
;;;1001       UI2C_START(ui2c);                                                           /* Send START */
000008  6dc6              LDR      r6,[r0,#0x5c]
00000a  4696              MOV      lr,r2                 ;996
00000c  460f              MOV      r7,r1                 ;997
00000e  461c              MOV      r4,r3                 ;998
000010  2512              MOVS     r5,#0x12              ;999
000012  2220              MOVS     r2,#0x20
000014  4396              BICS     r6,r6,r2
000016  2208              MOVS     r2,#8
000018  4316              ORRS     r6,r6,r2
00001a  65c6              STR      r6,[r0,#0x5c]
                  |L30.28|
;;;1002   
;;;1003       while (u8Xfering)
;;;1004       {
;;;1005           while (!(UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U));                     /* Wait UI2C new status occur */
00001c  6e46              LDR      r6,[r0,#0x64]
00001e  04b6              LSLS     r6,r6,#18
000020  0eb6              LSRS     r6,r6,#26
000022  d0fb              BEQ      |L30.28|
;;;1006   
;;;1007           switch (UI2C_GET_PROT_STATUS(ui2c) & 0x3F00U)
000024  6e46              LDR      r6,[r0,#0x64]
000026  223f              MOVS     r2,#0x3f
000028  0212              LSLS     r2,r2,#8
00002a  4016              ANDS     r6,r6,r2
00002c  3eff              SUBS     r6,r6,#0xff
00002e  1e76              SUBS     r6,r6,#1
000030  d012              BEQ      |L30.88|
000032  3eff              SUBS     r6,r6,#0xff
000034  1e76              SUBS     r6,r6,#1
000036  d031              BEQ      |L30.156|
000038  3eff              SUBS     r6,r6,#0xff
00003a  3eff              SUBS     r6,r6,#0xff
00003c  1eb6              SUBS     r6,r6,#2
00003e  d029              BEQ      |L30.148|
000040  2207              MOVS     r2,#7
000042  0292              LSLS     r2,r2,#10
000044  4296              CMP      r6,r2
000046  d123              BNE      |L30.144|
;;;1008           {
;;;1009           case UI2C_PROTSTS_STARIF_Msk:
;;;1010               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STARIF_Msk);         /* Clear START INT Flag */
;;;1011               UI2C_SET_DATA(ui2c, (u8SlaveAddr << 1U) | 0x00U);                 /* Write SLA+W to Register UI2C_TXDAT */
;;;1012               eEvent = MASTER_SEND_ADDRESS;
;;;1013               u8Ctrl = UI2C_CTL_PTRG;                                         /* Clear SI */
;;;1014               break;
;;;1015   
;;;1016           case UI2C_PROTSTS_ACKIF_Msk:
;;;1017               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_ACKIF_Msk);          /* Clear ACK INT Flag */
000048  2601              MOVS     r6,#1
00004a  0376              LSLS     r6,r6,#13
00004c  6646              STR      r6,[r0,#0x64]
;;;1018   
;;;1019               if (eEvent == MASTER_SEND_ADDRESS)
00004e  2d0a              CMP      r5,#0xa
000050  d00b              BEQ      |L30.106|
;;;1020               {
;;;1021                   UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFF00U) >> 8U);  /* Write Hi byte data address to UI2C_TXDAT */
;;;1022                   eEvent = MASTER_SEND_DATA;
;;;1023               }
;;;1024               else if (eEvent == MASTER_SEND_DATA)
000052  2d0e              CMP      r5,#0xe
000054  d00d              BEQ      |L30.114|
000056  e026              B        |L30.166|
                  |L30.88|
000058  22ff              MOVS     r2,#0xff              ;1010
00005a  3201              ADDS     r2,#1                 ;1010
00005c  6642              STR      r2,[r0,#0x64]         ;1010
00005e  4662              MOV      r2,r12                ;1011
000060  0052              LSLS     r2,r2,#1              ;1011
000062  6302              STR      r2,[r0,#0x30]         ;1011
000064  250a              MOVS     r5,#0xa               ;1012
000066  2320              MOVS     r3,#0x20              ;1013
000068  e01d              B        |L30.166|
                  |L30.106|
00006a  2200              MOVS     r2,#0                 ;1021
00006c  6302              STR      r2,[r0,#0x30]         ;1021
00006e  250e              MOVS     r5,#0xe               ;1022
000070  e019              B        |L30.166|
                  |L30.114|
;;;1025               {
;;;1026                   if (u8Addr)
000072  2f00              CMP      r7,#0
000074  d004              BEQ      |L30.128|
;;;1027                   {
;;;1028                       UI2C_SET_DATA(ui2c, (uint8_t)(u16DataAddr & 0xFFU));         /* Write Lo byte data address to UI2C_TXDAT */
000076  4672              MOV      r2,lr
000078  b2d2              UXTB     r2,r2
00007a  6302              STR      r2,[r0,#0x30]
;;;1029                       u8Addr = 0;
00007c  2700              MOVS     r7,#0
00007e  e012              B        |L30.166|
                  |L30.128|
;;;1030                   }
;;;1031                   else
;;;1032                   {
;;;1033                       if (u32txLen < u32wLen)
000080  9e09              LDR      r6,[sp,#0x24]
000082  42b4              CMP      r4,r6
000084  d204              BCS      |L30.144|
;;;1034                       {
;;;1035                           UI2C_SET_DATA(ui2c, data[u32txLen++]);                  /* Write data to UI2C_TXDAT */
000086  9e03              LDR      r6,[sp,#0xc]
000088  5d36              LDRB     r6,[r6,r4]
00008a  6306              STR      r6,[r0,#0x30]
00008c  1c64              ADDS     r4,r4,#1
00008e  e00a              B        |L30.166|
                  |L30.144|
;;;1036                       }
;;;1037                       else
;;;1038                       {
;;;1039                           u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                /* Clear SI and send STOP */
000090  2324              MOVS     r3,#0x24
000092  e008              B        |L30.166|
                  |L30.148|
;;;1040                       }
;;;1041                   }
;;;1042               }
;;;1043   
;;;1044               break;
;;;1045   
;;;1046           case UI2C_PROTSTS_NACKIF_Msk:
;;;1047               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_NACKIF_Msk);         /* Clear NACK INT Flag */
000094  2201              MOVS     r2,#1
000096  0292              LSLS     r2,r2,#10
000098  6642              STR      r2,[r0,#0x64]
;;;1048               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;1049               break;
00009a  e7f9              B        |L30.144|
                  |L30.156|
;;;1050   
;;;1051           case UI2C_PROTSTS_STORIF_Msk:
;;;1052               UI2C_CLR_PROT_INT_FLAG(ui2c, UI2C_PROTSTS_STORIF_Msk);     /* Clear STOP INT Flag */
00009c  2101              MOVS     r1,#1
00009e  0249              LSLS     r1,r1,#9
0000a0  6641              STR      r1,[r0,#0x64]
;;;1053               u8Ctrl = UI2C_CTL_PTRG;                                     /* Clear SI */
0000a2  2320              MOVS     r3,#0x20
;;;1054               u8Xfering = 0U;
0000a4  2100              MOVS     r1,#0
                  |L30.166|
;;;1055               break;
;;;1056   
;;;1057           case UI2C_PROTSTS_ARBLOIF_Msk:                                      /* Arbitration Lost */
;;;1058           default:                                                            /* Unknow status */
;;;1059               u8Ctrl = (UI2C_CTL_PTRG | UI2C_CTL_STO);                        /* Clear SI and send STOP */
;;;1060               break;
;;;1061           }
;;;1062   
;;;1063           UI2C_SET_CONTROL_REG(ui2c, u8Ctrl);                                     /* Write controlbit to UI2C_CTL register */
0000a6  6dc6              LDR      r6,[r0,#0x5c]
0000a8  222e              MOVS     r2,#0x2e
0000aa  4396              BICS     r6,r6,r2
0000ac  431e              ORRS     r6,r6,r3
0000ae  65c6              STR      r6,[r0,#0x5c]
0000b0  2900              CMP      r1,#0                 ;1003
0000b2  d1b3              BNE      |L30.28|
;;;1064       }
;;;1065   
;;;1066       return u32txLen;                                                            /* Return bytes length that have been transmitted */
0000b4  4620              MOV      r0,r4
;;;1067   }
0000b6  b004              ADD      sp,sp,#0x10
0000b8  bdf0              POP      {r4-r7,pc}
;;;1068   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\usci_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usci_i2c_c_c16bae74____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_usci_i2c_c_c16bae74____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usci_i2c_c_c16bae74____REVSH|
#line 402
|__asm___10_usci_i2c_c_c16bae74____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
