; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\usbd.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\usbd.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\usbd.crf ..\..\..\Library\StdDriver\src\usbd.c]
                          THUMB

                          AREA ||i.USBD_CtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_CtrlIn PROC
;;;508      */
;;;509    void USBD_CtrlIn(void)
000000  b570              PUSH     {r4-r6,lr}
;;;510    {
;;;511        uint32_t addr;
;;;512    
;;;513        if(g_usbd_CtrlInSize)
000002  4c21              LDR      r4,|L1.136|
000004  68e0              LDR      r0,[r4,#0xc]  ; g_usbd_CtrlInSize
000006  2600              MOVS     r6,#0
;;;514        {
;;;515            /* Process remained data */
;;;516            if(g_usbd_CtrlInSize > g_usbd_CtrlMaxPktSize)
;;;517            {
;;;518                /* Data size > MXPLD */
;;;519                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
000008  4d20              LDR      r5,|L1.140|
00000a  2800              CMP      r0,#0                 ;513
00000c  d025              BEQ      |L1.90|
00000e  68e0              LDR      r0,[r4,#0xc]          ;516  ; g_usbd_CtrlInSize
000010  6a23              LDR      r3,[r4,#0x20]         ;516  ; g_usbd_CtrlMaxPktSize
000012  4621              MOV      r1,r4                 ;513
000014  4298              CMP      r0,r3                 ;516
000016  4a1e              LDR      r2,|L1.144|
;;;520                USBD_MemCopy((uint8_t *)addr, (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlMaxPktSize);
000018  6849              LDR      r1,[r1,#4]
;;;521                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
;;;522                g_usbd_CtrlInPointer += g_usbd_CtrlMaxPktSize;
;;;523                g_usbd_CtrlInSize -= g_usbd_CtrlMaxPktSize;
;;;524            }
;;;525            else
;;;526            {
;;;527                /* Data size <= MXPLD */
;;;528                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
00001a  6828              LDR      r0,[r5,#0]
00001c  d90e              BLS      |L1.60|
00001e  1880              ADDS     r0,r0,r2              ;519
000020  6a22              LDR      r2,[r4,#0x20]         ;520  ; g_usbd_CtrlMaxPktSize
000022  f7fffffe          BL       USBD_MemCopy
000026  6a20              LDR      r0,[r4,#0x20]         ;521  ; g_usbd_CtrlMaxPktSize
000028  6068              STR      r0,[r5,#4]            ;521
00002a  6a21              LDR      r1,[r4,#0x20]         ;522  ; g_usbd_CtrlMaxPktSize
00002c  6860              LDR      r0,[r4,#4]            ;522  ; g_usbd_CtrlInPointer
00002e  1840              ADDS     r0,r0,r1              ;522
000030  6060              STR      r0,[r4,#4]            ;523  ; g_usbd_CtrlInPointer
000032  68e0              LDR      r0,[r4,#0xc]          ;523  ; g_usbd_CtrlInSize
000034  6a21              LDR      r1,[r4,#0x20]         ;523  ; g_usbd_CtrlMaxPktSize
000036  1a40              SUBS     r0,r0,r1              ;523
000038  60e0              STR      r0,[r4,#0xc]          ;523  ; g_usbd_CtrlInSize
;;;529                USBD_MemCopy((uint8_t *)addr, (uint8_t *)g_usbd_CtrlInPointer, g_usbd_CtrlInSize);
;;;530                USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlInSize);
;;;531                if(g_usbd_CtrlInSize == g_usbd_CtrlMaxPktSize)
;;;532                    g_usbd_CtrlInZeroFlag = 1ul;
;;;533                g_usbd_CtrlInPointer = 0ul;
;;;534                g_usbd_CtrlInSize = 0ul;
;;;535            }
;;;536        }
;;;537        else
;;;538        {
;;;539            /* In ACK for Set address */
;;;540            if((g_usbd_SetupPacket[0] == REQ_STANDARD) && (g_usbd_SetupPacket[1] == SET_ADDRESS))
;;;541            {
;;;542                addr = USBD_GET_ADDR();
;;;543                if((addr != g_usbd_UsbAddr) && (addr == 0ul))
;;;544                    USBD_SET_ADDR(g_usbd_UsbAddr);
;;;545            }
;;;546    
;;;547            /* For the case of data size is integral times maximum packet size */
;;;548            if (g_usbd_CtrlInZeroFlag)
;;;549            {
;;;550                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;551                g_usbd_CtrlInZeroFlag = 0ul;
;;;552            }
;;;553        }
;;;554    }
00003a  bd70              POP      {r4-r6,pc}
                  |L1.60|
00003c  1880              ADDS     r0,r0,r2              ;528
00003e  68e2              LDR      r2,[r4,#0xc]          ;529  ; g_usbd_CtrlInSize
000040  f7fffffe          BL       USBD_MemCopy
000044  68e0              LDR      r0,[r4,#0xc]          ;530  ; g_usbd_CtrlInSize
000046  6068              STR      r0,[r5,#4]            ;530
000048  68e0              LDR      r0,[r4,#0xc]          ;531  ; g_usbd_CtrlInSize
00004a  6a21              LDR      r1,[r4,#0x20]         ;531  ; g_usbd_CtrlMaxPktSize
00004c  4288              CMP      r0,r1                 ;531
00004e  d101              BNE      |L1.84|
000050  2001              MOVS     r0,#1                 ;532
000052  7060              STRB     r0,[r4,#1]            ;532
                  |L1.84|
000054  6066              STR      r6,[r4,#4]            ;534  ; g_usbd_CtrlInPointer
000056  60e6              STR      r6,[r4,#0xc]          ;534  ; g_usbd_CtrlInSize
                  |L1.88|
000058  bd70              POP      {r4-r6,pc}
                  |L1.90|
00005a  480b              LDR      r0,|L1.136|
00005c  3040              ADDS     r0,r0,#0x40           ;540
00005e  7801              LDRB     r1,[r0,#0]            ;540  ; g_usbd_SetupPacket
000060  2900              CMP      r1,#0                 ;540
000062  d10b              BNE      |L1.124|
000064  7840              LDRB     r0,[r0,#1]            ;540  ; g_usbd_SetupPacket
000066  2805              CMP      r0,#5                 ;540
000068  d108              BNE      |L1.124|
00006a  4a0a              LDR      r2,|L1.148|
00006c  6890              LDR      r0,[r2,#8]            ;542
00006e  69a1              LDR      r1,[r4,#0x18]         ;543  ; g_usbd_UsbAddr
000070  4288              CMP      r0,r1                 ;543
000072  d003              BEQ      |L1.124|
000074  2800              CMP      r0,#0                 ;543
000076  d101              BNE      |L1.124|
000078  69a0              LDR      r0,[r4,#0x18]         ;544  ; g_usbd_UsbAddr
00007a  6090              STR      r0,[r2,#8]            ;544
                  |L1.124|
00007c  7860              LDRB     r0,[r4,#1]            ;548  ; g_usbd_CtrlInZeroFlag
00007e  2800              CMP      r0,#0                 ;548
000080  d0ea              BEQ      |L1.88|
000082  606e              STR      r6,[r5,#4]            ;550
000084  7066              STRB     r6,[r4,#1]            ;551
000086  bd70              POP      {r4-r6,pc}
;;;555    
                          ENDP

                  |L1.136|
                          DCD      ||.data||
                  |L1.140|
                          DCD      0x400c0500
                  |L1.144|
                          DCD      0x400c0100
                  |L1.148|
                          DCD      0x400c0000

                          AREA ||i.USBD_CtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_CtrlOut PROC
;;;584      */
;;;585    void USBD_CtrlOut(void)
000000  b570              PUSH     {r4-r6,lr}
;;;586    {
;;;587        uint32_t u32Size;
;;;588        uint32_t addr;
;;;589    
;;;590        if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
000002  4c0d              LDR      r4,|L2.56|
000004  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
000006  6961              LDR      r1,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
000008  4288              CMP      r0,r1
00000a  d214              BCS      |L2.54|
;;;591        {
;;;592            u32Size = USBD_GET_PAYLOAD_LEN(EP1);
00000c  4e0b              LDR      r6,|L2.60|
00000e  6975              LDR      r5,[r6,#0x14]
;;;593            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP1);
000010  6930              LDR      r0,[r6,#0x10]
000012  490b              LDR      r1,|L2.64|
;;;594            USBD_MemCopy((uint8_t *)g_usbd_CtrlOutPointer, (uint8_t *)addr, u32Size);
000014  462a              MOV      r2,r5
000016  1841              ADDS     r1,r0,r1              ;593
000018  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
00001a  f7fffffe          BL       USBD_MemCopy
;;;595            g_usbd_CtrlOutPointer += u32Size;
00001e  68a0              LDR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
000020  1940              ADDS     r0,r0,r5
;;;596            g_usbd_CtrlOutSize += u32Size;
000022  60a0              STR      r0,[r4,#8]  ; g_usbd_CtrlOutPointer
000024  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
000026  1940              ADDS     r0,r0,r5
000028  6120              STR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
;;;597    
;;;598            if(g_usbd_CtrlOutSize < g_usbd_CtrlOutSizeLimit)
00002a  6920              LDR      r0,[r4,#0x10]  ; g_usbd_CtrlOutSize
00002c  6961              LDR      r1,[r4,#0x14]  ; g_usbd_CtrlOutSizeLimit
00002e  4288              CMP      r0,r1
000030  d201              BCS      |L2.54|
;;;599            {
;;;600                USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
000032  6a20              LDR      r0,[r4,#0x20]  ; g_usbd_CtrlMaxPktSize
000034  6170              STR      r0,[r6,#0x14]
                  |L2.54|
;;;601            }
;;;602    
;;;603        }
;;;604    }
000036  bd70              POP      {r4-r6,pc}
;;;605    
                          ENDP

                  |L2.56|
                          DCD      ||.data||
                  |L2.60|
                          DCD      0x400c0500
                  |L2.64|
                          DCD      0x400c0100

                          AREA ||i.USBD_GetDescriptor||, CODE, READONLY, ALIGN=2

                  USBD_GetDescriptor PROC
;;;183      */
;;;184    void USBD_GetDescriptor(void)
000000  b570              PUSH     {r4-r6,lr}
;;;185    {
;;;186        uint32_t u32Len;
;;;187    
;;;188        u32Len = 0ul;
;;;189        u32Len = g_usbd_SetupPacket[7];
000002  4b29              LDR      r3,|L3.168|
;;;190        u32Len <<= 8ul;
;;;191        u32Len += g_usbd_SetupPacket[6];
;;;192    
;;;193        switch(g_usbd_SetupPacket[3])
;;;194        {
;;;195        /* Get Device Descriptor */
;;;196        case DESC_DEVICE:
;;;197        {
;;;198            u32Len = USBD_Minimum(u32Len, (uint32_t)LEN_DEVICE);
;;;199            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8DevDesc, u32Len);
;;;200            break;
;;;201        }
;;;202        /* Get Configuration Descriptor */
;;;203        case DESC_CONFIG:
;;;204        {
;;;205            uint32_t u32TotalLen;
;;;206            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[3];
;;;207            u32TotalLen = g_usbd_sInfo->gu8ConfigDesc[2] + (u32TotalLen << 8);
;;;208            u32Len = USBD_Minimum(u32Len, u32TotalLen);
;;;209            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8ConfigDesc, u32Len);
;;;210            break;
;;;211        }
;;;212    
;;;213        /* Get BOS Descriptor */
;;;214        case DESC_BOS:
;;;215        {
;;;216            u32Len = USBD_Minimum(u32Len, LEN_BOS+LEN_BOSCAP);
;;;217            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8BosDesc, u32Len);
;;;218            break;
;;;219        }
;;;220        /* Get HID Descriptor */
;;;221        case DESC_HID:
;;;222        {
;;;223            /* CV3.0 HID Class Descriptor Test,
;;;224               Need to indicate index of the HID Descriptor within gu8ConfigDescriptor, specifically HID Composite device. */
;;;225            uint32_t u32ConfigDescOffset;   /* u32ConfigDescOffset is configuration descriptor offset (HID descriptor start index) */
;;;226            u32Len = USBD_Minimum(u32Len, LEN_HID);
;;;227            u32ConfigDescOffset = g_usbd_sInfo->gu32ConfigHidDescIdx[g_usbd_SetupPacket[4]];
;;;228            USBD_PrepareCtrlIn((uint8_t *)&g_usbd_sInfo->gu8ConfigDesc[u32ConfigDescOffset], u32Len);
;;;229            break;
;;;230        }
;;;231        /* Get Report Descriptor */
;;;232        case DESC_HID_RPT:
;;;233        {
;;;234            u32Len = USBD_Minimum(u32Len, g_usbd_sInfo->gu32HidReportSize[g_usbd_SetupPacket[4]]);
;;;235            USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8HidReportDesc[g_usbd_SetupPacket[4]], u32Len);
;;;236            break;
;;;237        }
;;;238        /* Get String Descriptor */
;;;239        case DESC_STRING:
;;;240        {
;;;241            /* Get String Descriptor */
;;;242            if(g_usbd_SetupPacket[2] < 4ul)
;;;243            {
;;;244                u32Len = USBD_Minimum(u32Len, g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]][0]);
;;;245                USBD_PrepareCtrlIn((uint8_t *)g_usbd_sInfo->gu8StringDesc[g_usbd_SetupPacket[2]], u32Len);
;;;246                break;
;;;247            }
;;;248            else
;;;249            {
;;;250                /* Not support. Reply STALL. */
;;;251                USBD_SET_EP_STALL(EP0);
000004  4c29              LDR      r4,|L3.172|
000006  79d8              LDRB     r0,[r3,#7]            ;189  ; g_usbd_SetupPacket
000008  7999              LDRB     r1,[r3,#6]            ;191  ; g_usbd_SetupPacket
00000a  0200              LSLS     r0,r0,#8              ;190
00000c  1809              ADDS     r1,r1,r0              ;191
00000e  4618              MOV      r0,r3                 ;199
000010  78da              LDRB     r2,[r3,#3]            ;193  ; g_usbd_SetupPacket
000012  3840              SUBS     r0,r0,#0x40           ;199
000014  2502              MOVS     r5,#2
000016  6bc0              LDR      r0,[r0,#0x3c]         ;199
000018  2a0f              CMP      r2,#0xf               ;193
00001a  d01d              BEQ      |L3.88|
00001c  dc06              BGT      |L3.44|
00001e  2a01              CMP      r2,#1                 ;193
000020  d00c              BEQ      |L3.60|
000022  2a02              CMP      r2,#2                 ;193
000024  d00f              BEQ      |L3.70|
000026  2a03              CMP      r2,#3                 ;193
000028  d137              BNE      |L3.154|
00002a  e02a              B        |L3.130|
                  |L3.44|
00002c  4b1e              LDR      r3,|L3.168|
00002e  791b              LDRB     r3,[r3,#4]            ;227
000030  009b              LSLS     r3,r3,#2              ;227
000032  2a21              CMP      r2,#0x21              ;193
000034  d015              BEQ      |L3.98|
000036  2a22              CMP      r2,#0x22              ;193
000038  d12f              BNE      |L3.154|
00003a  e01a              B        |L3.114|
                  |L3.60|
00003c  2912              CMP      r1,#0x12              ;198
00003e  d300              BCC      |L3.66|
000040  2112              MOVS     r1,#0x12              ;198
                  |L3.66|
000042  6800              LDR      r0,[r0,#0]            ;199
000044  e026              B        |L3.148|
                  |L3.70|
000046  6840              LDR      r0,[r0,#4]            ;206
000048  78c2              LDRB     r2,[r0,#3]            ;206
00004a  7883              LDRB     r3,[r0,#2]            ;207
00004c  0212              LSLS     r2,r2,#8              ;207
00004e  189a              ADDS     r2,r3,r2              ;207
000050  4291              CMP      r1,r2                 ;208
000052  d31f              BCC      |L3.148|
                  |L3.84|
000054  4611              MOV      r1,r2                 ;208
000056  e01d              B        |L3.148|
                  |L3.88|
000058  290c              CMP      r1,#0xc               ;216
00005a  d300              BCC      |L3.94|
00005c  210c              MOVS     r1,#0xc               ;216
                  |L3.94|
00005e  6900              LDR      r0,[r0,#0x10]         ;217
000060  e018              B        |L3.148|
                  |L3.98|
000062  2909              CMP      r1,#9                 ;226
000064  d300              BCC      |L3.104|
000066  2109              MOVS     r1,#9                 ;226
                  |L3.104|
000068  6982              LDR      r2,[r0,#0x18]         ;227
00006a  6840              LDR      r0,[r0,#4]            ;228
00006c  58d2              LDR      r2,[r2,r3]            ;227
00006e  1880              ADDS     r0,r0,r2              ;228
000070  e010              B        |L3.148|
                  |L3.114|
000072  6942              LDR      r2,[r0,#0x14]         ;234
000074  58d2              LDR      r2,[r2,r3]            ;234
000076  428a              CMP      r2,r1                 ;234
000078  d800              BHI      |L3.124|
00007a  4611              MOV      r1,r2                 ;234
                  |L3.124|
00007c  68c0              LDR      r0,[r0,#0xc]          ;235
00007e  58c0              LDR      r0,[r0,r3]            ;235
000080  e008              B        |L3.148|
                  |L3.130|
000082  789a              LDRB     r2,[r3,#2]            ;242  ; g_usbd_SetupPacket
000084  2a04              CMP      r2,#4                 ;242
000086  d208              BCS      |L3.154|
000088  6880              LDR      r0,[r0,#8]            ;244
00008a  0092              LSLS     r2,r2,#2              ;244
00008c  5880              LDR      r0,[r0,r2]            ;244
00008e  7802              LDRB     r2,[r0,#0]            ;244
000090  428a              CMP      r2,r1                 ;244
000092  d9df              BLS      |L3.84|
                  |L3.148|
000094  f7fffffe          BL       USBD_PrepareCtrlIn
;;;252                USBD_SET_EP_STALL(EP1);
;;;253                break;
;;;254            }
;;;255        }
;;;256        default:
;;;257            /* Not support. Reply STALL.*/
;;;258            USBD_SET_EP_STALL(EP0);
;;;259            USBD_SET_EP_STALL(EP1);
;;;260            break;
;;;261        }
;;;262    }
000098  bd70              POP      {r4-r6,pc}
                  |L3.154|
00009a  68e0              LDR      r0,[r4,#0xc]          ;258
00009c  4328              ORRS     r0,r0,r5              ;258
00009e  60e0              STR      r0,[r4,#0xc]          ;258
0000a0  69e0              LDR      r0,[r4,#0x1c]         ;259
0000a2  4328              ORRS     r0,r0,r5              ;259
0000a4  61e0              STR      r0,[r4,#0x1c]         ;259
0000a6  bd70              POP      {r4-r6,pc}
;;;263    
                          ENDP

                  |L3.168|
                          DCD      ||.data||+0x40
                  |L3.172|
                          DCD      0x400c0500

                          AREA ||i.USBD_GetSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_GetSetupPacket PROC
;;;119      */
;;;120    void USBD_GetSetupPacket(uint8_t *buf)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122        USBD_MemCopy(buf, g_usbd_SetupPacket, 8ul);
000002  2208              MOVS     r2,#8
000004  4901              LDR      r1,|L4.12|
000006  f7fffffe          BL       USBD_MemCopy
;;;123    }
00000a  bd10              POP      {r4,pc}
;;;124    
                          ENDP

                  |L4.12|
                          DCD      ||.data||+0x40

                          AREA ||i.USBD_LockEpStall||, CODE, READONLY, ALIGN=2

                  USBD_LockEpStall PROC
;;;677     */
;;;678    void USBD_LockEpStall(uint32_t u32EpBitmap)
000000  4901              LDR      r1,|L5.8|
;;;679    {
;;;680        g_u32EpStallLock = u32EpBitmap;
000002  6388              STR      r0,[r1,#0x38]  ; g_u32EpStallLock
;;;681    }
000004  4770              BX       lr
;;;682    
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.USBD_MemCopy||, CODE, READONLY, ALIGN=1

                  USBD_MemCopy PROC
;;;554      */
;;;555    __STATIC_INLINE void USBD_MemCopy(uint8_t dest[], uint8_t src[], uint32_t size)
000000  b518              PUSH     {r3,r4,lr}
;;;556    {
;;;557        uint32_t volatile i=0ul;
000002  2300              MOVS     r3,#0
                  |L6.4|
000004  9300              STR      r3,[sp,#0]
000006  1e52              SUBS     r2,r2,#1
000008  d306              BCC      |L6.24|
;;;558    
;;;559        while(size--)
;;;560        {
;;;561            dest[i] = src[i];
00000a  9b00              LDR      r3,[sp,#0]
00000c  9c00              LDR      r4,[sp,#0]
00000e  5ccb              LDRB     r3,[r1,r3]
000010  5503              STRB     r3,[r0,r4]
;;;562            i++;
000012  9b00              LDR      r3,[sp,#0]
000014  1c5b              ADDS     r3,r3,#1
000016  e7f5              B        |L6.4|
                  |L6.24|
;;;563        }
;;;564    }
000018  bd18              POP      {r3,r4,pc}
;;;565    
                          ENDP


                          AREA ||i.USBD_Open||, CODE, READONLY, ALIGN=2

                  USBD_Open PROC
;;;72       */
;;;73     void USBD_Open(const S_USBD_INFO_T *param, CLASS_REQ pfnClassReq, SET_INTERFACE_REQ pfnSetInterface)
000000  4b08              LDR      r3,|L7.36|
;;;74     {
;;;75         g_usbd_sInfo = param;
;;;76         g_usbd_pfnClassRequest = pfnClassReq;
;;;77         g_usbd_pfnSetInterface = pfnSetInterface;
;;;78     
;;;79         /* get EP0 maximum packet size */
;;;80         g_usbd_CtrlMaxPktSize = g_usbd_sInfo->gu8DevDesc[7];
000002  631a              STR      r2,[r3,#0x30]  ; g_usbd_pfnSetInterface
000004  62d9              STR      r1,[r3,#0x2c]  ; g_usbd_pfnClassRequest
000006  63d8              STR      r0,[r3,#0x3c]  ; g_usbd_sInfo
000008  6800              LDR      r0,[r0,#0]
00000a  79c0              LDRB     r0,[r0,#7]
00000c  6218              STR      r0,[r3,#0x20]  ; g_usbd_CtrlMaxPktSize
;;;81     
;;;82         /* Initial USB engine */
;;;83         USBD->ATTR = 0x6D0ul;
00000e  206d              MOVS     r0,#0x6d
000010  4905              LDR      r1,|L7.40|
000012  0100              LSLS     r0,r0,#4
000014  6108              STR      r0,[r1,#0x10]
;;;84         /* Force SE0 */
;;;85         USBD_SET_SE0();
000016  4804              LDR      r0,|L7.40|
000018  3080              ADDS     r0,r0,#0x80
00001a  6901              LDR      r1,[r0,#0x10]
00001c  2201              MOVS     r2,#1
00001e  4311              ORRS     r1,r1,r2
000020  6101              STR      r1,[r0,#0x10]
;;;86     }
000022  4770              BX       lr
;;;87     
                          ENDP

                  |L7.36|
                          DCD      ||.data||
                  |L7.40|
                          DCD      0x400c0000

                          AREA ||i.USBD_PrepareCtrlIn||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlIn PROC
;;;471      */
;;;472    void USBD_PrepareCtrlIn(uint8_t pu8Buf[], uint32_t u32Size)
000000  b570              PUSH     {r4-r6,lr}
;;;473    {
;;;474        uint32_t addr;
;;;475        if(u32Size > g_usbd_CtrlMaxPktSize)
000002  4d17              LDR      r5,|L8.96|
000004  460c              MOV      r4,r1                 ;473
000006  6a2b              LDR      r3,[r5,#0x20]  ; g_usbd_CtrlMaxPktSize
;;;476        {
;;;477            /* Data size > MXPLD */
;;;478            g_usbd_CtrlInPointer = pu8Buf + g_usbd_CtrlMaxPktSize;
;;;479            g_usbd_CtrlInSize = u32Size - g_usbd_CtrlMaxPktSize;
;;;480            USBD_SET_DATA1(EP0);
000008  4e16              LDR      r6,|L8.100|
00000a  2180              MOVS     r1,#0x80
;;;481            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
00000c  4a16              LDR      r2,|L8.104|
00000e  429c              CMP      r4,r3                 ;475
000010  d912              BLS      |L8.56|
000012  6a2b              LDR      r3,[r5,#0x20]         ;478  ; g_usbd_CtrlMaxPktSize
000014  18c3              ADDS     r3,r0,r3              ;478
000016  606b              STR      r3,[r5,#4]            ;479  ; g_usbd_CtrlInPointer
000018  6a2b              LDR      r3,[r5,#0x20]         ;479  ; g_usbd_CtrlMaxPktSize
00001a  1ae3              SUBS     r3,r4,r3              ;479
00001c  60eb              STR      r3,[r5,#0xc]          ;479  ; g_usbd_CtrlInSize
00001e  68b3              LDR      r3,[r6,#8]            ;480
000020  430b              ORRS     r3,r3,r1              ;480
000022  60b3              STR      r3,[r6,#8]            ;480
000024  6831              LDR      r1,[r6,#0]
000026  188b              ADDS     r3,r1,r2
;;;482            USBD_MemCopy((uint8_t *)addr, pu8Buf, g_usbd_CtrlMaxPktSize);
000028  6a2a              LDR      r2,[r5,#0x20]  ; g_usbd_CtrlMaxPktSize
00002a  4601              MOV      r1,r0
00002c  4618              MOV      r0,r3
00002e  f7fffffe          BL       USBD_MemCopy
;;;483            USBD_SET_PAYLOAD_LEN(EP0, g_usbd_CtrlMaxPktSize);
000032  6a28              LDR      r0,[r5,#0x20]  ; g_usbd_CtrlMaxPktSize
000034  6070              STR      r0,[r6,#4]
;;;484        }
;;;485        else
;;;486        {
;;;487            /* Data size <= MXPLD */
;;;488            g_usbd_CtrlInPointer = 0;
;;;489            g_usbd_CtrlInSize = 0ul;
;;;490            if (u32Size == g_usbd_CtrlMaxPktSize)
;;;491                g_usbd_CtrlInZeroFlag = 1ul;
;;;492            USBD_SET_DATA1(EP0);
;;;493            addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;494            USBD_MemCopy((uint8_t *)addr, pu8Buf, u32Size);
;;;495            USBD_SET_PAYLOAD_LEN(EP0, u32Size);
;;;496        }
;;;497    }
000036  bd70              POP      {r4-r6,pc}
                  |L8.56|
000038  2300              MOVS     r3,#0                 ;488
00003a  606b              STR      r3,[r5,#4]            ;489  ; g_usbd_CtrlInPointer
00003c  60eb              STR      r3,[r5,#0xc]          ;489  ; g_usbd_CtrlInSize
00003e  6a2b              LDR      r3,[r5,#0x20]         ;490  ; g_usbd_CtrlMaxPktSize
000040  429c              CMP      r4,r3                 ;490
000042  d101              BNE      |L8.72|
000044  2301              MOVS     r3,#1                 ;491
000046  706b              STRB     r3,[r5,#1]            ;491
                  |L8.72|
000048  68b3              LDR      r3,[r6,#8]            ;492
00004a  430b              ORRS     r3,r3,r1              ;492
00004c  60b3              STR      r3,[r6,#8]            ;492
00004e  6831              LDR      r1,[r6,#0]            ;493
000050  188b              ADDS     r3,r1,r2              ;493
000052  4601              MOV      r1,r0                 ;494
000054  4622              MOV      r2,r4                 ;494
000056  4618              MOV      r0,r3                 ;494
000058  f7fffffe          BL       USBD_MemCopy
00005c  6074              STR      r4,[r6,#4]            ;495
00005e  bd70              POP      {r4-r6,pc}
;;;498    
                          ENDP

                  |L8.96|
                          DCD      ||.data||
                  |L8.100|
                          DCD      0x400c0500
                  |L8.104|
                          DCD      0x400c0100

                          AREA ||i.USBD_PrepareCtrlOut||, CODE, READONLY, ALIGN=2

                  USBD_PrepareCtrlOut PROC
;;;566      */
;;;567    void USBD_PrepareCtrlOut(uint8_t *pu8Buf, uint32_t u32Size)
000000  4a04              LDR      r2,|L9.20|
;;;568    {
;;;569        g_usbd_CtrlOutPointer = pu8Buf;
;;;570        g_usbd_CtrlOutSize = 0ul;
000002  6090              STR      r0,[r2,#8]  ; g_usbd_CtrlOutPointer
000004  2000              MOVS     r0,#0
000006  6110              STR      r0,[r2,#0x10]  ; g_usbd_CtrlOutSize
;;;571        g_usbd_CtrlOutSizeLimit = u32Size;
000008  6151              STR      r1,[r2,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;572        USBD_SET_PAYLOAD_LEN(EP1, g_usbd_CtrlMaxPktSize);
00000a  6a10              LDR      r0,[r2,#0x20]  ; g_usbd_CtrlMaxPktSize
00000c  4902              LDR      r1,|L9.24|
00000e  6148              STR      r0,[r1,#0x14]
;;;573    }
000010  4770              BX       lr
;;;574    
                          ENDP

000012  0000              DCW      0x0000
                  |L9.20|
                          DCD      ||.data||
                  |L9.24|
                          DCD      0x400c0500

                          AREA ||i.USBD_ProcessSetupPacket||, CODE, READONLY, ALIGN=2

                  USBD_ProcessSetupPacket PROC
;;;134      */
;;;135    void USBD_ProcessSetupPacket(void)
000000  b510              PUSH     {r4,lr}
;;;136    {
;;;137        /* Get SETUP packet from USB buffer */
;;;138        USBD_MemCopy(g_usbd_SetupPacket, (uint8_t *)USBD_BUF_BASE, 8ul);
000002  2208              MOVS     r2,#8
000004  4910              LDR      r1,|L10.72|
000006  4811              LDR      r0,|L10.76|
000008  f7fffffe          BL       USBD_MemCopy
;;;139    
;;;140        /* Check the request type */
;;;141        switch(g_usbd_SetupPacket[0] & 0x60ul)
00000c  480f              LDR      r0,|L10.76|
00000e  2160              MOVS     r1,#0x60
000010  7800              LDRB     r0,[r0,#0]  ; g_usbd_SetupPacket
000012  4008              ANDS     r0,r0,r1
000014  d00e              BEQ      |L10.52|
;;;142        {
;;;143        case REQ_STANDARD:
;;;144        {
;;;145            USBD_StandardRequest();
;;;146            break;
;;;147        }
;;;148        case REQ_CLASS:
;;;149        {
;;;150            if(g_usbd_pfnClassRequest != NULL)
000016  490d              LDR      r1,|L10.76|
000018  3940              SUBS     r1,r1,#0x40
00001a  2820              CMP      r0,#0x20              ;141
00001c  d00d              BEQ      |L10.58|
00001e  2840              CMP      r0,#0x40              ;141
000020  d00d              BEQ      |L10.62|
;;;151            {
;;;152                g_usbd_pfnClassRequest();
;;;153            }
;;;154            break;
;;;155        }
;;;156        case REQ_VENDOR:
;;;157        {
;;;158            if(g_usbd_pfnVendorRequest != NULL)
;;;159            {
;;;160                g_usbd_pfnVendorRequest();
;;;161            }
;;;162            break;
;;;163        }
;;;164        default:
;;;165        {
;;;166            /* Setup error, stall the device */
;;;167            USBD_SET_EP_STALL(EP0);
000022  480b              LDR      r0,|L10.80|
000024  68c1              LDR      r1,[r0,#0xc]
000026  2202              MOVS     r2,#2
000028  4311              ORRS     r1,r1,r2
00002a  60c1              STR      r1,[r0,#0xc]
;;;168            USBD_SET_EP_STALL(EP1);
00002c  69c1              LDR      r1,[r0,#0x1c]
00002e  4311              ORRS     r1,r1,r2
000030  61c1              STR      r1,[r0,#0x1c]
;;;169            break;
;;;170        }
;;;171        }
;;;172    }
000032  bd10              POP      {r4,pc}
                  |L10.52|
000034  f7fffffe          BL       USBD_StandardRequest
                  |L10.56|
000038  bd10              POP      {r4,pc}
                  |L10.58|
00003a  6ac8              LDR      r0,[r1,#0x2c]         ;150  ; g_usbd_pfnClassRequest
00003c  e000              B        |L10.64|
                  |L10.62|
00003e  6a88              LDR      r0,[r1,#0x28]         ;158  ; g_usbd_pfnVendorRequest
                  |L10.64|
000040  2800              CMP      r0,#0                 ;150
000042  d0f9              BEQ      |L10.56|
000044  4780              BLX      r0                    ;160
000046  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L10.72|
                          DCD      0x400c0100
                  |L10.76|
                          DCD      ||.data||+0x40
                  |L10.80|
                          DCD      0x400c0500

                          AREA ||i.USBD_SetConfigCallback||, CODE, READONLY, ALIGN=2

                  USBD_SetConfigCallback PROC
;;;661     */
;;;662    void USBD_SetConfigCallback(SET_CONFIG_CB pfnSetConfigCallback)
000000  4901              LDR      r1,|L11.8|
;;;663    {
;;;664        g_usbd_pfnSetConfigCallback = pfnSetConfigCallback;
000002  6348              STR      r0,[r1,#0x34]  ; g_usbd_pfnSetConfigCallback
;;;665    }
000004  4770              BX       lr
;;;666    
                          ENDP

000006  0000              DCW      0x0000
                  |L11.8|
                          DCD      ||.data||

                          AREA ||i.USBD_SetVendorRequest||, CODE, READONLY, ALIGN=2

                  USBD_SetVendorRequest PROC
;;;647     */
;;;648    void USBD_SetVendorRequest(VENDOR_REQ pfnVendorReq)
000000  4901              LDR      r1,|L12.8|
;;;649    {
;;;650        g_usbd_pfnVendorRequest = pfnVendorReq;
000002  6288              STR      r0,[r1,#0x28]  ; g_usbd_pfnVendorRequest
;;;651    }
000004  4770              BX       lr
;;;652    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      ||.data||

                          AREA ||i.USBD_StandardRequest||, CODE, READONLY, ALIGN=2

                  USBD_StandardRequest PROC
;;;273      */
;;;274    void USBD_StandardRequest(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;275    {
;;;276        uint32_t addr;
;;;277        /* clear global variables for new request */
;;;278        g_usbd_CtrlInPointer = 0;
000002  486e              LDR      r0,|L13.444|
000004  2500              MOVS     r5,#0
;;;279        g_usbd_CtrlInSize = 0ul;
000006  6045              STR      r5,[r0,#4]  ; g_usbd_CtrlInPointer
000008  60c5              STR      r5,[r0,#0xc]  ; g_usbd_CtrlInSize
;;;280    
;;;281        if((g_usbd_SetupPacket[0] & 0x80ul) == 0x80ul)    /* request data transfer direction */
00000a  4601              MOV      r1,r0
00000c  3140              ADDS     r1,r1,#0x40
00000e  780a              LDRB     r2,[r1,#0]  ; g_usbd_SetupPacket
000010  460b              MOV      r3,r1
;;;282        {
;;;283            /* Device to host */
;;;284            switch(g_usbd_SetupPacket[1])
;;;285            {
;;;286            case GET_CONFIGURATION:
;;;287            {
;;;288                /* Return current configuration setting */
;;;289                /* Data stage */
;;;290                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;291                M8(addr) = (uint8_t)g_usbd_UsbConfig;
;;;292                USBD_SET_DATA1(EP0);
;;;293                USBD_SET_PAYLOAD_LEN(EP0, 1ul);
;;;294                /* Status stage */
;;;295                USBD_PrepareCtrlOut(0, 0ul);
;;;296                break;
;;;297            }
;;;298            case GET_DESCRIPTOR:
;;;299            {
;;;300                USBD_GetDescriptor();
;;;301                USBD_PrepareCtrlOut(0, 0ul); /* For status stage */
;;;302                break;
;;;303            }
;;;304            case GET_INTERFACE:
;;;305            {
;;;306                /* Return current interface setting */
;;;307                /* Data stage */
;;;308                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;309                M8(addr) = (uint8_t)g_usbd_UsbAltInterface;
;;;310                USBD_SET_DATA1(EP0);
;;;311                USBD_SET_PAYLOAD_LEN(EP0, 1ul);
;;;312                /* Status stage */
;;;313                USBD_PrepareCtrlOut(0, 0ul);
;;;314                break;
;;;315            }
;;;316            case GET_STATUS:
;;;317            {
;;;318                /* Device */
;;;319                if(g_usbd_SetupPacket[0] == 0x80ul)
;;;320                {
;;;321                    uint8_t u8Tmp;
;;;322    
;;;323                    u8Tmp = (uint8_t)0ul;
;;;324                    if ((g_usbd_sInfo->gu8ConfigDesc[7] & 0x40ul) == 0x40ul)
;;;325                    {
;;;326                        u8Tmp |= (uint8_t)1ul; /* Self-Powered/Bus-Powered.*/
;;;327                    }
;;;328                    if ((g_usbd_sInfo->gu8ConfigDesc[7] & 0x20ul) == 0x20ul)
;;;329                    {
;;;330                        u8Tmp |= (uint8_t)(g_usbd_RemoteWakeupEn << 1ul); /* Remote wake up */
;;;331                    }
;;;332    
;;;333                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;334                    M8(addr) = u8Tmp;
;;;335                }
;;;336                /* Interface */
;;;337                else if(g_usbd_SetupPacket[0] == 0x81ul)
;;;338                {
;;;339                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;340                    M8(addr) = (uint8_t)0ul;
;;;341                }
;;;342                /* Endpoint */
;;;343                else if(g_usbd_SetupPacket[0] == 0x82ul)
;;;344                {
;;;345                    uint8_t ep = (uint8_t)(g_usbd_SetupPacket[4] & 0xFul);
000012  7919              LDRB     r1,[r3,#4]
000014  785b              LDRB     r3,[r3,#1]            ;284
000016  0709              LSLS     r1,r1,#28
000018  469c              MOV      r12,r3                ;284
00001a  09d7              LSRS     r7,r2,#7              ;281
00001c  2680              MOVS     r6,#0x80              ;292
00001e  0f09              LSRS     r1,r1,#28
000020  2302              MOVS     r3,#2
000022  4c67              LDR      r4,|L13.448|
000024  2f00              CMP      r7,#0                 ;281
000026  4667              MOV      r7,r12                ;281
000028  d06a              BEQ      |L13.256|
00002a  2f00              CMP      r7,#0                 ;284
00002c  d01d              BEQ      |L13.106|
00002e  2f06              CMP      r7,#6                 ;284
000030  d009              BEQ      |L13.70|
000032  2f08              CMP      r7,#8                 ;284
000034  d002              BEQ      |L13.60|
000036  2f0a              CMP      r7,#0xa               ;284
000038  d15b              BNE      |L13.242|
00003a  e00b              B        |L13.84|
                  |L13.60|
00003c  6822              LDR      r2,[r4,#0]            ;290
00003e  4961              LDR      r1,|L13.452|
000040  69c0              LDR      r0,[r0,#0x1c]         ;291  ; g_usbd_UsbConfig
000042  1851              ADDS     r1,r2,r1              ;290
000044  e00a              B        |L13.92|
                  |L13.70|
000046  f7fffffe          BL       USBD_GetDescriptor
                  |L13.74|
00004a  2100              MOVS     r1,#0                 ;295
00004c  4608              MOV      r0,r1                 ;295
00004e  f7fffffe          BL       USBD_PrepareCtrlOut
;;;346                    addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0);
;;;347                    M8(addr) = (uint8_t)(USBD_GetStall(ep) ? 1ul : 0ul);
;;;348                }
;;;349    
;;;350                addr = USBD_BUF_BASE + USBD_GET_EP_BUF_ADDR(EP0) + 1ul;
;;;351                M8(addr) = (uint8_t)0ul;
;;;352                /* Data stage */
;;;353                USBD_SET_DATA1(EP0);
;;;354                USBD_SET_PAYLOAD_LEN(EP0, 2ul);
;;;355                /* Status stage */
;;;356                USBD_PrepareCtrlOut(0, 0ul);
;;;357                break;
;;;358            }
;;;359            default:
;;;360            {
;;;361                /* Setup error, stall the device */
;;;362                USBD_SET_EP_STALL(EP0);
;;;363                USBD_SET_EP_STALL(EP1);
;;;364                break;
;;;365            }
;;;366            }
;;;367        }
;;;368        else
;;;369        {
;;;370            /* Host to device */
;;;371            switch(g_usbd_SetupPacket[1])
;;;372            {
;;;373            case CLEAR_FEATURE:
;;;374            {
;;;375                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;376                {
;;;377                    uint32_t epNum, i;
;;;378                    /* EP number stall is not allow to be clear in MSC class "Error Recovery Test".
;;;379                       a flag: g_u32EpStallLock is added to support it */
;;;380                    epNum = (uint8_t)(g_usbd_SetupPacket[4] & 0xFul);
;;;381                    for(i = 0ul; i < USBD_MAX_EP; i++)
;;;382                    {
;;;383                        if(((USBD->EP[i].CFG & 0xFul) == epNum) && ((g_u32EpStallLock & (1ul << i)) == 0ul))
;;;384                        {
;;;385                            USBD->EP[i].CFGP &= ~USBD_CFGP_SSTALL_Msk;
;;;386                        }
;;;387                    }
;;;388                }
;;;389                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;390                {
;;;391                    g_usbd_RemoteWakeupEn = (uint8_t)0;
;;;392                }
;;;393                /* Status stage */
;;;394                USBD_SET_DATA1(EP0);
;;;395                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;396                break;
;;;397            }
;;;398            case SET_ADDRESS:
;;;399            {
;;;400                g_usbd_UsbAddr = g_usbd_SetupPacket[2];
;;;401                /* Status Stage */
;;;402                USBD_SET_DATA1(EP0);
;;;403                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;404    
;;;405                break;
;;;406            }
;;;407            case SET_CONFIGURATION:
;;;408            {
;;;409                g_usbd_UsbConfig = g_usbd_SetupPacket[2];
;;;410    
;;;411                if(g_usbd_pfnSetConfigCallback)
;;;412                {
;;;413                    g_usbd_pfnSetConfigCallback();
;;;414                }
;;;415    
;;;416                /* Status stage */
;;;417                USBD_SET_DATA1(EP0);
;;;418                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;419                break;
;;;420            }
;;;421            case SET_FEATURE:
;;;422            {
;;;423                if(g_usbd_SetupPacket[2] == FEATURE_ENDPOINT_HALT)
;;;424                {
;;;425                    USBD_SetStall((uint8_t)(g_usbd_SetupPacket[4] & 0xFul));
;;;426                }
;;;427                else if(g_usbd_SetupPacket[2] == FEATURE_DEVICE_REMOTE_WAKEUP)
;;;428                {
;;;429                    g_usbd_RemoteWakeupEn = (uint8_t)1ul;
;;;430                }
;;;431    
;;;432                /* Status stage */
;;;433                USBD_SET_DATA1(EP0);
;;;434                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;435    
;;;436                break;
;;;437            }
;;;438            case SET_INTERFACE:
;;;439            {
;;;440                g_usbd_UsbAltInterface = g_usbd_SetupPacket[2];
;;;441                if(g_usbd_pfnSetInterface != NULL)
;;;442                {
;;;443                    g_usbd_pfnSetInterface(g_usbd_UsbAltInterface);
;;;444                }
;;;445                /* Status stage */
;;;446                USBD_SET_DATA1(EP0);
;;;447                USBD_SET_PAYLOAD_LEN(EP0, 0ul);
;;;448                break;
;;;449            }
;;;450            default:
;;;451            {
;;;452                /* Setup error, stall the device */
;;;453                USBD_SET_EP_STALL(EP0);
;;;454                USBD_SET_EP_STALL(EP1);
;;;455                break;
;;;456            }
;;;457            }
;;;458        }
;;;459    }
000052  bdf8              POP      {r3-r7,pc}
                  |L13.84|
000054  6822              LDR      r2,[r4,#0]            ;308
000056  495b              LDR      r1,|L13.452|
000058  6a40              LDR      r0,[r0,#0x24]         ;309  ; g_usbd_UsbAltInterface
00005a  1851              ADDS     r1,r2,r1              ;308
                  |L13.92|
00005c  7008              STRB     r0,[r1,#0]            ;309
00005e  68a0              LDR      r0,[r4,#8]            ;310
000060  4330              ORRS     r0,r0,r6              ;310
000062  60a0              STR      r0,[r4,#8]            ;310
000064  2001              MOVS     r0,#1                 ;311
000066  6060              STR      r0,[r4,#4]            ;311
000068  e7ef              B        |L13.74|
                  |L13.106|
00006a  2a80              CMP      r2,#0x80              ;319
00006c  d004              BEQ      |L13.120|
00006e  2a81              CMP      r2,#0x81              ;337
000070  d014              BEQ      |L13.156|
000072  2a82              CMP      r2,#0x82              ;343
000074  d017              BEQ      |L13.166|
000076  e032              B        |L13.222|
                  |L13.120|
000078  6bc2              LDR      r2,[r0,#0x3c]         ;324  ; g_usbd_sInfo
00007a  2100              MOVS     r1,#0                 ;323
00007c  6852              LDR      r2,[r2,#4]            ;324
00007e  79d2              LDRB     r2,[r2,#7]            ;324
000080  0657              LSLS     r7,r2,#25             ;324
000082  d500              BPL      |L13.134|
000084  2101              MOVS     r1,#1                 ;326
                  |L13.134|
000086  0692              LSLS     r2,r2,#26             ;328
000088  d503              BPL      |L13.146|
00008a  7800              LDRB     r0,[r0,#0]            ;330  ; g_usbd_RemoteWakeupEn
00008c  0640              LSLS     r0,r0,#25             ;330
00008e  0e00              LSRS     r0,r0,#24             ;330
000090  4301              ORRS     r1,r1,r0              ;330
                  |L13.146|
000092  6822              LDR      r2,[r4,#0]            ;333
000094  484b              LDR      r0,|L13.452|
000096  1810              ADDS     r0,r2,r0              ;333
000098  7001              STRB     r1,[r0,#0]            ;334
00009a  e020              B        |L13.222|
                  |L13.156|
00009c  6821              LDR      r1,[r4,#0]            ;339
00009e  4849              LDR      r0,|L13.452|
0000a0  1808              ADDS     r0,r1,r0              ;339
0000a2  7005              STRB     r5,[r0,#0]            ;340
0000a4  e01b              B        |L13.222|
                  |L13.166|
0000a6  6822              LDR      r2,[r4,#0]            ;346
0000a8  4846              LDR      r0,|L13.452|
0000aa  1810              ADDS     r0,r2,r0              ;346
0000ac  4684              MOV      r12,r0                ;346
0000ae  2000              MOVS     r0,#0                 ;346
                  |L13.176|
0000b0  4a43              LDR      r2,|L13.448|
0000b2  0107              LSLS     r7,r0,#4              ;346
0000b4  3208              ADDS     r2,r2,#8              ;346
0000b6  18ba              ADDS     r2,r7,r2              ;346
0000b8  6817              LDR      r7,[r2,#0]            ;346
0000ba  073f              LSLS     r7,r7,#28             ;346
0000bc  0f3f              LSRS     r7,r7,#28             ;346
0000be  428f              CMP      r7,r1                 ;346
0000c0  d104              BNE      |L13.204|
0000c2  0101              LSLS     r1,r0,#4              ;346
0000c4  483e              LDR      r0,|L13.448|
0000c6  300c              ADDS     r0,r0,#0xc            ;346
0000c8  180a              ADDS     r2,r1,r0              ;346
0000ca  e002              B        |L13.210|
                  |L13.204|
0000cc  1c40              ADDS     r0,r0,#1              ;346
0000ce  2808              CMP      r0,#8                 ;346
0000d0  d3ee              BCC      |L13.176|
                  |L13.210|
0000d2  6810              LDR      r0,[r2,#0]            ;346
0000d4  4018              ANDS     r0,r0,r3              ;346
0000d6  d000              BEQ      |L13.218|
0000d8  2001              MOVS     r0,#1                 ;347
                  |L13.218|
0000da  4661              MOV      r1,r12                ;347
0000dc  7008              STRB     r0,[r1,#0]            ;347
                  |L13.222|
0000de  6820              LDR      r0,[r4,#0]            ;350
0000e0  4938              LDR      r1,|L13.452|
0000e2  1c49              ADDS     r1,r1,#1              ;350
0000e4  1840              ADDS     r0,r0,r1              ;350
0000e6  7005              STRB     r5,[r0,#0]            ;351
0000e8  68a0              LDR      r0,[r4,#8]            ;353
0000ea  4330              ORRS     r0,r0,r6              ;353
0000ec  60a0              STR      r0,[r4,#8]            ;353
0000ee  6063              STR      r3,[r4,#4]            ;354
0000f0  e7ab              B        |L13.74|
                  |L13.242|
0000f2  68e0              LDR      r0,[r4,#0xc]          ;362
0000f4  4318              ORRS     r0,r0,r3              ;362
0000f6  60e0              STR      r0,[r4,#0xc]          ;362
0000f8  69e0              LDR      r0,[r4,#0x1c]         ;363
0000fa  4318              ORRS     r0,r0,r3              ;363
0000fc  61e0              STR      r0,[r4,#0x1c]         ;363
0000fe  bdf8              POP      {r3-r7,pc}
                  |L13.256|
000100  4a2e              LDR      r2,|L13.444|
000102  3240              ADDS     r2,r2,#0x40           ;281
000104  7892              LDRB     r2,[r2,#2]            ;375
000106  2f05              CMP      r7,#5                 ;371
000108  d036              BEQ      |L13.376|
00010a  dc08              BGT      |L13.286|
00010c  2f01              CMP      r7,#1                 ;371
00010e  d011              BEQ      |L13.308|
000110  2f03              CMP      r7,#3                 ;371
000112  d1ee              BNE      |L13.242|
000114  2a00              CMP      r2,#0                 ;423
000116  d037              BEQ      |L13.392|
000118  2a01              CMP      r2,#1                 ;427
00011a  d04b              BEQ      |L13.436|
00011c  e027              B        |L13.366|
                  |L13.286|
00011e  2f09              CMP      r7,#9                 ;371
000120  d02c              BEQ      |L13.380|
000122  2f0b              CMP      r7,#0xb               ;371
000124  d1e5              BNE      |L13.242|
000126  6242              STR      r2,[r0,#0x24]         ;440  ; g_usbd_UsbAltInterface
000128  6b01              LDR      r1,[r0,#0x30]         ;441  ; g_usbd_pfnSetInterface
00012a  2900              CMP      r1,#0                 ;441
00012c  d01f              BEQ      |L13.366|
00012e  6a40              LDR      r0,[r0,#0x24]         ;443  ; g_usbd_UsbAltInterface
000130  4788              BLX      r1                    ;443
000132  e01c              B        |L13.366|
                  |L13.308|
000134  2a00              CMP      r2,#0                 ;375
000136  d002              BEQ      |L13.318|
000138  2a01              CMP      r2,#1                 ;389
00013a  d017              BEQ      |L13.364|
00013c  e017              B        |L13.366|
                  |L13.318|
00013e  6b80              LDR      r0,[r0,#0x38]         ;383
000140  2200              MOVS     r2,#0                 ;381
000142  4684              MOV      r12,r0                ;383
                  |L13.324|
000144  0110              LSLS     r0,r2,#4              ;383
000146  1900              ADDS     r0,r0,r4              ;383
000148  6883              LDR      r3,[r0,#8]            ;383
00014a  071b              LSLS     r3,r3,#28             ;383
00014c  0f1b              LSRS     r3,r3,#28             ;383
00014e  428b              CMP      r3,r1                 ;383
000150  d108              BNE      |L13.356|
000152  2301              MOVS     r3,#1                 ;383
000154  4093              LSLS     r3,r3,r2              ;383
000156  4667              MOV      r7,r12                ;383
000158  423b              TST      r3,r7                 ;383
00015a  d103              BNE      |L13.356|
00015c  68c3              LDR      r3,[r0,#0xc]          ;385
00015e  2702              MOVS     r7,#2                 ;385
000160  43bb              BICS     r3,r3,r7              ;385
000162  60c3              STR      r3,[r0,#0xc]          ;385
                  |L13.356|
000164  1c52              ADDS     r2,r2,#1              ;385
000166  2a08              CMP      r2,#8                 ;381
000168  d3ec              BCC      |L13.324|
00016a  e000              B        |L13.366|
                  |L13.364|
00016c  7005              STRB     r5,[r0,#0]            ;391
                  |L13.366|
00016e  68a0              LDR      r0,[r4,#8]            ;394
000170  4330              ORRS     r0,r0,r6              ;394
000172  60a0              STR      r0,[r4,#8]            ;394
000174  6065              STR      r5,[r4,#4]            ;395
000176  bdf8              POP      {r3-r7,pc}
                  |L13.376|
000178  6182              STR      r2,[r0,#0x18]         ;400  ; g_usbd_UsbAddr
00017a  e7f8              B        |L13.366|
                  |L13.380|
00017c  61c2              STR      r2,[r0,#0x1c]         ;409  ; g_usbd_UsbConfig
00017e  6b40              LDR      r0,[r0,#0x34]         ;411  ; g_usbd_pfnSetConfigCallback
000180  2800              CMP      r0,#0                 ;411
000182  d0f4              BEQ      |L13.366|
000184  4780              BLX      r0                    ;413
000186  e7f2              B        |L13.366|
                  |L13.392|
000188  4f0d              LDR      r7,|L13.448|
00018a  2000              MOVS     r0,#0                 ;413
00018c  3708              ADDS     r7,r7,#8              ;413
                  |L13.398|
00018e  0102              LSLS     r2,r0,#4              ;413
000190  19d2              ADDS     r2,r2,r7              ;413
000192  6812              LDR      r2,[r2,#0]            ;413
000194  0712              LSLS     r2,r2,#28             ;413
000196  0f12              LSRS     r2,r2,#28             ;413
000198  428a              CMP      r2,r1                 ;413
00019a  d107              BNE      |L13.428|
00019c  0101              LSLS     r1,r0,#4              ;413
00019e  4808              LDR      r0,|L13.448|
0001a0  300c              ADDS     r0,r0,#0xc            ;413
0001a2  1808              ADDS     r0,r1,r0              ;413
0001a4  6801              LDR      r1,[r0,#0]            ;413
0001a6  4319              ORRS     r1,r1,r3              ;413
0001a8  6001              STR      r1,[r0,#0]            ;413
0001aa  e7e0              B        |L13.366|
                  |L13.428|
0001ac  1c40              ADDS     r0,r0,#1              ;413
0001ae  2808              CMP      r0,#8                 ;413
0001b0  d3ed              BCC      |L13.398|
0001b2  e7dc              B        |L13.366|
                  |L13.436|
0001b4  2101              MOVS     r1,#1                 ;429
0001b6  7001              STRB     r1,[r0,#0]            ;429
0001b8  e7d9              B        |L13.366|
;;;460    
                          ENDP

0001ba  0000              DCW      0x0000
                  |L13.444|
                          DCD      ||.data||
                  |L13.448|
                          DCD      0x400c0500
                  |L13.452|
                          DCD      0x400c0100

                          AREA ||i.USBD_Start||, CODE, READONLY, ALIGN=2

                  USBD_Start PROC
;;;96       */
;;;97     void USBD_Start(void)
000000  4808              LDR      r0,|L14.36|
;;;98     {
;;;99         /* Disable software-disconnect function */
;;;100        USBD_CLR_SE0();
000002  6901              LDR      r1,[r0,#0x10]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6101              STR      r1,[r0,#0x10]
;;;101        USBD->ATTR = 0x7D0ul;
00000a  217d              MOVS     r1,#0x7d
00000c  4805              LDR      r0,|L14.36|
00000e  0109              LSLS     r1,r1,#4
000010  3880              SUBS     r0,r0,#0x80
000012  6101              STR      r1,[r0,#0x10]
;;;102    
;;;103        /* Clear USB-related interrupts before enable interrupt */
;;;104        USBD_CLR_INT_FLAG(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
000014  21ff              MOVS     r1,#0xff
000016  3110              ADDS     r1,r1,#0x10
000018  6041              STR      r1,[r0,#4]
;;;105    
;;;106        /* Enable USB-related interrupts. */
;;;107        USBD_ENABLE_INT(USBD_INT_BUS | USBD_INT_USB | USBD_INT_FLDET | USBD_INT_WAKEUP);
00001a  6802              LDR      r2,[r0,#0]
00001c  430a              ORRS     r2,r2,r1
00001e  6002              STR      r2,[r0,#0]
;;;108    }
000020  4770              BX       lr
;;;109    
                          ENDP

000022  0000              DCW      0x0000
                  |L14.36|
                          DCD      0x400c0080

                          AREA ||i.USBD_SwReset||, CODE, READONLY, ALIGN=2

                  USBD_SwReset PROC
;;;615      */
;;;616    void USBD_SwReset(void)
000000  b530              PUSH     {r4,r5,lr}
;;;617    {
;;;618        uint32_t i;
;;;619    
;;;620        /* Reset all variables for protocol */
;;;621        g_usbd_CtrlInPointer = 0;
000002  480c              LDR      r0,|L15.52|
000004  2200              MOVS     r2,#0
;;;622        g_usbd_CtrlInSize = 0ul;
000006  6042              STR      r2,[r0,#4]  ; g_usbd_CtrlInPointer
000008  60c2              STR      r2,[r0,#0xc]  ; g_usbd_CtrlInSize
;;;623        g_usbd_CtrlOutPointer = 0;
;;;624        g_usbd_CtrlOutSize = 0ul;
00000a  6082              STR      r2,[r0,#8]  ; g_usbd_CtrlOutPointer
00000c  6102              STR      r2,[r0,#0x10]  ; g_usbd_CtrlOutSize
;;;625        g_usbd_CtrlOutSizeLimit = 0ul;
00000e  6142              STR      r2,[r0,#0x14]  ; g_usbd_CtrlOutSizeLimit
;;;626        g_u32EpStallLock = 0ul;
;;;627        memset(g_usbd_SetupPacket, 0, 8ul);
000010  6382              STR      r2,[r0,#0x38]  ; g_u32EpStallLock
000012  6402              STR      r2,[r0,#0x40]  ; g_usbd_SetupPacket
;;;628    
;;;629        /* Reset PID DATA0 */
;;;630        for(i=0ul; i<USBD_MAX_EP; i++)
000014  6442              STR      r2,[r0,#0x44]  ; g_usbd_SetupPacket
;;;631        {
;;;632            USBD->EP[i].CFG &= ~USBD_CFG_DSQSYNC_Msk;
000016  4b08              LDR      r3,|L15.56|
000018  4610              MOV      r0,r2                 ;630
00001a  2480              MOVS     r4,#0x80
                  |L15.28|
00001c  0101              LSLS     r1,r0,#4
00001e  18c9              ADDS     r1,r1,r3
000020  688d              LDR      r5,[r1,#8]
000022  43a5              BICS     r5,r5,r4
000024  608d              STR      r5,[r1,#8]
000026  1c40              ADDS     r0,r0,#1
000028  2808              CMP      r0,#8                 ;630
00002a  d3f7              BCC      |L15.28|
;;;633        }
;;;634    
;;;635        /* Reset USB device address */
;;;636        USBD_SET_ADDR(0ul);
00002c  4803              LDR      r0,|L15.60|
00002e  6082              STR      r2,[r0,#8]
;;;637    }
000030  bd30              POP      {r4,r5,pc}
;;;638    
                          ENDP

000032  0000              DCW      0x0000
                  |L15.52|
                          DCD      ||.data||
                  |L15.56|
                          DCD      0x400c0500
                  |L15.60|
                          DCD      0x400c0000

                          AREA ||.data||, DATA, ALIGN=2

                  g_usbd_RemoteWakeupEn
000000  00                DCB      0x00
                  g_usbd_CtrlInZeroFlag
000001  000000            DCB      0x00,0x00,0x00
                  g_usbd_CtrlInPointer
                          DCD      0x00000000
                  g_usbd_CtrlOutPointer
                          DCD      0x00000000
                  g_usbd_CtrlInSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSize
                          DCD      0x00000000
                  g_usbd_CtrlOutSizeLimit
                          DCD      0x00000000
                  g_usbd_UsbAddr
                          DCD      0x00000000
                  g_usbd_UsbConfig
                          DCD      0x00000000
                  g_usbd_CtrlMaxPktSize
                          DCD      0x00000008
                  g_usbd_UsbAltInterface
                          DCD      0x00000000
                  g_usbd_pfnVendorRequest
                          DCD      0x00000000
                  g_usbd_pfnClassRequest
                          DCD      0x00000000
                  g_usbd_pfnSetInterface
                          DCD      0x00000000
                  g_usbd_pfnSetConfigCallback
                          DCD      0x00000000
                  g_u32EpStallLock
                          DCD      0x00000000
                  g_usbd_sInfo
                          DCD      0x00000000
                  g_usbd_SetupPacket
000040  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\usbd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_usbd_c_4b498b38____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_usbd_c_4b498b38____REVSH|
#line 402
|__asm___6_usbd_c_4b498b38____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
