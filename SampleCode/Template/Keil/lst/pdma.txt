; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\pdma.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\pdma.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M031\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\pdma.crf ..\..\..\Library\StdDriver\src\pdma.c]
                          THUMB

                          AREA ||i.PDMA_Close||, CODE, READONLY, ALIGN=1

                  PDMA_Close PROC
;;;60      */
;;;61     void PDMA_Close(PDMA_T *pdma)
000000  2201              MOVS     r2,#1
;;;62     {
;;;63         pdma->CHCTL = 0UL;
000002  2100              MOVS     r1,#0
000004  0292              LSLS     r2,r2,#10
000006  1880              ADDS     r0,r0,r2
000008  6001              STR      r1,[r0,#0]
;;;64     }
00000a  4770              BX       lr
;;;65     
                          ENDP


                          AREA ||i.PDMA_DisableInt||, CODE, READONLY, ALIGN=1

                  PDMA_DisableInt PROC
;;;353     */
;;;354    void PDMA_DisableInt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Mask)
000000  b510              PUSH     {r4,lr}
;;;355    {
000002  2401              MOVS     r4,#1
;;;356        switch (u32Mask)
;;;357        {
;;;358        case PDMA_INT_TRANS_DONE:
;;;359            pdma->INTEN &= ~(1ul << u32Ch);
000004  02a3              LSLS     r3,r4,#10
000006  408c              LSLS     r4,r4,r1
000008  18c3              ADDS     r3,r0,r3
00000a  2a00              CMP      r2,#0                 ;356
00000c  d007              BEQ      |L2.30|
00000e  2a01              CMP      r2,#1                 ;356
000010  d009              BEQ      |L2.38|
000012  2a02              CMP      r2,#2                 ;356
000014  d102              BNE      |L2.28|
;;;360            break;
;;;361    
;;;362        case PDMA_INT_TEMPTY:
;;;363            pdma->DSCT[u32Ch].CTL |= PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;364            break;
;;;365    
;;;366        case PDMA_INT_TIMEOUT:
;;;367            pdma->TOUTIEN &= ~(1ul << u32Ch);
000016  6b98              LDR      r0,[r3,#0x38]
000018  43a0              BICS     r0,r0,r4
00001a  6398              STR      r0,[r3,#0x38]
                  |L2.28|
;;;368            break;
;;;369    
;;;370        default:
;;;371            break;
;;;372        }
;;;373    }
00001c  bd10              POP      {r4,pc}
                  |L2.30|
00001e  6998              LDR      r0,[r3,#0x18]         ;359
000020  43a0              BICS     r0,r0,r4              ;359
000022  6198              STR      r0,[r3,#0x18]         ;359
000024  bd10              POP      {r4,pc}
                  |L2.38|
000026  0109              LSLS     r1,r1,#4              ;363
000028  5842              LDR      r2,[r0,r1]            ;363
00002a  2380              MOVS     r3,#0x80              ;363
00002c  431a              ORRS     r2,r2,r3              ;363
00002e  5042              STR      r2,[r0,r1]            ;363
000030  bd10              POP      {r4,pc}
;;;374    
                          ENDP


                          AREA ||i.PDMA_DisableTimeout||, CODE, READONLY, ALIGN=1

                  PDMA_DisableTimeout PROC
;;;245     */
;;;246    void PDMA_DisableTimeout(PDMA_T *pdma, uint32_t u32Mask)
000000  2201              MOVS     r2,#1
;;;247    {
;;;248        pdma->TOUTEN &= ~u32Mask;
000002  0292              LSLS     r2,r2,#10
000004  1880              ADDS     r0,r0,r2
000006  6b42              LDR      r2,[r0,#0x34]
000008  438a              BICS     r2,r2,r1
00000a  6342              STR      r2,[r0,#0x34]
;;;249    }
00000c  4770              BX       lr
;;;250    
                          ENDP


                          AREA ||i.PDMA_EnableInt||, CODE, READONLY, ALIGN=1

                  PDMA_EnableInt PROC
;;;318     */
;;;319    void PDMA_EnableInt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Mask)
000000  b510              PUSH     {r4,lr}
;;;320    {
000002  2401              MOVS     r4,#1
;;;321        switch (u32Mask)
;;;322        {
;;;323        case PDMA_INT_TRANS_DONE:
;;;324            pdma->INTEN |= (1ul << u32Ch);
000004  02a3              LSLS     r3,r4,#10
000006  408c              LSLS     r4,r4,r1
000008  18c3              ADDS     r3,r0,r3
00000a  2a00              CMP      r2,#0                 ;321
00000c  d007              BEQ      |L4.30|
00000e  2a01              CMP      r2,#1                 ;321
000010  d009              BEQ      |L4.38|
000012  2a02              CMP      r2,#2                 ;321
000014  d102              BNE      |L4.28|
;;;325            break;
;;;326    
;;;327        case PDMA_INT_TEMPTY:
;;;328            pdma->DSCT[u32Ch].CTL &= ~PDMA_DSCT_CTL_TBINTDIS_Msk;
;;;329            break;
;;;330    
;;;331        case PDMA_INT_TIMEOUT:
;;;332            pdma->TOUTIEN |= (1ul << u32Ch);
000016  6b98              LDR      r0,[r3,#0x38]
000018  4320              ORRS     r0,r0,r4
00001a  6398              STR      r0,[r3,#0x38]
                  |L4.28|
;;;333            break;
;;;334    
;;;335        default:
;;;336            break;
;;;337        }
;;;338    }
00001c  bd10              POP      {r4,pc}
                  |L4.30|
00001e  6998              LDR      r0,[r3,#0x18]         ;324
000020  4320              ORRS     r0,r0,r4              ;324
000022  6198              STR      r0,[r3,#0x18]         ;324
000024  bd10              POP      {r4,pc}
                  |L4.38|
000026  0109              LSLS     r1,r1,#4              ;328
000028  5842              LDR      r2,[r0,r1]            ;328
00002a  2380              MOVS     r3,#0x80              ;328
00002c  439a              BICS     r2,r2,r3              ;328
00002e  5042              STR      r2,[r0,r1]            ;328
000030  bd10              POP      {r4,pc}
;;;339    
                          ENDP


                          AREA ||i.PDMA_EnableTimeout||, CODE, READONLY, ALIGN=1

                  PDMA_EnableTimeout PROC
;;;230     */
;;;231    void PDMA_EnableTimeout(PDMA_T *pdma, uint32_t u32Mask)
000000  2201              MOVS     r2,#1
;;;232    {
;;;233        pdma->TOUTEN |= u32Mask;
000002  0292              LSLS     r2,r2,#10
000004  1880              ADDS     r0,r0,r2
000006  6b42              LDR      r2,[r0,#0x34]
000008  430a              ORRS     r2,r2,r1
00000a  6342              STR      r2,[r0,#0x34]
;;;234    }
00000c  4770              BX       lr
;;;235    
                          ENDP


                          AREA ||i.PDMA_Open||, CODE, READONLY, ALIGN=2

                  PDMA_Open PROC
;;;35      */
;;;36     void PDMA_Open(PDMA_T *pdma, uint32_t u32Mask)
000000  b570              PUSH     {r4-r6,lr}
;;;37     {
;;;38         uint32_t i;
;;;39     
;;;40         for (i = 0UL; i < PDMA_CH_MAX; i++)
000002  2200              MOVS     r2,#0
;;;41         {
;;;42             if((1 << i) & u32Mask)
;;;43             {
;;;44                 pdma->DSCT[i].CTL = 0UL;
;;;45                 u8ChSelect[i] = PDMA_MEM;
000004  4d09              LDR      r5,|L6.44|
000006  2601              MOVS     r6,#1                 ;42
000008  4613              MOV      r3,r2                 ;42
                  |L6.10|
00000a  4634              MOV      r4,r6                 ;42
00000c  4094              LSLS     r4,r4,r2              ;42
00000e  420c              TST      r4,r1                 ;42
000010  d002              BEQ      |L6.24|
000012  0114              LSLS     r4,r2,#4              ;44
000014  5103              STR      r3,[r0,r4]            ;44
000016  54ab              STRB     r3,[r5,r2]
                  |L6.24|
000018  1c52              ADDS     r2,r2,#1
00001a  2a05              CMP      r2,#5                 ;40
00001c  d3f5              BCC      |L6.10|
;;;46             }
;;;47         }
;;;48     
;;;49         pdma->CHCTL |= u32Mask;
00001e  2201              MOVS     r2,#1
000020  0292              LSLS     r2,r2,#10
000022  1880              ADDS     r0,r0,r2
000024  6802              LDR      r2,[r0,#0]
000026  430a              ORRS     r2,r2,r1
000028  6002              STR      r2,[r0,#0]
;;;50     }
00002a  bd70              POP      {r4-r6,pc}
;;;51     
                          ENDP

                  |L6.44|
                          DCD      ||.data||

                          AREA ||i.PDMA_SetBurstType||, CODE, READONLY, ALIGN=1

                  PDMA_SetBurstType PROC
;;;214     */
;;;215    void PDMA_SetBurstType(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32BurstType, uint32_t u32BurstSize)
000000  b530              PUSH     {r4,r5,lr}
;;;216    {
;;;217        pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_TXTYPE_Msk | PDMA_DSCT_CTL_BURSIZE_Msk);
000002  0109              LSLS     r1,r1,#4
000004  5844              LDR      r4,[r0,r1]
000006  2574              MOVS     r5,#0x74
000008  43ac              BICS     r4,r4,r5
00000a  5044              STR      r4,[r0,r1]
;;;218        pdma->DSCT[u32Ch].CTL |= (u32BurstType | u32BurstSize);
00000c  5844              LDR      r4,[r0,r1]
00000e  431a              ORRS     r2,r2,r3
000010  4314              ORRS     r4,r4,r2
000012  5044              STR      r4,[r0,r1]
;;;219    }
000014  bd30              POP      {r4,r5,pc}
;;;220    
                          ENDP


                          AREA ||i.PDMA_SetTimeOut||, CODE, READONLY, ALIGN=1

                  PDMA_SetTimeOut PROC
;;;263     */
;;;264    void PDMA_SetTimeOut(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32OnOff, uint32_t u32TimeOutCnt)
000000  b510              PUSH     {r4,lr}
;;;265    {
;;;266        switch (u32Ch)
;;;267        {
;;;268        case 0ul:
;;;269            pdma->TOC0_1 = (pdma->TOC0_1 & ~PDMA_TOC0_1_TOC0_Msk) | u32TimeOutCnt;
000002  2401              MOVS     r4,#1
000004  02a4              LSLS     r4,r4,#10
000006  1900              ADDS     r0,r0,r4
000008  2900              CMP      r1,#0                 ;266
00000a  d002              BEQ      |L8.18|
00000c  2901              CMP      r1,#1                 ;266
00000e  d109              BNE      |L8.36|
000010  e003              B        |L8.26|
                  |L8.18|
000012  6c04              LDR      r4,[r0,#0x40]
000014  0c24              LSRS     r4,r4,#16
000016  0424              LSLS     r4,r4,#16
;;;270            break;
000018  e002              B        |L8.32|
                  |L8.26|
;;;271    
;;;272        case 1ul:
;;;273            pdma->TOC0_1 = (pdma->TOC0_1 & ~PDMA_TOC0_1_TOC1_Msk) | (u32TimeOutCnt << PDMA_TOC0_1_TOC1_Pos);
00001a  6c04              LDR      r4,[r0,#0x40]
00001c  041b              LSLS     r3,r3,#16
00001e  b2a4              UXTH     r4,r4
                  |L8.32|
000020  431c              ORRS     r4,r4,r3              ;269
000022  6404              STR      r4,[r0,#0x40]         ;269
                  |L8.36|
000024  2301              MOVS     r3,#1                 ;265
;;;274            break;
;;;275    
;;;276        default:
;;;277            break;
;;;278        }
;;;279    
;;;280        if (u32OnOff)
;;;281            pdma->TOUTEN |= (1ul << u32Ch);
000026  408b              LSLS     r3,r3,r1
;;;282        else
;;;283            pdma->TOUTEN &= ~(1ul << u32Ch);
000028  6b41              LDR      r1,[r0,#0x34]
00002a  2a00              CMP      r2,#0                 ;280
00002c  d001              BEQ      |L8.50|
00002e  4319              ORRS     r1,r1,r3              ;281
000030  e000              B        |L8.52|
                  |L8.50|
000032  4399              BICS     r1,r1,r3
                  |L8.52|
000034  6341              STR      r1,[r0,#0x34]         ;281
;;;284    }
000036  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||i.PDMA_SetTransferAddr||, CODE, READONLY, ALIGN=1

                  PDMA_SetTransferAddr PROC
;;;104     */
;;;105    void PDMA_SetTransferAddr(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl)
000000  b570              PUSH     {r4-r6,lr}
;;;106    {
;;;107        pdma->DSCT[u32Ch].SA = u32SrcAddr;
000002  0109              LSLS     r1,r1,#4
000004  180e              ADDS     r6,r1,r0
000006  9d04              LDR      r5,[sp,#0x10]
000008  9c05              LDR      r4,[sp,#0x14]
00000a  6072              STR      r2,[r6,#4]
;;;108        pdma->DSCT[u32Ch].DA = u32DstAddr;
00000c  60b5              STR      r5,[r6,#8]
;;;109        pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_SAINC_Msk | PDMA_DSCT_CTL_DAINC_Msk);
00000e  5842              LDR      r2,[r0,r1]
000010  250f              MOVS     r5,#0xf
000012  022d              LSLS     r5,r5,#8
000014  43aa              BICS     r2,r2,r5
000016  5042              STR      r2,[r0,r1]
;;;110        pdma->DSCT[u32Ch].CTL |= (u32SrcCtrl | u32DstCtrl);
000018  5842              LDR      r2,[r0,r1]
00001a  4323              ORRS     r3,r3,r4
00001c  431a              ORRS     r2,r2,r3
00001e  5042              STR      r2,[r0,r1]
;;;111    }
000020  bd70              POP      {r4-r6,pc}
;;;112    
                          ENDP


                          AREA ||i.PDMA_SetTransferCnt||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferCnt PROC
;;;80      */
;;;81     void PDMA_SetTransferCnt(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount)
000000  b530              PUSH     {r4,r5,lr}
;;;82     {
;;;83         pdma->DSCT[u32Ch].CTL &= ~(PDMA_DSCT_CTL_TXCNT_Msk | PDMA_DSCT_CTL_TXWIDTH_Msk);
000002  0109              LSLS     r1,r1,#4
000004  5844              LDR      r4,[r0,r1]
000006  4d06              LDR      r5,|L10.32|
000008  402c              ANDS     r4,r4,r5
00000a  5044              STR      r4,[r0,r1]
;;;84         pdma->DSCT[u32Ch].CTL |= (u32Width | ((u32TransCount - 1UL) << PDMA_DSCT_CTL_TXCNT_Pos));
00000c  5844              LDR      r4,[r0,r1]
00000e  2501              MOVS     r5,#1
000010  041b              LSLS     r3,r3,#16
000012  042d              LSLS     r5,r5,#16
000014  1b5b              SUBS     r3,r3,r5
000016  4313              ORRS     r3,r3,r2
000018  431c              ORRS     r4,r4,r3
00001a  5044              STR      r4,[r0,r1]
;;;85     }
00001c  bd30              POP      {r4,r5,pc}
;;;86     
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x0000cfff

                          AREA ||i.PDMA_SetTransferMode||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferMode PROC
;;;151     */
;;;152    void PDMA_SetTransferMode(PDMA_T *pdma, uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr)
000000  b5f0              PUSH     {r4-r7,lr}
;;;153    {
000002  461d              MOV      r5,r3
;;;154        u8ChSelect[u32Ch] = u32Peripheral;
000004  4b1f              LDR      r3,|L11.132|
000006  9e05              LDR      r6,[sp,#0x14]
000008  545a              STRB     r2,[r3,r1]
;;;155    
;;;156        switch (u32Ch)
;;;157        {
;;;158        case 0ul:
;;;159            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC0_Msk) | u32Peripheral;
00000a  2309              MOVS     r3,#9
00000c  01db              LSLS     r3,r3,#7
00000e  18c4              ADDS     r4,r0,r3
000010  000b              MOVS     r3,r1                 ;156
000012  f7fffffe          BL       __ARM_common_switch8
000016  0504              DCB      0x05,0x04
000018  0810161c          DCB      0x08,0x10,0x16,0x1c
00001c  2100              DCB      0x21,0x00
00001e  6823              LDR      r3,[r4,#0]
000020  099b              LSRS     r3,r3,#6
000022  019b              LSLS     r3,r3,#6
;;;160            break;
000024  e004              B        |L11.48|
;;;161    
;;;162        case 1ul:
;;;163            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC1_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC1_Pos);
000026  6823              LDR      r3,[r4,#0]
000028  273f              MOVS     r7,#0x3f
00002a  023f              LSLS     r7,r7,#8
00002c  43bb              BICS     r3,r3,r7
00002e  0212              LSLS     r2,r2,#8
                  |L11.48|
000030  4313              ORRS     r3,r3,r2              ;159
000032  6023              STR      r3,[r4,#0]            ;159
000034  e010              B        |L11.88|
;;;164            break;
;;;165    
;;;166        case 2ul:
;;;167            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC2_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC2_Pos);
000036  6823              LDR      r3,[r4,#0]
000038  273f              MOVS     r7,#0x3f
00003a  043f              LSLS     r7,r7,#16
00003c  43bb              BICS     r3,r3,r7
00003e  0412              LSLS     r2,r2,#16
;;;168            break;
000040  e7f6              B        |L11.48|
;;;169    
;;;170        case 3ul:
;;;171            pdma->REQSEL0_3 = (pdma->REQSEL0_3 & ~PDMA_REQSEL0_3_REQSRC3_Msk) | (u32Peripheral << PDMA_REQSEL0_3_REQSRC3_Pos);
000042  6823              LDR      r3,[r4,#0]
000044  273f              MOVS     r7,#0x3f
000046  063f              LSLS     r7,r7,#24
000048  43bb              BICS     r3,r3,r7
00004a  0612              LSLS     r2,r2,#24
;;;172            break;
00004c  e7f0              B        |L11.48|
;;;173    
;;;174        case 4ul:
;;;175            pdma->REQSEL4 = (pdma->REQSEL4 & ~PDMA_REQSEL4_REQSRC4_Msk) | u32Peripheral;
00004e  6863              LDR      r3,[r4,#4]
000050  099b              LSRS     r3,r3,#6
000052  019b              LSLS     r3,r3,#6
000054  4313              ORRS     r3,r3,r2
000056  6063              STR      r3,[r4,#4]
                  |L11.88|
;;;176            break;
;;;177    
;;;178        default:
;;;179            break;
;;;180        }
;;;181    
;;;182        if (u32ScatterEn)
;;;183        {
;;;184            pdma->DSCT[u32Ch].CTL = (pdma->DSCT[u32Ch].CTL & ~PDMA_DSCT_CTL_OPMODE_Msk) | PDMA_OP_SCATTER;
000058  0109              LSLS     r1,r1,#4
;;;185            pdma->DSCT[u32Ch].NEXT = u32DescAddr - (pdma->SCATBA);
;;;186        }
;;;187        else
;;;188        {
;;;189            pdma->DSCT[u32Ch].CTL = (pdma->DSCT[u32Ch].CTL & ~PDMA_DSCT_CTL_OPMODE_Msk) | PDMA_OP_BASIC;
00005a  5842              LDR      r2,[r0,r1]
00005c  2d00              CMP      r5,#0                 ;182
00005e  d00b              BEQ      |L11.120|
000060  0892              LSRS     r2,r2,#2              ;184
000062  0092              LSLS     r2,r2,#2              ;184
000064  1c92              ADDS     r2,r2,#2              ;184
000066  5042              STR      r2,[r0,r1]            ;184
000068  2201              MOVS     r2,#1                 ;185
00006a  0292              LSLS     r2,r2,#10             ;185
00006c  1882              ADDS     r2,r0,r2              ;185
00006e  6bd2              LDR      r2,[r2,#0x3c]         ;185
000070  1ab2              SUBS     r2,r6,r2              ;185
000072  1808              ADDS     r0,r1,r0              ;185
000074  60c2              STR      r2,[r0,#0xc]          ;185
;;;190        }
;;;191    }
000076  bdf0              POP      {r4-r7,pc}
                  |L11.120|
000078  0892              LSRS     r2,r2,#2              ;189
00007a  0092              LSLS     r2,r2,#2              ;189
00007c  1c52              ADDS     r2,r2,#1              ;189
00007e  5042              STR      r2,[r0,r1]            ;189
000080  bdf0              POP      {r4-r7,pc}
;;;192    
                          ENDP

000082  0000              DCW      0x0000
                  |L11.132|
                          DCD      ||.data||

                          AREA ||i.PDMA_Trigger||, CODE, READONLY, ALIGN=2

                  PDMA_Trigger PROC
;;;295     */
;;;296    void PDMA_Trigger(PDMA_T *pdma, uint32_t u32Ch)
000000  4a05              LDR      r2,|L12.24|
;;;297    {
;;;298        if (u8ChSelect[u32Ch] == PDMA_MEM)
000002  5c52              LDRB     r2,[r2,r1]
000004  2a00              CMP      r2,#0
000006  d105              BNE      |L12.20|
;;;299        {
;;;300            pdma->SWREQ = (1ul << u32Ch);
000008  2201              MOVS     r2,#1
00000a  408a              LSLS     r2,r2,r1
00000c  2101              MOVS     r1,#1
00000e  0289              LSLS     r1,r1,#10
000010  1840              ADDS     r0,r0,r1
000012  6082              STR      r2,[r0,#8]
                  |L12.20|
;;;301        }
;;;302        else {}
;;;303    }
000014  4770              BX       lr
;;;304    
                          ENDP

000016  0000              DCW      0x0000
                  |L12.24|
                          DCD      ||.data||

                          AREA ||.data||, DATA, ALIGN=0

                  u8ChSelect
                          DCDU     0x00000000
000004  00                DCB      0x00

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L81.16|
00000e  461d              MOV      r5,r3
                  |L81.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\pdma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_pdma_c_4711ff23____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REVSH|
#line 402
|__asm___6_pdma_c_4711ff23____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
